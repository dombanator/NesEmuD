; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; nromInit
PUBLIC	?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mmc1Init
PUBLIC	?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; unromInit
PUBLIC	?mapperInit@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperInit
PUBLIC	?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; nromUpdate
PUBLIC	?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mmc1Update
PUBLIC	?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; unromUpdate
PUBLIC	?mapperUpdate@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperUpdate
PUBLIC	?adc@@YAEGPEAUcpu@@E@Z				; adc
PUBLIC	?AND@@YAEGPEAUcpu@@E@Z				; AND
PUBLIC	?asl@@YAEGPEAUcpu@@E@Z				; asl
PUBLIC	?bcc@@YAEGPEAUcpu@@E@Z				; bcc
PUBLIC	?bcs@@YAEGPEAUcpu@@E@Z				; bcs
PUBLIC	?beq@@YAEGPEAUcpu@@E@Z				; beq
PUBLIC	?IOReadFromCpu@@3HA				; IOReadFromCpu
PUBLIC	?IOWriteFromCpu@@3HA				; IOWriteFromCpu
PUBLIC	?ScrollAdrsChange@@3HA				; ScrollAdrsChange
PUBLIC	?VRamAdrsChange@@3HA				; VRamAdrsChange
PUBLIC	?ResetScrollIOAdrs@@3HA				; ResetScrollIOAdrs
PUBLIC	?ResetVRamIOAdrs@@3HA				; ResetVRamIOAdrs
PUBLIC	?bit@@YAEGPEAUcpu@@E@Z				; bit
PUBLIC	?bmi@@YAEGPEAUcpu@@E@Z				; bmi
PUBLIC	?bne@@YAEGPEAUcpu@@E@Z				; bne
PUBLIC	?bpl@@YAEGPEAUcpu@@E@Z				; bpl
PUBLIC	?brk@@YAEGPEAUcpu@@E@Z				; brk
PUBLIC	?bvc@@YAEGPEAUcpu@@E@Z				; bvc
PUBLIC	?bvs@@YAEGPEAUcpu@@E@Z				; bvs
PUBLIC	?clc@@YAEGPEAUcpu@@E@Z				; clc
PUBLIC	?cld@@YAEGPEAUcpu@@E@Z				; cld
PUBLIC	?cli@@YAEGPEAUcpu@@E@Z				; cli
PUBLIC	?clv@@YAEGPEAUcpu@@E@Z				; clv
PUBLIC	?cmp@@YAEGPEAUcpu@@E@Z				; cmp
PUBLIC	?cpx@@YAEGPEAUcpu@@E@Z				; cpx
PUBLIC	?cpy@@YAEGPEAUcpu@@E@Z				; cpy
PUBLIC	?dec@@YAEGPEAUcpu@@E@Z				; dec
PUBLIC	?dex@@YAEGPEAUcpu@@E@Z				; dex
PUBLIC	?dey@@YAEGPEAUcpu@@E@Z				; dey
PUBLIC	?eor@@YAEGPEAUcpu@@E@Z				; eor
PUBLIC	?inc@@YAEGPEAUcpu@@E@Z				; inc
PUBLIC	?inx@@YAEGPEAUcpu@@E@Z				; inx
PUBLIC	?iny@@YAEGPEAUcpu@@E@Z				; iny
PUBLIC	?jmp@@YAEGPEAUcpu@@E@Z				; jmp
PUBLIC	?jsr@@YAEGPEAUcpu@@E@Z				; jsr
PUBLIC	?NmiTriggered@@3HA				; NmiTriggered
PUBLIC	?IrqTriggered@@3HA				; IrqTriggered
PUBLIC	?OamDataChange@@3HA				; OamDataChange
PUBLIC	?lda@@YAEGPEAUcpu@@E@Z				; lda
PUBLIC	?Palette@@3PAY02EA				; Palette
PUBLIC	?ldx@@YAEGPEAUcpu@@E@Z				; ldx
PUBLIC	?ldy@@YAEGPEAUcpu@@E@Z				; ldy
PUBLIC	?lsr@@YAEGPEAUcpu@@E@Z				; lsr
PUBLIC	?nop@@YAEGPEAUcpu@@E@Z				; nop
PUBLIC	?ora@@YAEGPEAUcpu@@E@Z				; ora
PUBLIC	?pha@@YAEGPEAUcpu@@E@Z				; pha
PUBLIC	?php@@YAEGPEAUcpu@@E@Z				; php
PUBLIC	?pla@@YAEGPEAUcpu@@E@Z				; pla
PUBLIC	?plp@@YAEGPEAUcpu@@E@Z				; plp
PUBLIC	?rol@@YAEGPEAUcpu@@E@Z				; rol
PUBLIC	?ror@@YAEGPEAUcpu@@E@Z				; ror
PUBLIC	?LowPatternShiftReg@@3GA			; LowPatternShiftReg
PUBLIC	?HighPatternShiftReg@@3GA			; HighPatternShiftReg
PUBLIC	?PaletteLatchOld@@3EA				; PaletteLatchOld
PUBLIC	?PaletteLatchNew@@3EA				; PaletteLatchNew
PUBLIC	?NextLowPattern@@3EA				; NextLowPattern
PUBLIC	?NextHighPattern@@3EA				; NextHighPattern
PUBLIC	?NextAtrbByte@@3EA				; NextAtrbByte
PUBLIC	?NextNametableAdrs@@3GA				; NextNametableAdrs
PUBLIC	?rti@@YAEGPEAUcpu@@E@Z				; rti
PUBLIC	?rts@@YAEGPEAUcpu@@E@Z				; rts
PUBLIC	?sbc@@YAEGPEAUcpu@@E@Z				; sbc
PUBLIC	?sec@@YAEGPEAUcpu@@E@Z				; sec
PUBLIC	?sed@@YAEGPEAUcpu@@E@Z				; sed
PUBLIC	?sei@@YAEGPEAUcpu@@E@Z				; sei
PUBLIC	?sta@@YAEGPEAUcpu@@E@Z				; sta
PUBLIC	?stx@@YAEGPEAUcpu@@E@Z				; stx
PUBLIC	?sty@@YAEGPEAUcpu@@E@Z				; sty
PUBLIC	?tax@@YAEGPEAUcpu@@E@Z				; tax
PUBLIC	?tay@@YAEGPEAUcpu@@E@Z				; tay
PUBLIC	?tsx@@YAEGPEAUcpu@@E@Z				; tsx
PUBLIC	?txa@@YAEGPEAUcpu@@E@Z				; txa
PUBLIC	?tya@@YAEGPEAUcpu@@E@Z				; tya
PUBLIC	?txs@@YAEGPEAUcpu@@E@Z				; txs
PUBLIC	?ahx@@YAEGPEAUcpu@@E@Z				; ahx
PUBLIC	?alr@@YAEGPEAUcpu@@E@Z				; alr
PUBLIC	?anc@@YAEGPEAUcpu@@E@Z				; anc
PUBLIC	?arr@@YAEGPEAUcpu@@E@Z				; arr
PUBLIC	?axs@@YAEGPEAUcpu@@E@Z				; axs
PUBLIC	?dcp@@YAEGPEAUcpu@@E@Z				; dcp
PUBLIC	?isc@@YAEGPEAUcpu@@E@Z				; isc
PUBLIC	?kil@@YAEGPEAUcpu@@E@Z				; kil
PUBLIC	?las@@YAEGPEAUcpu@@E@Z				; las
PUBLIC	?lax@@YAEGPEAUcpu@@E@Z				; lax
PUBLIC	?rla@@YAEGPEAUcpu@@E@Z				; rla
PUBLIC	?rra@@YAEGPEAUcpu@@E@Z				; rra
PUBLIC	?sax@@YAEGPEAUcpu@@E@Z				; sax
PUBLIC	?shx@@YAEGPEAUcpu@@E@Z				; shx
PUBLIC	?shy@@YAEGPEAUcpu@@E@Z				; shy
PUBLIC	?slo@@YAEGPEAUcpu@@E@Z				; slo
PUBLIC	?sre@@YAEGPEAUcpu@@E@Z				; sre
PUBLIC	?tas@@YAEGPEAUcpu@@E@Z				; tas
PUBLIC	?xaa@@YAEGPEAUcpu@@E@Z				; xaa
PUBLIC	?instrOps@@3PAP6AEGPEAUcpu@@E@ZA		; instrOps
_BSS	SEGMENT
?IOReadFromCpu@@3HA DD 01H DUP (?)			; IOReadFromCpu
?IOWriteFromCpu@@3HA DD 01H DUP (?)			; IOWriteFromCpu
?ScrollAdrsChange@@3HA DD 01H DUP (?)			; ScrollAdrsChange
?VRamAdrsChange@@3HA DD 01H DUP (?)			; VRamAdrsChange
?ResetScrollIOAdrs@@3HA DD 01H DUP (?)			; ResetScrollIOAdrs
?ResetVRamIOAdrs@@3HA DD 01H DUP (?)			; ResetVRamIOAdrs
?DrawScreen@@3HA DD 01H DUP (?)				; DrawScreen
?WinInput@@3Uinput@@A DB 020H DUP (?)			; WinInput
?GlobalMirrorType@@3EA DB 01H DUP (?)			; GlobalMirrorType
	ALIGN	4

?MapperExtWrite@@3HA DD 01H DUP (?)			; MapperExtWrite
?PowerHit@@3HA DD 01H DUP (?)				; PowerHit
?ResetHit@@3HA DD 01H DUP (?)				; ResetHit
	ALIGN	8

?OamData@@3PEAEEA DQ 01H DUP (?)			; OamData
?NmiTriggered@@3HA DD 01H DUP (?)			; NmiTriggered
?IrqTriggered@@3HA DD 01H DUP (?)			; IrqTriggered
?OamDataChange@@3HA DD 01H DUP (?)			; OamDataChange
	ALIGN	8

?GlobalCpuMemoryBase@@3_KA DQ 01H DUP (?)		; GlobalCpuMemoryBase
?GlobalPpuMemoryBase@@3_KA DQ 01H DUP (?)		; GlobalPpuMemoryBase
?LowPatternShiftReg@@3GA DW 01H DUP (?)			; LowPatternShiftReg
	ALIGN	4

?HighPatternShiftReg@@3GA DW 01H DUP (?)		; HighPatternShiftReg
	ALIGN	4

?PaletteLatchOld@@3EA DB 01H DUP (?)			; PaletteLatchOld
	ALIGN	4

?PaletteLatchNew@@3EA DB 01H DUP (?)			; PaletteLatchNew
	ALIGN	4

?NextLowPattern@@3EA DB 01H DUP (?)			; NextLowPattern
	ALIGN	4

?NextHighPattern@@3EA DB 01H DUP (?)			; NextHighPattern
	ALIGN	4

?NextAtrbByte@@3EA DB 01H DUP (?)			; NextAtrbByte
	ALIGN	4

?NextNametableAdrs@@3GA DW 01H DUP (?)			; NextNametableAdrs
_BSS	ENDS
_DATA	SEGMENT
?mapperInit@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA DQ FLAT:?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mapperInit
	DQ	FLAT:?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
	DQ	FLAT:?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
?mapperUpdate@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA DQ FLAT:?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mapperUpdate
	DQ	FLAT:?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
	DQ	FLAT:?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
?instAddressMode@@3PAEA DB 09H				; instAddressMode
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	06H
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	09H
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	09H
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	0dH
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
?instLength@@3PAEA DB 02H				; instLength
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
?instName@@3PAPEADA DQ FLAT:$SG88251			; instName
	DQ	FLAT:$SG88252
	DQ	FLAT:$SG88253
	DQ	FLAT:$SG88254
	DQ	FLAT:$SG88255
	DQ	FLAT:$SG88256
	DQ	FLAT:$SG88257
	DQ	FLAT:$SG88258
	DQ	FLAT:$SG88259
	DQ	FLAT:$SG88260
	DQ	FLAT:$SG88261
	DQ	FLAT:$SG88262
	DQ	FLAT:$SG88263
	DQ	FLAT:$SG88264
	DQ	FLAT:$SG88265
	DQ	FLAT:$SG88266
	DQ	FLAT:$SG88267
	DQ	FLAT:$SG88268
	DQ	FLAT:$SG88269
	DQ	FLAT:$SG88270
	DQ	FLAT:$SG88271
	DQ	FLAT:$SG88272
	DQ	FLAT:$SG88273
	DQ	FLAT:$SG88274
	DQ	FLAT:$SG88275
	DQ	FLAT:$SG88276
	DQ	FLAT:$SG88277
	DQ	FLAT:$SG88278
	DQ	FLAT:$SG88279
	DQ	FLAT:$SG88280
	DQ	FLAT:$SG88281
	DQ	FLAT:$SG88282
	DQ	FLAT:$SG88283
	DQ	FLAT:$SG88284
	DQ	FLAT:$SG88285
	DQ	FLAT:$SG88286
	DQ	FLAT:$SG88287
	DQ	FLAT:$SG88288
	DQ	FLAT:$SG88289
	DQ	FLAT:$SG88290
	DQ	FLAT:$SG88291
	DQ	FLAT:$SG88292
	DQ	FLAT:$SG88293
	DQ	FLAT:$SG88294
	DQ	FLAT:$SG88295
	DQ	FLAT:$SG88296
	DQ	FLAT:$SG88297
	DQ	FLAT:$SG88298
	DQ	FLAT:$SG88299
	DQ	FLAT:$SG88300
	DQ	FLAT:$SG88301
	DQ	FLAT:$SG88302
	DQ	FLAT:$SG88303
	DQ	FLAT:$SG88304
	DQ	FLAT:$SG88305
	DQ	FLAT:$SG88306
	DQ	FLAT:$SG88307
	DQ	FLAT:$SG88308
	DQ	FLAT:$SG88309
	DQ	FLAT:$SG88310
	DQ	FLAT:$SG88311
	DQ	FLAT:$SG88312
	DQ	FLAT:$SG88313
	DQ	FLAT:$SG88314
	DQ	FLAT:$SG88315
	DQ	FLAT:$SG88316
	DQ	FLAT:$SG88317
	DQ	FLAT:$SG88318
	DQ	FLAT:$SG88319
	DQ	FLAT:$SG88320
	DQ	FLAT:$SG88321
	DQ	FLAT:$SG88322
	DQ	FLAT:$SG88323
	DQ	FLAT:$SG88324
	DQ	FLAT:$SG88325
	DQ	FLAT:$SG88326
	DQ	FLAT:$SG88327
	DQ	FLAT:$SG88328
	DQ	FLAT:$SG88329
	DQ	FLAT:$SG88330
	DQ	FLAT:$SG88331
	DQ	FLAT:$SG88332
	DQ	FLAT:$SG88333
	DQ	FLAT:$SG88334
	DQ	FLAT:$SG88335
	DQ	FLAT:$SG88336
	DQ	FLAT:$SG88337
	DQ	FLAT:$SG88338
	DQ	FLAT:$SG88339
	DQ	FLAT:$SG88340
	DQ	FLAT:$SG88341
	DQ	FLAT:$SG88342
	DQ	FLAT:$SG88343
	DQ	FLAT:$SG88344
	DQ	FLAT:$SG88345
	DQ	FLAT:$SG88346
	DQ	FLAT:$SG88347
	DQ	FLAT:$SG88348
	DQ	FLAT:$SG88349
	DQ	FLAT:$SG88350
	DQ	FLAT:$SG88351
	DQ	FLAT:$SG88352
	DQ	FLAT:$SG88353
	DQ	FLAT:$SG88354
	DQ	FLAT:$SG88355
	DQ	FLAT:$SG88356
	DQ	FLAT:$SG88357
	DQ	FLAT:$SG88358
	DQ	FLAT:$SG88359
	DQ	FLAT:$SG88360
	DQ	FLAT:$SG88361
	DQ	FLAT:$SG88362
	DQ	FLAT:$SG88363
	DQ	FLAT:$SG88364
	DQ	FLAT:$SG88365
	DQ	FLAT:$SG88366
	DQ	FLAT:$SG88367
	DQ	FLAT:$SG88368
	DQ	FLAT:$SG88369
	DQ	FLAT:$SG88370
	DQ	FLAT:$SG88371
	DQ	FLAT:$SG88372
	DQ	FLAT:$SG88373
	DQ	FLAT:$SG88374
	DQ	FLAT:$SG88375
	DQ	FLAT:$SG88376
	DQ	FLAT:$SG88377
	DQ	FLAT:$SG88378
	DQ	FLAT:$SG88379
	DQ	FLAT:$SG88380
	DQ	FLAT:$SG88381
	DQ	FLAT:$SG88382
	DQ	FLAT:$SG88383
	DQ	FLAT:$SG88384
	DQ	FLAT:$SG88385
	DQ	FLAT:$SG88386
	DQ	FLAT:$SG88387
	DQ	FLAT:$SG88388
	DQ	FLAT:$SG88389
	DQ	FLAT:$SG88390
	DQ	FLAT:$SG88391
	DQ	FLAT:$SG88392
	DQ	FLAT:$SG88393
	DQ	FLAT:$SG88394
	DQ	FLAT:$SG88395
	DQ	FLAT:$SG88396
	DQ	FLAT:$SG88397
	DQ	FLAT:$SG88398
	DQ	FLAT:$SG88399
	DQ	FLAT:$SG88400
	DQ	FLAT:$SG88401
	DQ	FLAT:$SG88402
	DQ	FLAT:$SG88403
	DQ	FLAT:$SG88404
	DQ	FLAT:$SG88405
	DQ	FLAT:$SG88406
	DQ	FLAT:$SG88407
	DQ	FLAT:$SG88408
	DQ	FLAT:$SG88409
	DQ	FLAT:$SG88410
	DQ	FLAT:$SG88411
	DQ	FLAT:$SG88412
	DQ	FLAT:$SG88413
	DQ	FLAT:$SG88414
	DQ	FLAT:$SG88415
	DQ	FLAT:$SG88416
	DQ	FLAT:$SG88417
	DQ	FLAT:$SG88418
	DQ	FLAT:$SG88419
	DQ	FLAT:$SG88420
	DQ	FLAT:$SG88421
	DQ	FLAT:$SG88422
	DQ	FLAT:$SG88423
	DQ	FLAT:$SG88424
	DQ	FLAT:$SG88425
	DQ	FLAT:$SG88426
	DQ	FLAT:$SG88427
	DQ	FLAT:$SG88428
	DQ	FLAT:$SG88429
	DQ	FLAT:$SG88430
	DQ	FLAT:$SG88431
	DQ	FLAT:$SG88432
	DQ	FLAT:$SG88433
	DQ	FLAT:$SG88434
	DQ	FLAT:$SG88435
	DQ	FLAT:$SG88436
	DQ	FLAT:$SG88437
	DQ	FLAT:$SG88438
	DQ	FLAT:$SG88439
	DQ	FLAT:$SG88440
	DQ	FLAT:$SG88441
	DQ	FLAT:$SG88442
	DQ	FLAT:$SG88443
	DQ	FLAT:$SG88444
	DQ	FLAT:$SG88445
	DQ	FLAT:$SG88446
	DQ	FLAT:$SG88447
	DQ	FLAT:$SG88448
	DQ	FLAT:$SG88449
	DQ	FLAT:$SG88450
	DQ	FLAT:$SG88451
	DQ	FLAT:$SG88452
	DQ	FLAT:$SG88453
	DQ	FLAT:$SG88454
	DQ	FLAT:$SG88455
	DQ	FLAT:$SG88456
	DQ	FLAT:$SG88457
	DQ	FLAT:$SG88458
	DQ	FLAT:$SG88459
	DQ	FLAT:$SG88460
	DQ	FLAT:$SG88461
	DQ	FLAT:$SG88462
	DQ	FLAT:$SG88463
	DQ	FLAT:$SG88464
	DQ	FLAT:$SG88465
	DQ	FLAT:$SG88466
	DQ	FLAT:$SG88467
	DQ	FLAT:$SG88468
	DQ	FLAT:$SG88469
	DQ	FLAT:$SG88470
	DQ	FLAT:$SG88471
	DQ	FLAT:$SG88472
	DQ	FLAT:$SG88473
	DQ	FLAT:$SG88474
	DQ	FLAT:$SG88475
	DQ	FLAT:$SG88476
	DQ	FLAT:$SG88477
	DQ	FLAT:$SG88478
	DQ	FLAT:$SG88479
	DQ	FLAT:$SG88480
	DQ	FLAT:$SG88481
	DQ	FLAT:$SG88482
	DQ	FLAT:$SG88483
	DQ	FLAT:$SG88484
	DQ	FLAT:$SG88485
	DQ	FLAT:$SG88486
	DQ	FLAT:$SG88487
	DQ	FLAT:$SG88488
	DQ	FLAT:$SG88489
	DQ	FLAT:$SG88490
	DQ	FLAT:$SG88491
	DQ	FLAT:$SG88492
	DQ	FLAT:$SG88493
	DQ	FLAT:$SG88494
	DQ	FLAT:$SG88495
	DQ	FLAT:$SG88496
	DQ	FLAT:$SG88497
	DQ	FLAT:$SG88498
	DQ	FLAT:$SG88499
	DQ	FLAT:$SG88500
	DQ	FLAT:$SG88501
	DQ	FLAT:$SG88502
	DQ	FLAT:$SG88503
	DQ	FLAT:$SG88504
	DQ	FLAT:$SG88505
	DQ	FLAT:$SG88506
?instCycles@@3PAEA DB 07H				; instCycles
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	06H
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	06H
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	06H
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	05H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	02H
	DB	06H
	DB	02H
	DB	06H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	06H
	DB	00H
	DB	06H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	05H
	DB	02H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	02H
	DB	06H
	DB	02H
	DB	06H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	05H
	DB	00H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	04H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	06H
	DB	02H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	02H
	DB	06H
	DB	02H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
?instBoundaryCheck@@3PAEA DB 00H			; instBoundaryCheck
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
?PowerOn@@3HA DD 01H					; PowerOn
	ORG $+12
?Palette@@3PAY02EA DB 075H				; Palette
	DB	075H
	DB	075H
	DB	027H
	DB	01bH
	DB	08fH
	DB	00H
	DB	00H
	DB	0abH
	DB	047H
	DB	00H
	DB	09fH
	DB	08fH
	DB	00H
	DB	077H
	DB	0abH
	DB	00H
	DB	013H
	DB	0a7H
	DB	00H
	DB	00H
	DB	07fH
	DB	0bH
	DB	00H
	DB	043H
	DB	02fH
	DB	00H
	DB	00H
	DB	047H
	DB	00H
	DB	00H
	DB	051H
	DB	00H
	DB	00H
	DB	03fH
	DB	017H
	DB	01bH
	DB	03fH
	DB	05fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0bcH
	DB	0bcH
	DB	0bcH
	DB	00H
	DB	073H
	DB	0efH
	DB	023H
	DB	03bH
	DB	0efH
	DB	083H
	DB	00H
	DB	0f3H
	DB	0bfH
	DB	00H
	DB	0bfH
	DB	0e7H
	DB	00H
	DB	05bH
	DB	0dbH
	DB	02bH
	DB	00H
	DB	0cbH
	DB	04fH
	DB	0fH
	DB	08bH
	DB	073H
	DB	00H
	DB	00H
	DB	097H
	DB	00H
	DB	00H
	DB	0abH
	DB	00H
	DB	00H
	DB	093H
	DB	03bH
	DB	00H
	DB	083H
	DB	08bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	03fH
	DB	0bfH
	DB	0ffH
	DB	05fH
	DB	097H
	DB	0ffH
	DB	0a7H
	DB	08bH
	DB	0fdH
	DB	0f7H
	DB	07bH
	DB	0ffH
	DB	0ffH
	DB	077H
	DB	0b7H
	DB	0ffH
	DB	077H
	DB	063H
	DB	0ffH
	DB	09bH
	DB	03bH
	DB	0f3H
	DB	0bfH
	DB	03fH
	DB	083H
	DB	0d3H
	DB	013H
	DB	04fH
	DB	0dfH
	DB	04bH
	DB	058H
	DB	0f8H
	DB	098H
	DB	00H
	DB	0ebH
	DB	0dbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0abH
	DB	0e7H
	DB	0ffH
	DB	0c7H
	DB	0d7H
	DB	0ffH
	DB	0d7H
	DB	0cbH
	DB	0ffH
	DB	0ffH
	DB	0c7H
	DB	0ffH
	DB	0ffH
	DB	0c7H
	DB	0dbH
	DB	0ffH
	DB	0bfH
	DB	0b3H
	DB	0ffH
	DB	0dbH
	DB	0abH
	DB	0ffH
	DB	0e7H
	DB	0a3H
	DB	0e3H
	DB	0ffH
	DB	0a3H
	DB	0abH
	DB	0f3H
	DB	0bfH
	DB	0b3H
	DB	0ffH
	DB	0cfH
	DB	09fH
	DB	0ffH
	DB	0f3H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?instrOps@@3PAP6AEGPEAUcpu@@E@ZA DQ FLAT:?brk@@YAEGPEAUcpu@@E@Z ; instrOps
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?php@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?anc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bpl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?clc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?jsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bit@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?plp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?anc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bit@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bmi@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rti@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?pha@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?alr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?jmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bvc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cli@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rts@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?pla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?arr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?jmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bvs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sei@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sty@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?stx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dey@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?txa@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?xaa@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sty@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?stx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bcc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ahx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sty@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?stx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tya@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?txs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tas@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?shy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?shx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ahx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tay@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bcs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?clv@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tsx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?las@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?iny@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dex@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?axs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bne@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cld@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?beq@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sed@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
_DATA	ENDS
CONST	SEGMENT
$SG89088 DB	'IRQ', 00H
$SG88251 DB	'BRK', 00H
$SG88252 DB	'ORA', 00H
$SG88253 DB	'KIL', 00H
$SG88254 DB	'SLO', 00H
$SG88255 DB	'NOP', 00H
$SG88256 DB	'ORA', 00H
$SG88257 DB	'ASL', 00H
$SG88258 DB	'SLO', 00H
$SG88259 DB	'PHP', 00H
$SG88260 DB	'ORA', 00H
$SG88261 DB	'ASL', 00H
$SG88262 DB	'ANC', 00H
$SG88263 DB	'NOP', 00H
$SG88264 DB	'ORA', 00H
$SG88265 DB	'ASL', 00H
$SG88266 DB	'SLO', 00H
$SG88267 DB	'BPL', 00H
$SG88268 DB	'ORA', 00H
$SG88269 DB	'KIL', 00H
$SG88270 DB	'SLO', 00H
$SG88271 DB	'NOP', 00H
$SG88272 DB	'ORA', 00H
$SG88273 DB	'ASL', 00H
$SG88274 DB	'SLO', 00H
$SG88275 DB	'CLC', 00H
$SG88276 DB	'ORA', 00H
$SG88277 DB	'NOP', 00H
$SG88278 DB	'SLO', 00H
$SG88279 DB	'NOP', 00H
$SG88280 DB	'ORA', 00H
$SG88281 DB	'ASL', 00H
$SG88282 DB	'SLO', 00H
$SG88283 DB	'JSR', 00H
$SG88284 DB	'AND', 00H
$SG88285 DB	'KIL', 00H
$SG88286 DB	'RLA', 00H
$SG88287 DB	'BIT', 00H
$SG88288 DB	'AND', 00H
$SG88289 DB	'ROL', 00H
$SG88290 DB	'RLA', 00H
$SG88291 DB	'PLP', 00H
$SG88292 DB	'AND', 00H
$SG88293 DB	'ROL', 00H
$SG88294 DB	'ANC', 00H
$SG88295 DB	'BIT', 00H
$SG88296 DB	'AND', 00H
$SG88297 DB	'ROL', 00H
$SG88298 DB	'RLA', 00H
$SG88299 DB	'BMI', 00H
$SG88300 DB	'AND', 00H
$SG88301 DB	'KIL', 00H
$SG88302 DB	'RLA', 00H
$SG88303 DB	'NOP', 00H
$SG88304 DB	'AND', 00H
$SG88305 DB	'ROL', 00H
$SG88306 DB	'RLA', 00H
$SG88307 DB	'SEC', 00H
$SG88308 DB	'AND', 00H
$SG88309 DB	'NOP', 00H
$SG88310 DB	'RLA', 00H
$SG88311 DB	'NOP', 00H
$SG88312 DB	'AND', 00H
$SG88313 DB	'ROL', 00H
$SG88314 DB	'RLA', 00H
$SG88315 DB	'RTI', 00H
$SG88316 DB	'EOR', 00H
$SG88317 DB	'KIL', 00H
$SG88318 DB	'SRE', 00H
$SG88319 DB	'NOP', 00H
$SG88320 DB	'EOR', 00H
$SG88321 DB	'LSR', 00H
$SG88322 DB	'SRE', 00H
$SG88323 DB	'PHA', 00H
$SG88324 DB	'EOR', 00H
$SG88325 DB	'LSR', 00H
$SG88326 DB	'ALR', 00H
$SG88327 DB	'JMP', 00H
$SG88328 DB	'EOR', 00H
$SG88329 DB	'LSR', 00H
$SG88330 DB	'SRE', 00H
$SG88331 DB	'BVC', 00H
$SG88332 DB	'EOR', 00H
$SG88333 DB	'KIL', 00H
$SG88334 DB	'SRE', 00H
$SG88335 DB	'NOP', 00H
$SG88336 DB	'EOR', 00H
$SG88337 DB	'LSR', 00H
$SG88338 DB	'SRE', 00H
$SG88339 DB	'CLI', 00H
$SG88340 DB	'EOR', 00H
$SG88341 DB	'NOP', 00H
$SG88342 DB	'SRE', 00H
$SG88343 DB	'NOP', 00H
$SG88344 DB	'EOR', 00H
$SG88345 DB	'LSR', 00H
$SG88346 DB	'SRE', 00H
$SG88347 DB	'RTS', 00H
$SG88348 DB	'ADC', 00H
$SG88349 DB	'KIL', 00H
$SG88350 DB	'RRA', 00H
$SG88351 DB	'NOP', 00H
$SG88352 DB	'ADC', 00H
$SG88353 DB	'ROR', 00H
$SG88354 DB	'RRA', 00H
$SG88355 DB	'PLA', 00H
$SG89380 DB	'NesEmu', 00H
	ORG $+1
$SG88356 DB	'ADC', 00H
$SG88357 DB	'ROR', 00H
$SG88358 DB	'ARR', 00H
$SG89383 DB	'NesEmu', 00H
	ORG $+1
$SG88359 DB	'JMP', 00H
$SG88360 DB	'ADC', 00H
$SG88361 DB	'ROR', 00H
$SG89386 DB	'&Open Rom', 00H
	ORG $+2
$SG88362 DB	'RRA', 00H
$SG89387 DB	'&Close Rom', 00H
	ORG $+1
$SG88363 DB	'BVS', 00H
$SG89388 DB	'&Quit', 00H
	ORG $+2
$SG88364 DB	'ADC', 00H
$SG89389 DB	'&File', 00H
	ORG $+2
$SG88365 DB	'KIL', 00H
$SG89390 DB	'Mario Bros.nes', 00H
	ORG $+1
$SG88366 DB	'RRA', 00H
$SG88367 DB	'NOP', 00H
$SG88368 DB	'ADC', 00H
$SG88369 DB	'ROR', 00H
$SG88370 DB	'RRA', 00H
$SG88371 DB	'SEI', 00H
$SG88372 DB	'ADC', 00H
$SG88373 DB	'NOP', 00H
$SG88374 DB	'RRA', 00H
$SG88375 DB	'NOP', 00H
$SG88376 DB	'ADC', 00H
$SG88377 DB	'ROR', 00H
$SG88378 DB	'RRA', 00H
$SG88379 DB	'NOP', 00H
$SG88380 DB	'STA', 00H
$SG88381 DB	'NOP', 00H
$SG88382 DB	'SAX', 00H
$SG88383 DB	'STY', 00H
$SG88384 DB	'STA', 00H
$SG88385 DB	'STX', 00H
$SG88386 DB	'SAX', 00H
$SG88387 DB	'DEY', 00H
$SG88388 DB	'NOP', 00H
$SG88389 DB	'TXA', 00H
$SG88390 DB	'XAA', 00H
$SG88391 DB	'STY', 00H
$SG88392 DB	'STA', 00H
$SG88393 DB	'STX', 00H
$SG88394 DB	'SAX', 00H
$SG88395 DB	'BCC', 00H
$SG88396 DB	'STA', 00H
$SG88397 DB	'KIL', 00H
$SG88398 DB	'AHX', 00H
$SG88399 DB	'STY', 00H
$SG88400 DB	'STA', 00H
$SG88401 DB	'STX', 00H
$SG88402 DB	'SAX', 00H
$SG88403 DB	'TYA', 00H
$SG88404 DB	'STA', 00H
$SG88405 DB	'TXS', 00H
$SG88406 DB	'TAS', 00H
$SG88407 DB	'SHY', 00H
$SG88408 DB	'STA', 00H
$SG88409 DB	'SHX', 00H
$SG88410 DB	'AHX', 00H
$SG88411 DB	'LDY', 00H
$SG88412 DB	'LDA', 00H
$SG88413 DB	'LDX', 00H
$SG88414 DB	'LAX', 00H
$SG88415 DB	'LDY', 00H
$SG88416 DB	'LDA', 00H
$SG88417 DB	'LDX', 00H
$SG88418 DB	'LAX', 00H
$SG88419 DB	'TAY', 00H
$SG88420 DB	'LDA', 00H
$SG88421 DB	'TAX', 00H
$SG88422 DB	'LAX', 00H
$SG88423 DB	'LDY', 00H
$SG88424 DB	'LDA', 00H
$SG88425 DB	'LDX', 00H
$SG88426 DB	'LAX', 00H
$SG88427 DB	'BCS', 00H
$SG88428 DB	'LDA', 00H
$SG88429 DB	'KIL', 00H
$SG88430 DB	'LAX', 00H
$SG88431 DB	'LDY', 00H
$SG88432 DB	'LDA', 00H
$SG88433 DB	'LDX', 00H
$SG88434 DB	'LAX', 00H
$SG88435 DB	'CLV', 00H
$SG88436 DB	'LDA', 00H
$SG88437 DB	'TSX', 00H
$SG88438 DB	'LAS', 00H
$SG88439 DB	'LDY', 00H
$SG88440 DB	'LDA', 00H
$SG88441 DB	'LDX', 00H
$SG88442 DB	'LAX', 00H
$SG88443 DB	'CPY', 00H
$SG88444 DB	'CMP', 00H
$SG88445 DB	'NOP', 00H
$SG88446 DB	'DCP', 00H
$SG88447 DB	'CPY', 00H
$SG88448 DB	'CMP', 00H
$SG88449 DB	'DEC', 00H
$SG88450 DB	'DCP', 00H
$SG88451 DB	'INY', 00H
$SG88452 DB	'CMP', 00H
$SG88453 DB	'DEX', 00H
$SG88454 DB	'AXS', 00H
$SG88455 DB	'CPY', 00H
$SG88456 DB	'CMP', 00H
$SG88457 DB	'DEC', 00H
$SG88458 DB	'DCP', 00H
$SG88459 DB	'BNE', 00H
$SG88460 DB	'CMP', 00H
$SG88461 DB	'KIL', 00H
$SG88462 DB	'DCP', 00H
$SG88463 DB	'NOP', 00H
$SG88464 DB	'CMP', 00H
$SG88465 DB	'DEC', 00H
$SG88466 DB	'DCP', 00H
$SG88467 DB	'CLD', 00H
$SG88468 DB	'CMP', 00H
$SG88469 DB	'NOP', 00H
$SG88470 DB	'DCP', 00H
$SG88471 DB	'NOP', 00H
$SG88472 DB	'CMP', 00H
$SG88473 DB	'DEC', 00H
$SG88474 DB	'DCP', 00H
$SG88475 DB	'CPX', 00H
$SG88476 DB	'SBC', 00H
$SG88477 DB	'NOP', 00H
$SG88478 DB	'ISC', 00H
$SG88479 DB	'CPX', 00H
$SG88480 DB	'SBC', 00H
$SG88481 DB	'INC', 00H
$SG88482 DB	'ISC', 00H
$SG88483 DB	'INX', 00H
$SG88484 DB	'SBC', 00H
$SG88485 DB	'NOP', 00H
$SG88486 DB	'SBC', 00H
$SG88487 DB	'CPX', 00H
$SG88488 DB	'SBC', 00H
$SG88489 DB	'INC', 00H
$SG88490 DB	'ISC', 00H
$SG88491 DB	'BEQ', 00H
$SG88492 DB	'SBC', 00H
$SG88493 DB	'KIL', 00H
$SG88494 DB	'ISC', 00H
$SG88495 DB	'NOP', 00H
$SG88496 DB	'SBC', 00H
$SG88497 DB	'INC', 00H
$SG88498 DB	'ISC', 00H
$SG88499 DB	'SED', 00H
$SG88500 DB	'SBC', 00H
$SG88501 DB	'NOP', 00H
$SG88502 DB	'ISC', 00H
$SG88503 DB	'NOP', 00H
$SG88504 DB	'SBC', 00H
$SG88505 DB	'INC', 00H
$SG88506 DB	'ISC', 00H
$SG89085 DB	'NMI', 00H
$SG87676 DB	'.nes', 00H, '*.nes', 00H, 00H
CONST	ENDS
PUBLIC	WinMain
PUBLIC	?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z	; WinInputCallback
PUBLIC	?getPaletteValue@@YAXEPEAE@Z			; getPaletteValue
PUBLIC	?drawPixel@@YAXPEAUppu@@GGPEAE@Z		; drawPixel
PUBLIC	?resetScrollHorz@@YAXPEAUvram_io@@@Z		; resetScrollHorz
PUBLIC	?resetScrollVert@@YAXPEAUvram_io@@@Z		; resetScrollVert
PUBLIC	?scrollIncHorz@@YAXPEAUvram_io@@@Z		; scrollIncHorz
PUBLIC	?scrollIncVert@@YAXPEAUvram_io@@@Z		; scrollIncVert
PUBLIC	?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z	; ppuTick
PUBLIC	?setCarry@@YAXPEAE@Z				; setCarry
PUBLIC	?clearCarry@@YAXPEAE@Z				; clearCarry
PUBLIC	?setInterrupt@@YAXPEAE@Z			; setInterrupt
PUBLIC	?clearInterrupt@@YAXPEAE@Z			; clearInterrupt
PUBLIC	?setDecimal@@YAXPEAE@Z				; setDecimal
PUBLIC	?clearDecimal@@YAXPEAE@Z			; clearDecimal
PUBLIC	?setBreak@@YAXPEAE@Z				; setBreak
PUBLIC	?clearBreak@@YAXPEAE@Z				; clearBreak
PUBLIC	?setBlank@@YAXPEAE@Z				; setBlank
PUBLIC	?setOverflow@@YAXPEAE@Z				; setOverflow
PUBLIC	?clearOverflow@@YAXPEAE@Z			; clearOverflow
PUBLIC	?setZero@@YAXEPEAE@Z				; setZero
PUBLIC	?setNegative@@YAXEPEAE@Z			; setNegative
PUBLIC	?isBitSet@@YAHEE@Z				; isBitSet
PUBLIC	?crossedPageCheck@@YAHGG@Z			; crossedPageCheck
PUBLIC	__real@408f400000000000
PUBLIC	__real@447a0000
PUBLIC	__real@49da7a66
PUBLIC	__real@5f800000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSizeEx:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_SetMenu:PROC
EXTRN	__imp_CreateMenu:PROC
EXTRN	__imp_CreatePopupMenu:PROC
EXTRN	__imp_AppendMenuA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_GetOpenFileNameA:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
	ALIGN	4

?GlobalRunning@@3HA DD 01H DUP (?)			; GlobalRunning
?RomFileName@@3PADA DB 0100H DUP (?)			; RomFileName
_BSS	ENDS
;	COMDAT ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
_BSS	SEGMENT
?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA DB 01H DUP (?) ; `mmc1Update'::`2'::PrgRomMode
_BSS	ENDS
;	COMDAT ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
_BSS	SEGMENT
?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA DB 01H DUP (?) ; `mmc1Update'::`2'::ChrRomMode
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN21
	DD	imagerel $LN21+1667
	DD	imagerel $unwind$WinMain
$pdata$?getMilliSeconds@@YAM_K@Z DD imagerel ?getMilliSeconds@@YAM_K@Z
	DD	imagerel ?getMilliSeconds@@YAM_K@Z+112
	DD	imagerel $unwind$?getMilliSeconds@@YAM_K@Z
$pdata$?cpyMemory@@YAXPEAE0G@Z DD imagerel ?cpyMemory@@YAXPEAE0G@Z
	DD	imagerel ?cpyMemory@@YAXPEAE0G@Z+85
	DD	imagerel $unwind$?cpyMemory@@YAXPEAE0G@Z
$pdata$?write8@@YAXEG_K@Z DD imagerel ?write8@@YAXEG_K@Z
	DD	imagerel ?write8@@YAXEG_K@Z+48
	DD	imagerel $unwind$?write8@@YAXEG_K@Z
$pdata$?read8@@YAEG_K@Z DD imagerel ?read8@@YAEG_K@Z
	DD	imagerel ?read8@@YAEG_K@Z+49
	DD	imagerel $unwind$?read8@@YAEG_K@Z
$pdata$?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN60
	DD	imagerel $LN60+1495
	DD	imagerel $unwind$?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?LoadFile@@YAPEAXPEADPEAI@Z DD imagerel ?LoadFile@@YAPEAXPEADPEAI@Z
	DD	imagerel ?LoadFile@@YAPEAXPEADPEAI@Z+239
	DD	imagerel $unwind$?LoadFile@@YAPEAXPEADPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?drawPixel@@YAXPEAUppu@@GGPEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$?drawPixel@@YAXPEAUppu@@GGPEAE@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?ppuMemoryMirror@@YAGG@Z DD imagerel ?ppuMemoryMirror@@YAGG@Z
	DD	imagerel ?ppuMemoryMirror@@YAGG@Z+728
	DD	imagerel $unwind$?ppuMemoryMirror@@YAGG@Z
$pdata$?readPpu8@@YAEGPEAUppu@@@Z DD imagerel ?readPpu8@@YAEGPEAUppu@@@Z
	DD	imagerel ?readPpu8@@YAEGPEAUppu@@@Z+61
	DD	imagerel $unwind$?readPpu8@@YAEGPEAUppu@@@Z
$pdata$?writePpu8@@YAXEGPEAUppu@@@Z DD imagerel ?writePpu8@@YAXEGPEAUppu@@@Z
	DD	imagerel ?writePpu8@@YAXEGPEAUppu@@@Z+61
	DD	imagerel $unwind$?writePpu8@@YAXEGPEAUppu@@@Z
$pdata$?loadFutureData@@YAXPEAUppu@@@Z DD imagerel ?loadFutureData@@YAXPEAUppu@@@Z
	DD	imagerel ?loadFutureData@@YAXPEAUppu@@@Z+523
	DD	imagerel $unwind$?loadFutureData@@YAXPEAUppu@@@Z
$pdata$?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z DD imagerel ?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z
	DD	imagerel ?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z+68
	DD	imagerel $unwind$?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z
$pdata$?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z DD imagerel ?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z
	DD	imagerel ?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z+202
	DD	imagerel $unwind$?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z
$pdata$?scrollIncVert@@YAXPEAUvram_io@@@Z DD imagerel $LN9
	DD	imagerel $LN9+195
	DD	imagerel $unwind$?scrollIncVert@@YAXPEAUvram_io@@@Z
$pdata$?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z DD imagerel $LN101
	DD	imagerel $LN101+4196
	DD	imagerel $unwind$?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z
$pdata$?readCpu8@@YAEGPEAUcpu@@@Z DD imagerel ?readCpu8@@YAEGPEAUcpu@@@Z
	DD	imagerel ?readCpu8@@YAEGPEAUcpu@@@Z+440
	DD	imagerel $unwind$?readCpu8@@YAEGPEAUcpu@@@Z
$pdata$?writeCpu8@@YAXEGPEAUcpu@@@Z DD imagerel ?writeCpu8@@YAXEGPEAUcpu@@@Z
	DD	imagerel ?writeCpu8@@YAXEGPEAUcpu@@@Z+702
	DD	imagerel $unwind$?writeCpu8@@YAXEGPEAUcpu@@@Z
$pdata$?readCpu16@@YAGGPEAUcpu@@@Z DD imagerel ?readCpu16@@YAGGPEAUcpu@@@Z
	DD	imagerel ?readCpu16@@YAGGPEAUcpu@@@Z+87
	DD	imagerel $unwind$?readCpu16@@YAGGPEAUcpu@@@Z
$pdata$?bugReadCpu16@@YAGGPEAUcpu@@@Z DD imagerel ?bugReadCpu16@@YAGGPEAUcpu@@@Z
	DD	imagerel ?bugReadCpu16@@YAGGPEAUcpu@@@Z+109
	DD	imagerel $unwind$?bugReadCpu16@@YAGGPEAUcpu@@@Z
$pdata$?push@@YAXEPEAUcpu@@@Z DD imagerel ?push@@YAXEPEAUcpu@@@Z
	DD	imagerel ?push@@YAXEPEAUcpu@@@Z+68
	DD	imagerel $unwind$?push@@YAXEPEAUcpu@@@Z
$pdata$?pop@@YAEPEAUcpu@@@Z DD imagerel ?pop@@YAEPEAUcpu@@@Z
	DD	imagerel ?pop@@YAEPEAUcpu@@@Z+68
	DD	imagerel $unwind$?pop@@YAEPEAUcpu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crossedPageCheck@@YAHGG@Z DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$?crossedPageCheck@@YAHGG@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?adc@@YAEGPEAUcpu@@E@Z DD imagerel $LN7
	DD	imagerel $LN7+281
	DD	imagerel $unwind$?adc@@YAEGPEAUcpu@@E@Z
$pdata$?AND@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?AND@@YAEGPEAUcpu@@E@Z
$pdata$?asl@@YAEGPEAUcpu@@E@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$?asl@@YAEGPEAUcpu@@E@Z
$pdata$?bcc@@YAEGPEAUcpu@@E@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$?bcc@@YAEGPEAUcpu@@E@Z
$pdata$?bcs@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bcs@@YAEGPEAUcpu@@E@Z
$pdata$?beq@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?beq@@YAEGPEAUcpu@@E@Z
$pdata$?bit@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$?bit@@YAEGPEAUcpu@@E@Z
$pdata$?bmi@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bmi@@YAEGPEAUcpu@@E@Z
$pdata$?bne@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bne@@YAEGPEAUcpu@@E@Z
$pdata$?bpl@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bpl@@YAEGPEAUcpu@@E@Z
$pdata$?brk@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+178
	DD	imagerel $unwind$?brk@@YAEGPEAUcpu@@E@Z
$pdata$?bvc@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bvc@@YAEGPEAUcpu@@E@Z
$pdata$?bvs@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bvs@@YAEGPEAUcpu@@E@Z
$pdata$?clc@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?clc@@YAEGPEAUcpu@@E@Z
$pdata$?cld@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?cld@@YAEGPEAUcpu@@E@Z
$pdata$?cli@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?cli@@YAEGPEAUcpu@@E@Z
$pdata$?clv@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?clv@@YAEGPEAUcpu@@E@Z
$pdata$?cmp@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$?cmp@@YAEGPEAUcpu@@E@Z
$pdata$?cpx@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+163
	DD	imagerel $unwind$?cpx@@YAEGPEAUcpu@@E@Z
$pdata$?cpy@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+163
	DD	imagerel $unwind$?cpy@@YAEGPEAUcpu@@E@Z
$pdata$?dec@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?dec@@YAEGPEAUcpu@@E@Z
$pdata$?dex@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?dex@@YAEGPEAUcpu@@E@Z
$pdata$?dey@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?dey@@YAEGPEAUcpu@@E@Z
$pdata$?eor@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?eor@@YAEGPEAUcpu@@E@Z
$pdata$?inc@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?inc@@YAEGPEAUcpu@@E@Z
$pdata$?inx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?inx@@YAEGPEAUcpu@@E@Z
$pdata$?iny@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?iny@@YAEGPEAUcpu@@E@Z
$pdata$?jsr@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$?jsr@@YAEGPEAUcpu@@E@Z
$pdata$?lda@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$?lda@@YAEGPEAUcpu@@E@Z
$pdata$?ldx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?ldx@@YAEGPEAUcpu@@E@Z
$pdata$?ldy@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?ldy@@YAEGPEAUcpu@@E@Z
$pdata$?lsr@@YAEGPEAUcpu@@E@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$?lsr@@YAEGPEAUcpu@@E@Z
$pdata$?ora@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?ora@@YAEGPEAUcpu@@E@Z
$pdata$?pha@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?pha@@YAEGPEAUcpu@@E@Z
$pdata$?php@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?php@@YAEGPEAUcpu@@E@Z
$pdata$?pla@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?pla@@YAEGPEAUcpu@@E@Z
$pdata$?plp@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?plp@@YAEGPEAUcpu@@E@Z
$pdata$?rol@@YAEGPEAUcpu@@E@Z DD imagerel $LN11
	DD	imagerel $LN11+328
	DD	imagerel $unwind$?rol@@YAEGPEAUcpu@@E@Z
$pdata$?ror@@YAEGPEAUcpu@@E@Z DD imagerel $LN11
	DD	imagerel $LN11+326
	DD	imagerel $unwind$?ror@@YAEGPEAUcpu@@E@Z
$pdata$?rti@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?rti@@YAEGPEAUcpu@@E@Z
$pdata$?rts@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?rts@@YAEGPEAUcpu@@E@Z
$pdata$?sbc@@YAEGPEAUcpu@@E@Z DD imagerel $LN7
	DD	imagerel $LN7+286
	DD	imagerel $unwind$?sbc@@YAEGPEAUcpu@@E@Z
$pdata$?sec@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?sec@@YAEGPEAUcpu@@E@Z
$pdata$?sed@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?sed@@YAEGPEAUcpu@@E@Z
$pdata$?sei@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?sei@@YAEGPEAUcpu@@E@Z
$pdata$?sta@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?sta@@YAEGPEAUcpu@@E@Z
$pdata$?stx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?stx@@YAEGPEAUcpu@@E@Z
$pdata$?sty@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?sty@@YAEGPEAUcpu@@E@Z
$pdata$?tax@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?tax@@YAEGPEAUcpu@@E@Z
$pdata$?tay@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?tay@@YAEGPEAUcpu@@E@Z
$pdata$?tsx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?tsx@@YAEGPEAUcpu@@E@Z
$pdata$?txa@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?txa@@YAEGPEAUcpu@@E@Z
$pdata$?tya@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?tya@@YAEGPEAUcpu@@E@Z
$pdata$?alr@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?alr@@YAEGPEAUcpu@@E@Z
$pdata$?anc@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?anc@@YAEGPEAUcpu@@E@Z
$pdata$?arr@@YAEGPEAUcpu@@E@Z DD imagerel $LN9
	DD	imagerel $LN9+262
	DD	imagerel $unwind$?arr@@YAEGPEAUcpu@@E@Z
$pdata$?axs@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$?axs@@YAEGPEAUcpu@@E@Z
$pdata$?dcp@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?dcp@@YAEGPEAUcpu@@E@Z
$pdata$?isc@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?isc@@YAEGPEAUcpu@@E@Z
$pdata$?lax@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?lax@@YAEGPEAUcpu@@E@Z
$pdata$?rla@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?rla@@YAEGPEAUcpu@@E@Z
$pdata$?rra@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?rra@@YAEGPEAUcpu@@E@Z
$pdata$?sax@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?sax@@YAEGPEAUcpu@@E@Z
$pdata$?shy@@YAEGPEAUcpu@@E@Z DD imagerel $LN4
	DD	imagerel $LN4+127
	DD	imagerel $unwind$?shy@@YAEGPEAUcpu@@E@Z
$pdata$?slo@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?slo@@YAEGPEAUcpu@@E@Z
$pdata$?sre@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?sre@@YAEGPEAUcpu@@E@Z
$pdata$?nmi_irq@@YAEGPEAUcpu@@E@Z DD imagerel ?nmi_irq@@YAEGPEAUcpu@@E@Z
	DD	imagerel ?nmi_irq@@YAEGPEAUcpu@@E@Z+211
	DD	imagerel $unwind$?nmi_irq@@YAEGPEAUcpu@@E@Z
$pdata$?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z DD imagerel ?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z
	DD	imagerel ?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z+1552
	DD	imagerel $unwind$?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z
$pdata$?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z DD imagerel ?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z
	DD	imagerel ?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z+108
	DD	imagerel $unwind$?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z
$pdata$?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z DD imagerel ?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z
	DD	imagerel ?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z+262
	DD	imagerel $unwind$?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z
$pdata$?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z DD imagerel ?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z
	DD	imagerel ?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z+165
	DD	imagerel $unwind$?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z
$pdata$?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN7
	DD	imagerel $LN7+241
	DD	imagerel $unwind$?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN37
	DD	imagerel $LN37+1147
	DD	imagerel $unwind$?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?loadCartridge@@YAXPEAUnes@@PEAD@Z DD imagerel ?loadCartridge@@YAXPEAUnes@@PEAD@Z
	DD	imagerel ?loadCartridge@@YAXPEAUnes@@PEAD@Z+661
	DD	imagerel $unwind$?loadCartridge@@YAXPEAUnes@@PEAD@Z
$pdata$?power@@YAXPEAUnes@@@Z DD imagerel ?power@@YAXPEAUnes@@@Z
	DD	imagerel ?power@@YAXPEAUnes@@@Z+436
	DD	imagerel $unwind$?power@@YAXPEAUnes@@@Z
$pdata$?reset@@YAXPEAUnes@@@Z DD imagerel ?reset@@YAXPEAUnes@@@Z
	DD	imagerel ?reset@@YAXPEAUnes@@@Z+174
	DD	imagerel $unwind$?reset@@YAXPEAUnes@@@Z
pdata	ENDS
;	COMDAT __real@5f800000
CONST	SEGMENT
__real@5f800000 DD 05f800000r			; 1.84467e+19
CONST	ENDS
;	COMDAT __real@49da7a66
CONST	SEGMENT
__real@49da7a66 DD 049da7a66r			; 1.78977e+06
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crossedPageCheck@@YAHGG@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?drawPixel@@YAXPEAUppu@@GGPEAE@Z DD 011901H
	DD	02219H
xdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	084011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0410H
$unwind$?getMilliSeconds@@YAM_K@Z DD 010901H
	DD	08209H
$unwind$?cpyMemory@@YAXPEAE0G@Z DD 011401H
	DD	02214H
$unwind$?write8@@YAXEG_K@Z DD 011201H
	DD	02212H
$unwind$?read8@@YAEG_K@Z DD 010e01H
	DD	0220eH
$unwind$?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 032d19H
	DD	046011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$?LoadFile@@YAPEAXPEADPEAI@Z DD 010e01H
	DD	0c20eH
$unwind$?ppuMemoryMirror@@YAGG@Z DD 010901H
	DD	06209H
$unwind$?readPpu8@@YAEGPEAUppu@@@Z DD 010e01H
	DD	0620eH
$unwind$?writePpu8@@YAXEGPEAUppu@@@Z DD 011201H
	DD	04212H
$unwind$?loadFutureData@@YAXPEAUppu@@@Z DD 010901H
	DD	08209H
$unwind$?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z DD 010901H
	DD	02209H
$unwind$?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z DD 011401H
	DD	02214H
$unwind$?scrollIncVert@@YAXPEAUvram_io@@@Z DD 010901H
	DD	02209H
$unwind$?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z DD 031201H
	DD	01c0112H
	DD	0700bH
$unwind$?readCpu8@@YAEGPEAUcpu@@@Z DD 010e01H
	DD	0620eH
$unwind$?writeCpu8@@YAXEGPEAUcpu@@@Z DD 011201H
	DD	06212H
$unwind$?readCpu16@@YAGGPEAUcpu@@@Z DD 010e01H
	DD	0620eH
$unwind$?bugReadCpu16@@YAGGPEAUcpu@@@Z DD 010e01H
	DD	0620eH
$unwind$?push@@YAXEPEAUcpu@@@Z DD 010d01H
	DD	0420dH
$unwind$?pop@@YAEPEAUcpu@@@Z DD 010901H
	DD	06209H
$unwind$?adc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?AND@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?asl@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bcc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bcs@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?beq@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bit@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bmi@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bne@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bpl@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?brk@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bvc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bvs@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?clc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?cld@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?cli@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?clv@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?cmp@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?cpx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?cpy@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?dec@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?dex@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?dey@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?eor@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?inc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?inx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?iny@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?jsr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?lda@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ldx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ldy@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?lsr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ora@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?pha@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?php@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?pla@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?plp@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?rol@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ror@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?rti@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?rts@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?sbc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?sec@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sed@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sei@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sta@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?stx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sty@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tax@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tay@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tsx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?txa@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tya@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?alr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?anc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?arr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?axs@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?dcp@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?isc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?lax@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?rla@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?rra@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sax@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?shy@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?slo@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sre@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?nmi_irq@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z DD 042519H
	DD	01f0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z DD 012219H
	DD	08213H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z DD 011401H
	DD	06214H
$unwind$?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z DD 011a01H
	DD	0e21aH
$unwind$?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	08213H
$unwind$?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	08213H
$unwind$?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	08213H
$unwind$?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	0e213H
$unwind$?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	06213H
$unwind$?loadCartridge@@YAXPEAUnes@@PEAD@Z DD 010e01H
	DD	0a20eH
$unwind$?power@@YAXPEAUnes@@@Z DD 042019H
	DD	049010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0230H
$unwind$?reset@@YAXPEAUnes@@@Z DD 010901H
	DD	06209H
xdata	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
PpuReg$ = 32
PpuIO$ = 40
Nes$ = 64
?reset@@YAXPEAUnes@@@Z PROC				; reset

; 723  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 724  :     Nes->Cpu.PrgCounter = readCpu16(RESET_VEC, &Nes->Cpu);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR Nes$[rsp]
  0000e	48 8b d0	 mov	 rdx, rax
  00011	66 b9 fc ff	 mov	 cx, 65532		; 0000fffcH
  00015	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Nes$[rsp]
  0001f	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 725  : 
; 726  :     // NOTE: The status after reset was taken from nesdev
; 727  :     Nes->Cpu.StackPtr -= 3;

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR Nes$[rsp]
  00028	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0002c	83 e8 03	 sub	 eax, 3
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Nes$[rsp]
  00034	88 41 04	 mov	 BYTE PTR [rcx+4], al

; 728  :     setInterrupt(&Nes->Cpu.Flags);

  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR Nes$[rsp]
  0003c	48 83 c0 03	 add	 rax, 3
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 729  : 
; 730  :     ppu_registers *PpuReg = Nes->Ppu.Registers;

  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR Nes$[rsp]
  0004d	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00054	48 89 44 24 20	 mov	 QWORD PTR PpuReg$[rsp], rax

; 731  :     PpuReg->Ctrl1 = 0;

  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR PpuReg$[rsp]
  0005e	c6 00 00	 mov	 BYTE PTR [rax], 0

; 732  :     PpuReg->Ctrl2 = 0;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR PpuReg$[rsp]
  00066	c6 40 01 00	 mov	 BYTE PTR [rax+1], 0

; 733  :     PpuReg->ScrollAddress = 0;

  0006a	48 8b 44 24 20	 mov	 rax, QWORD PTR PpuReg$[rsp]
  0006f	c6 40 05 00	 mov	 BYTE PTR [rax+5], 0

; 734  :     PpuReg->VRamAddress = 0;

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR PpuReg$[rsp]
  00078	c6 40 06 00	 mov	 BYTE PTR [rax+6], 0

; 735  : 
; 736  :     vram_io *PpuIO = &Nes->Ppu.VRamIO;

  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR Nes$[rsp]
  00081	48 05 e4 01 00
	00		 add	 rax, 484		; 000001e4H
  00087	48 89 44 24 28	 mov	 QWORD PTR PpuIO$[rsp], rax

; 737  :     PpuIO->TempVRamAdrs = 0;

  0008c	33 c0		 xor	 eax, eax
  0008e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR PpuIO$[rsp]
  00093	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 738  :     PpuIO->LatchWrite = 0;

  00097	48 8b 44 24 28	 mov	 rax, QWORD PTR PpuIO$[rsp]
  0009c	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0

; 739  :     PpuIO->FineX = 0;

  000a0	48 8b 44 24 28	 mov	 rax, QWORD PTR PpuIO$[rsp]
  000a5	c6 40 05 00	 mov	 BYTE PTR [rax+5], 0

; 740  : }

  000a9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ad	c3		 ret	 0
?reset@@YAXPEAUnes@@@Z ENDP				; reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
tv65 = 32
tv77 = 36
MemoryBase$1 = 40
BasePixel$2 = 48
Registers$3 = 56
$T4 = 64
$T5 = 176
__$ArrayPad$ = 560
Nes$ = 608
?power@@YAXPEAUnes@@@Z PROC				; power

; 697  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 698  :     PowerOn = !PowerOn;

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  00027	75 0a		 jne	 SHORT $LN5@power
  00029	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv65[rsp], 1
  00031	eb 08		 jmp	 SHORT $LN6@power
$LN5@power:
  00033	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv65[rsp], 0
$LN6@power:
  0003b	8b 44 24 20	 mov	 eax, DWORD PTR tv65[rsp]
  0003f	89 05 00 00 00
	00		 mov	 DWORD PTR ?PowerOn@@3HA, eax

; 699  : 
; 700  :     if(PowerOn)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  0004c	74 64		 je	 SHORT $LN2@power

; 701  :     {
; 702  :         loadCartridge(Nes, RomFileName);

  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?RomFileName@@3PADA
  00055	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR Nes$[rsp]
  0005d	e8 00 00 00 00	 call	 ?loadCartridge@@YAXPEAUnes@@PEAD@Z ; loadCartridge

; 703  :         Nes->Cpu.PrgCounter = (read8(RESET_VEC+1, Nes->Cpu.MemoryBase) << 8) | read8(RESET_VEC, Nes->Cpu.MemoryBase);

  00062	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  0006a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0006e	66 b9 fd ff	 mov	 cx, 65533		; 0000fffdH
  00072	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00077	0f b6 c0	 movzx	 eax, al
  0007a	c1 e0 08	 shl	 eax, 8
  0007d	89 44 24 24	 mov	 DWORD PTR tv77[rsp], eax
  00081	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR Nes$[rsp]
  00089	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  0008d	66 b9 fc ff	 mov	 cx, 65532		; 0000fffcH
  00091	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00096	0f b6 c0	 movzx	 eax, al
  00099	8b 4c 24 24	 mov	 ecx, DWORD PTR tv77[rsp]
  0009d	0b c8		 or	 ecx, eax
  0009f	8b c1		 mov	 eax, ecx
  000a1	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR Nes$[rsp]
  000a9	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 704  :     }
; 705  :     else

  000ad	e9 e8 00 00 00	 jmp	 $LN3@power
$LN2@power:

; 706  :     {
; 707  :         uint64 MemoryBase = Nes->Cpu.MemoryBase;

  000b2	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  000ba	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000be	48 89 44 24 28	 mov	 QWORD PTR MemoryBase$1[rsp], rax

; 708  :         Nes->Cpu = {};

  000c3	48 8d 44 24 40	 lea	 rax, QWORD PTR $T4[rsp]
  000c8	48 8b f8	 mov	 rdi, rax
  000cb	33 c0		 xor	 eax, eax
  000cd	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  000d2	f3 aa		 rep stosb
  000d4	48 8d 44 24 40	 lea	 rax, QWORD PTR $T4[rsp]
  000d9	48 8b bc 24 60
	02 00 00	 mov	 rdi, QWORD PTR Nes$[rsp]
  000e1	48 8b f0	 mov	 rsi, rax
  000e4	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  000e9	f3 a4		 rep movsb

; 709  :         Nes->Cpu.MemoryBase = MemoryBase;

  000eb	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  000f3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR MemoryBase$1[rsp]
  000f8	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 710  : 
; 711  :         MemoryBase = Nes->Ppu.MemoryBase;

  000fc	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  00104	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00108	48 89 44 24 28	 mov	 QWORD PTR MemoryBase$1[rsp], rax

; 712  :         uint32 *BasePixel = Nes->Ppu.BasePixel;

  0010d	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  00115	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00119	48 89 44 24 30	 mov	 QWORD PTR BasePixel$2[rsp], rax

; 713  :         ppu_registers *Registers = Nes->Ppu.Registers; 

  0011e	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  00126	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0012d	48 89 44 24 38	 mov	 QWORD PTR Registers$3[rsp], rax

; 714  :         Nes->Ppu = {};

  00132	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  0013a	48 8b f8	 mov	 rdi, rax
  0013d	33 c0		 xor	 eax, eax
  0013f	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  00144	f3 aa		 rep stosb
  00146	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  0014e	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  00156	48 8d 78 70	 lea	 rdi, QWORD PTR [rax+112]
  0015a	48 8b f1	 mov	 rsi, rcx
  0015d	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  00162	f3 a4		 rep movsb

; 715  :         Nes->Ppu.MemoryBase = MemoryBase;

  00164	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  0016c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR MemoryBase$1[rsp]
  00171	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 716  :         Nes->Ppu.BasePixel = BasePixel;

  00175	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  0017d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR BasePixel$2[rsp]
  00182	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 717  :         Nes->Ppu.Registers = Registers;

  00186	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  0018e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$3[rsp]
  00193	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN3@power:

; 718  :     }
; 719  : }

  0019a	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a2	48 33 cc	 xor	 rcx, rsp
  001a5	e8 00 00 00 00	 call	 __security_check_cookie
  001aa	48 81 c4 48 02
	00 00		 add	 rsp, 584		; 00000248H
  001b1	5f		 pop	 rdi
  001b2	5e		 pop	 rsi
  001b3	c3		 ret	 0
?power@@YAXPEAUnes@@@Z ENDP				; power
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Flags6$1 = 32
Flags7$2 = 33
Cartridge$ = 40
RomData$3 = 48
Ppu$ = 56
Cpu$ = 64
tv182 = 72
Nes$ = 96
FileName$ = 104
?loadCartridge@@YAXPEAUnes@@PEAD@Z PROC			; loadCartridge

; 637  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 638  :     cartridge *Cartridge = &Nes->Cartridge;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR Nes$[rsp]
  00013	48 05 f0 01 00
	00		 add	 rax, 496		; 000001f0H
  00019	48 89 44 24 28	 mov	 QWORD PTR Cartridge$[rsp], rax

; 639  :     cpu *Cpu = &Nes->Cpu;

  0001e	48 8b 44 24 60	 mov	 rax, QWORD PTR Nes$[rsp]
  00023	48 89 44 24 40	 mov	 QWORD PTR Cpu$[rsp], rax

; 640  :     ppu *Ppu = &Nes->Ppu;

  00028	48 8b 44 24 60	 mov	 rax, QWORD PTR Nes$[rsp]
  0002d	48 83 c0 70	 add	 rax, 112		; 00000070H
  00031	48 89 44 24 38	 mov	 QWORD PTR Ppu$[rsp], rax

; 641  :         
; 642  :     // Reading rom file
; 643  :     Cartridge->FileName = FileName;

  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR FileName$[rsp]
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 644  :     Cartridge->FileSize;
; 645  :     Cartridge->Data = (uint8 *)LoadFile(FileName, &Cartridge->FileSize);

  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00048	48 83 c0 08	 add	 rax, 8
  0004c	48 8b d0	 mov	 rdx, rax
  0004f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR FileName$[rsp]
  00054	e8 00 00 00 00	 call	 ?LoadFile@@YAPEAXPEADPEAI@Z ; LoadFile
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0005e	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 646  : 
; 647  :     if(Cartridge->FileSize == 0)

  00062	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00067	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0006b	75 14		 jne	 SHORT $LN2@loadCartri

; 648  :     {
; 649  :         PowerOn = false;

  0006d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PowerOn@@3HA, 0

; 650  :         return;

  00077	e9 14 02 00 00	 jmp	 $LN1@loadCartri

; 651  :     }
; 652  :     else

  0007c	e9 0f 02 00 00	 jmp	 $LN3@loadCartri
$LN2@loadCartri:

; 653  :     {
; 654  :         PowerOn = true;

  00081	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PowerOn@@3HA, 1

; 655  :     
; 656  :         uint8 * RomData = Cartridge->Data;

  0008b	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00090	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00094	48 89 44 24 30	 mov	 QWORD PTR RomData$3[rsp], rax

; 657  :         
; 658  :         // NOTE: Check for correct header
; 659  :         if(RomData[0] != 'N' || RomData[1] != 'E' || RomData[2] != 'S' || RomData[3] != 0x1A)

  00099	b8 01 00 00 00	 mov	 eax, 1
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000a7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ab	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  000ae	75 45		 jne	 SHORT $LN5@loadCartri
  000b0	b8 01 00 00 00	 mov	 eax, 1
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000be	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000c2	83 f8 45	 cmp	 eax, 69			; 00000045H
  000c5	75 2e		 jne	 SHORT $LN5@loadCartri
  000c7	b8 01 00 00 00	 mov	 eax, 1
  000cc	48 6b c0 02	 imul	 rax, rax, 2
  000d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000d5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d9	83 f8 53	 cmp	 eax, 83			; 00000053H
  000dc	75 17		 jne	 SHORT $LN5@loadCartri
  000de	b8 01 00 00 00	 mov	 eax, 1
  000e3	48 6b c0 03	 imul	 rax, rax, 3
  000e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000ec	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f0	83 f8 1a	 cmp	 eax, 26
  000f3	74 12		 je	 SHORT $LN4@loadCartri
$LN5@loadCartri:

; 660  :             Assert(0);   

  000f5	33 c0		 xor	 eax, eax
  000f7	83 f8 01	 cmp	 eax, 1
  000fa	74 0b		 je	 SHORT $LN6@loadCartri
  000fc	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN6@loadCartri:
$LN4@loadCartri:

; 661  : 
; 662  :         // NOTE: Read header
; 663  :         Cartridge->PrgBankCount = RomData[4];

  00107	b8 01 00 00 00	 mov	 eax, 1
  0010c	48 6b c0 04	 imul	 rax, rax, 4
  00110	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00115	48 8b 54 24 30	 mov	 rdx, QWORD PTR RomData$3[rsp]
  0011a	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0011e	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 664  :         Cartridge->ChrBankCount = RomData[5];

  00121	b8 01 00 00 00	 mov	 eax, 1
  00126	48 6b c0 05	 imul	 rax, rax, 5
  0012a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0012f	48 8b 54 24 30	 mov	 rdx, QWORD PTR RomData$3[rsp]
  00134	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00138	88 41 28	 mov	 BYTE PTR [rcx+40], al

; 665  :         uint8 Flags6            = RomData[6];        

  0013b	b8 01 00 00 00	 mov	 eax, 1
  00140	48 6b c0 06	 imul	 rax, rax, 6
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  00149	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0014d	88 44 24 20	 mov	 BYTE PTR Flags6$1[rsp], al

; 666  :         uint8 Flags7            = RomData[7];

  00151	b8 01 00 00 00	 mov	 eax, 1
  00156	48 6b c0 07	 imul	 rax, rax, 7
  0015a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  0015f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00163	88 44 24 21	 mov	 BYTE PTR Flags7$2[rsp], al

; 667  :         Cartridge->PrgRamSize   = RomData[8];

  00167	b8 01 00 00 00	 mov	 eax, 1
  0016c	48 6b c0 08	 imul	 rax, rax, 8
  00170	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00175	48 8b 54 24 30	 mov	 rdx, QWORD PTR RomData$3[rsp]
  0017a	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0017e	88 41 38	 mov	 BYTE PTR [rcx+56], al

; 668  :         
; 669  :         Cartridge->UseVertMirror       = Flags6 & (1);

  00181	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  00186	83 e0 01	 and	 eax, 1
  00189	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0018e	89 41 3c	 mov	 DWORD PTR [rcx+60], eax

; 670  :         Cartridge->HasBatteryRam       = Flags6 & (1 << 1);

  00191	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  00196	83 e0 02	 and	 eax, 2
  00199	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0019e	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 671  :         Cartridge->HasTrainer          = Flags6 & (1 << 2);

  001a1	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  001a6	83 e0 04	 and	 eax, 4
  001a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  001ae	89 41 44	 mov	 DWORD PTR [rcx+68], eax

; 672  :         Cartridge->UseFourScreenMirror = Flags6 & (1 << 3);

  001b1	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  001b6	83 e0 08	 and	 eax, 8
  001b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  001be	89 41 48	 mov	 DWORD PTR [rcx+72], eax

; 673  :         Cartridge->MapperNum           = (Flags7 & 0xF0) | (Flags6 >> 4);

  001c1	0f b6 44 24 21	 movzx	 eax, BYTE PTR Flags7$2[rsp]
  001c6	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  001cb	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Flags6$1[rsp]
  001d0	c1 f9 04	 sar	 ecx, 4
  001d3	0b c1		 or	 eax, ecx
  001d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  001da	88 41 39	 mov	 BYTE PTR [rcx+57], al

; 674  : 
; 675  :         if(Cartridge->UseFourScreenMirror)

  001dd	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  001e2	83 78 48 00	 cmp	 DWORD PTR [rax+72], 0
  001e6	74 09		 je	 SHORT $LN7@loadCartri

; 676  :             GlobalMirrorType = FOUR_SCREEN_MIRROR;

  001e8	c6 05 00 00 00
	00 03		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 3
  001ef	eb 1b		 jmp	 SHORT $LN8@loadCartri
$LN7@loadCartri:

; 677  :         else if(Cartridge->UseVertMirror)

  001f1	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  001f6	83 78 3c 00	 cmp	 DWORD PTR [rax+60], 0
  001fa	74 09		 je	 SHORT $LN9@loadCartri

; 678  :             GlobalMirrorType = VERTICAL_MIRROR;

  001fc	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 1

; 679  :         else

  00203	eb 07		 jmp	 SHORT $LN10@loadCartri
$LN9@loadCartri:

; 680  :             GlobalMirrorType = HORIZONTAL_MIRROR;      

  00205	c6 05 00 00 00
	00 02		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 2
$LN10@loadCartri:
$LN8@loadCartri:

; 681  :         
; 682  :         Cartridge->PrgData = RomData + 16; // PrgData starts after the header info(16 bytes)

  0020c	48 8b 44 24 30	 mov	 rax, QWORD PTR RomData$3[rsp]
  00211	48 83 c0 10	 add	 rax, 16
  00215	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0021a	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 683  : 
; 684  :         if(Cartridge->HasTrainer)

  0021e	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00223	83 78 44 00	 cmp	 DWORD PTR [rax+68], 0
  00227	74 18		 je	 SHORT $LN11@loadCartri

; 685  :         {
; 686  :             Cartridge->PrgData += 512; // Trainer size 512 bytes

  00229	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0022e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00232	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  00238	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0023d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN11@loadCartri:

; 687  :         }
; 688  : 
; 689  :         Cartridge->ChrData = Cartridge->PrgData + (Cartridge->PrgBankCount * Kilobytes(16));

  00241	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00246	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0024a	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00251	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00256	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0025a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0025f	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 690  : 
; 691  :         mapperInit[Cartridge->MapperNum](Cartridge, Cpu, Ppu);

  00263	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00268	0f b6 40 39	 movzx	 eax, BYTE PTR [rax+57]
  0026c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mapperInit@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperInit
  00273	48 89 4c 24 48	 mov	 QWORD PTR tv182[rsp], rcx
  00278	4c 8b 44 24 38	 mov	 r8, QWORD PTR Ppu$[rsp]
  0027d	48 8b 54 24 40	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00282	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00287	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tv182[rsp]
  0028c	41 ff 14 c1	 call	 QWORD PTR [r9+rax*8]
$LN3@loadCartri:
$LN1@loadCartri:

; 692  :     }
; 693  : }

  00290	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00294	c3		 ret	 0
?loadCartridge@@YAXPEAUnes@@PEAD@Z ENDP			; loadCartridge
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
BankNumber$ = 32
MemPrgBank1$ = 36
BankToCpy$ = 40
Cartridge$ = 64
Cpu$ = 72
Ppu$ = 80
?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC ; unromUpdate

; 623  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 624  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 24	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 625  :     uint8 BankNumber = Cpu->MapperReg;

  0001d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  00026	88 44 24 20	 mov	 BYTE PTR BankNumber$[rsp], al

; 626  :     
; 627  :     uint8 * BankToCpy = Cartridge->PrgData + (BankNumber * Kilobytes(16));

  0002a	0f b6 44 24 20	 movzx	 eax, BYTE PTR BankNumber$[rsp]
  0002f	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0003b	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0003f	48 89 44 24 28	 mov	 QWORD PTR BankToCpy$[rsp], rax

; 628  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy, Kilobytes(16));

  00044	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  00049	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0004e	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00052	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  00057	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy$[rsp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 629  : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP ; unromUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
DataReg$1 = 32
Mirror$2 = 33
SizeToCpy$3 = 34
bit13Set$4 = 36
bit14Set$5 = 40
tv67 = 44
tv71 = 48
tv79 = 52
tv140 = 56
tv145 = 60
BankToCpy$6 = 64
PrgRomBank1$ = 72
PrgRomBank2$ = 76
IsClearBitSet$7 = 80
IsLargePrg$ = 84
IsLargeChr$ = 88
BankToCpy$8 = 96
BankToCpy$9 = 104
Cartridge$ = 128
Cpu$ = 136
Ppu$ = 144
?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC ; mmc1Update

; 517  : {

$LN37:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 518  :     uint16 PrgRomBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 48	 mov	 WORD PTR PrgRomBank1$[rsp], ax

; 519  :     uint16 PrgRomBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 4c	 mov	 WORD PTR PrgRomBank2$[rsp], ax

; 520  : 
; 521  :     bool32 IsLargePrg = (Cartridge->PrgBankCount > 16);

  00027	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002f	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00033	83 f8 10	 cmp	 eax, 16
  00036	7e 0a		 jle	 SHORT $LN27@mmc1Update
  00038	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00040	eb 08		 jmp	 SHORT $LN28@mmc1Update
$LN27@mmc1Update:
  00042	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN28@mmc1Update:
  0004a	8b 44 24 2c	 mov	 eax, DWORD PTR tv67[rsp]
  0004e	89 44 24 54	 mov	 DWORD PTR IsLargePrg$[rsp], eax

; 522  :     bool32 IsLargeChr = (Cartridge->ChrBankCount > 1);

  00052	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0005a	0f b6 40 28	 movzx	 eax, BYTE PTR [rax+40]
  0005e	83 f8 01	 cmp	 eax, 1
  00061	7e 0a		 jle	 SHORT $LN29@mmc1Update
  00063	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0006b	eb 08		 jmp	 SHORT $LN30@mmc1Update
$LN29@mmc1Update:
  0006d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN30@mmc1Update:
  00075	8b 44 24 30	 mov	 eax, DWORD PTR tv71[rsp]
  00079	89 44 24 58	 mov	 DWORD PTR IsLargeChr$[rsp], eax

; 523  : 
; 524  :     // TODO: Figure a way to deal with these static values
; 525  :     static uint8 PrgRomMode;
; 526  :     static uint8 ChrRomMode;
; 527  :     
; 528  :     if(Cpu->MapperWrite)

  0007d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00085	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  00089	0f 84 e7 03 00
	00		 je	 $LN2@mmc1Update

; 529  :     {
; 530  :         Cpu->MapperWrite = false;

  0008f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00097	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 531  :         
; 532  :         bool32 IsClearBitSet = (Cpu->MapperReg & (1 << 7)) != 0;

  0009e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  000a6	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  000aa	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000af	85 c0		 test	 eax, eax
  000b1	74 0a		 je	 SHORT $LN31@mmc1Update
  000b3	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  000bb	eb 08		 jmp	 SHORT $LN32@mmc1Update
$LN31@mmc1Update:
  000bd	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN32@mmc1Update:
  000c5	8b 44 24 34	 mov	 eax, DWORD PTR tv79[rsp]
  000c9	89 44 24 50	 mov	 DWORD PTR IsClearBitSet$7[rsp], eax

; 533  :         if(IsClearBitSet)

  000cd	83 7c 24 50 00	 cmp	 DWORD PTR IsClearBitSet$7[rsp], 0
  000d2	74 29		 je	 SHORT $LN3@mmc1Update

; 534  :         {
; 535  :             Cpu->MapperWriteCount = 0;

  000d4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  000dc	c6 40 18 00	 mov	 BYTE PTR [rax+24], 0

; 536  :             Cpu->MapperReg = 0;

  000e0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e8	c6 40 10 00	 mov	 BYTE PTR [rax+16], 0

; 537  :             Cartridge->MapperInternalReg = 0;

  000ec	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  000f4	c6 40 4c 00	 mov	 BYTE PTR [rax+76], 0

; 538  :         }
; 539  :         else

  000f8	e9 79 03 00 00	 jmp	 $LN4@mmc1Update
$LN3@mmc1Update:

; 540  :         {
; 541  :             ++Cpu->MapperWriteCount;

  000fd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00105	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00109	fe c0		 inc	 al
  0010b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00113	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 542  :             
; 543  :             Cartridge->MapperInternalReg = (Cartridge->MapperInternalReg << 1);

  00116	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0011e	0f b6 40 4c	 movzx	 eax, BYTE PTR [rax+76]
  00122	d1 e0		 shl	 eax, 1
  00124	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0012c	88 41 4c	 mov	 BYTE PTR [rcx+76], al

; 544  :             Cartridge->MapperInternalReg |= (Cpu->MapperReg & 1);

  0012f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00137	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  0013b	83 e0 01	 and	 eax, 1
  0013e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00146	0f b6 49 4c	 movzx	 ecx, BYTE PTR [rcx+76]
  0014a	0b c8		 or	 ecx, eax
  0014c	8b c1		 mov	 eax, ecx
  0014e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00156	88 41 4c	 mov	 BYTE PTR [rcx+76], al

; 545  :             
; 546  :             if(Cpu->MapperWriteCount == 5) // On 5th write

  00159	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00161	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00165	83 f8 05	 cmp	 eax, 5
  00168	0f 85 08 03 00
	00		 jne	 $LN5@mmc1Update

; 547  :             {
; 548  :                 uint8 DataReg = Cartridge->MapperInternalReg;

  0016e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00176	0f b6 40 4c	 movzx	 eax, BYTE PTR [rax+76]
  0017a	88 44 24 20	 mov	 BYTE PTR DataReg$1[rsp], al

; 549  :                 
; 550  :                 bool32 bit13Set = (Cpu->MapperWriteAddress & (1 << 13)) != 0;

  0017e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00186	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0018a	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0018f	85 c0		 test	 eax, eax
  00191	74 0a		 je	 SHORT $LN33@mmc1Update
  00193	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  0019b	eb 08		 jmp	 SHORT $LN34@mmc1Update
$LN33@mmc1Update:
  0019d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN34@mmc1Update:
  001a5	8b 44 24 38	 mov	 eax, DWORD PTR tv140[rsp]
  001a9	89 44 24 24	 mov	 DWORD PTR bit13Set$4[rsp], eax

; 551  :                 bool32 bit14Set = (Cpu->MapperWriteAddress & (1 << 14)) != 0;

  001ad	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  001b5	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  001b9	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  001be	85 c0		 test	 eax, eax
  001c0	74 0a		 je	 SHORT $LN35@mmc1Update
  001c2	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv145[rsp], 1
  001ca	eb 08		 jmp	 SHORT $LN36@mmc1Update
$LN35@mmc1Update:
  001cc	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
$LN36@mmc1Update:
  001d4	8b 44 24 3c	 mov	 eax, DWORD PTR tv145[rsp]
  001d8	89 44 24 28	 mov	 DWORD PTR bit14Set$5[rsp], eax

; 552  : 
; 553  :                 if(!bit13Set && !bit14Set)     // Control Reg

  001dc	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  001e1	75 7d		 jne	 SHORT $LN6@mmc1Update
  001e3	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  001e8	75 76		 jne	 SHORT $LN6@mmc1Update

; 554  :                 {
; 555  :                     uint8 Mirror = DataReg & 3;

  001ea	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  001ef	83 e0 03	 and	 eax, 3
  001f2	88 44 24 21	 mov	 BYTE PTR Mirror$2[rsp], al

; 556  :                     if(Mirror == 0)

  001f6	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  001fb	85 c0		 test	 eax, eax
  001fd	75 07		 jne	 SHORT $LN8@mmc1Update

; 557  :                         GlobalMirrorType = SINGLE_SCREEN_MIRROR;

  001ff	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 0
$LN8@mmc1Update:

; 558  :                     if(Mirror == 1)

  00206	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  0020b	83 f8 01	 cmp	 eax, 1
  0020e	75 07		 jne	 SHORT $LN9@mmc1Update

; 559  :                         GlobalMirrorType = SINGLE_SCREEN_MIRROR;

  00210	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 0
$LN9@mmc1Update:

; 560  :                     if(Mirror == 2)

  00217	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  0021c	83 f8 02	 cmp	 eax, 2
  0021f	75 07		 jne	 SHORT $LN10@mmc1Update

; 561  :                         GlobalMirrorType = VERTICAL_MIRROR;

  00221	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 1
$LN10@mmc1Update:

; 562  :                     if(Mirror == 3)

  00228	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  0022d	83 f8 03	 cmp	 eax, 3
  00230	75 07		 jne	 SHORT $LN11@mmc1Update

; 563  :                         GlobalMirrorType = HORIZONTAL_MIRROR;

  00232	c6 05 00 00 00
	00 02		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 2
$LN11@mmc1Update:

; 564  :                                         
; 565  :                     PrgRomMode = (DataReg & 12) >> 2;

  00239	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0023e	83 e0 0c	 and	 eax, 12
  00241	c1 f8 02	 sar	 eax, 2
  00244	88 05 00 00 00
	00		 mov	 BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA, al

; 566  :                     ChrRomMode = (DataReg & (1 << 4)) >> 4;

  0024a	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0024f	83 e0 10	 and	 eax, 16
  00252	c1 f8 04	 sar	 eax, 4
  00255	88 05 00 00 00
	00		 mov	 BYTE PTR ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA, al
  0025b	e9 f2 01 00 00	 jmp	 $LN7@mmc1Update
$LN6@mmc1Update:

; 567  :                 }
; 568  :                 else if(bit13Set && !bit14Set) // CHR Bank 0

  00260	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  00265	74 72		 je	 SHORT $LN12@mmc1Update
  00267	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  0026c	75 6b		 jne	 SHORT $LN12@mmc1Update

; 569  :                 {
; 570  :                     uint8 SizeToCpy = 0;

  0026e	c6 44 24 22 00	 mov	 BYTE PTR SizeToCpy$3[rsp], 0

; 571  :                     
; 572  :                     if(ChrRomMode == 1) // 8kb mode Low bit ignored

  00273	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	75 12		 jne	 SHORT $LN14@mmc1Update

; 573  :                     {
; 574  :                         DataReg = DataReg >> 1;

  0027f	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  00284	d1 f8		 sar	 eax, 1
  00286	88 44 24 20	 mov	 BYTE PTR DataReg$1[rsp], al

; 575  :                         SizeToCpy = Kilobytes(8);

  0028a	c6 44 24 22 00	 mov	 BYTE PTR SizeToCpy$3[rsp], 0

; 576  :                     }
; 577  :                     else

  0028f	eb 05		 jmp	 SHORT $LN15@mmc1Update
$LN14@mmc1Update:

; 578  :                     {
; 579  :                         SizeToCpy = Kilobytes(4);

  00291	c6 44 24 22 00	 mov	 BYTE PTR SizeToCpy$3[rsp], 0
$LN15@mmc1Update:

; 580  :                     }
; 581  :                     uint8 * BankToCpy = Cartridge->ChrData + (DataReg * SizeToCpy);              

  00296	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0029b	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR SizeToCpy$3[rsp]
  002a0	0f af c1	 imul	 eax, ecx
  002a3	48 98		 cdqe
  002a5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  002ad	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  002b1	48 89 44 24 60	 mov	 QWORD PTR BankToCpy$8[rsp], rax

; 582  :                     cpyMemory((uint8 *)Ppu->MemoryBase, BankToCpy, SizeToCpy);

  002b6	0f b6 44 24 22	 movzx	 eax, BYTE PTR SizeToCpy$3[rsp]
  002bb	44 0f b7 c0	 movzx	 r8d, ax
  002bf	48 8b 54 24 60	 mov	 rdx, QWORD PTR BankToCpy$8[rsp]
  002c4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  002cc	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002cf	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
  002d4	e9 79 01 00 00	 jmp	 $LN13@mmc1Update
$LN12@mmc1Update:

; 583  :                 }
; 584  :                 else if(!bit13Set && bit14Set) // CHR Bank 1

  002d9	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  002de	75 58		 jne	 SHORT $LN16@mmc1Update
  002e0	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  002e5	74 51		 je	 SHORT $LN16@mmc1Update

; 585  :                 {
; 586  :                     if(ChrRomMode == 1) // 4kb mode

  002e7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  002ee	83 f8 01	 cmp	 eax, 1
  002f1	75 40		 jne	 SHORT $LN18@mmc1Update

; 587  :                     {
; 588  :                         uint8 * BankToCpy = Cartridge->ChrData + (DataReg * Kilobytes(4));              

  002f3	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  002f8	48 69 c0 00 10
	00 00		 imul	 rax, rax, 4096		; 00001000H
  002ff	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00307	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  0030b	48 89 44 24 68	 mov	 QWORD PTR BankToCpy$9[rsp], rax

; 589  :                         cpyMemory((uint8 *)Ppu->MemoryBase + 0x1000, BankToCpy, Kilobytes(4));

  00310	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00318	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0031b	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00321	66 41 b8 00 10	 mov	 r8w, 4096		; 00001000H
  00326	48 8b 54 24 68	 mov	 rdx, QWORD PTR BankToCpy$9[rsp]
  0032b	48 8b c8	 mov	 rcx, rax
  0032e	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
$LN18@mmc1Update:

; 590  :                     }
; 591  :                 }

  00333	e9 1a 01 00 00	 jmp	 $LN17@mmc1Update
$LN16@mmc1Update:

; 592  :                 else if(bit13Set && bit14Set) // PRG bank

  00338	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  0033d	0f 84 0f 01 00
	00		 je	 $LN19@mmc1Update
  00343	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  00348	0f 84 04 01 00
	00		 je	 $LN19@mmc1Update

; 593  :                 {
; 594  :                     uint8 * BankToCpy;
; 595  :                     if(PrgRomMode == 0 || PrgRomMode == 1) // 32kib Mode

  0034e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  00355	85 c0		 test	 eax, eax
  00357	74 0c		 je	 SHORT $LN22@mmc1Update
  00359	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  00360	83 f8 01	 cmp	 eax, 1
  00363	75 51		 jne	 SHORT $LN20@mmc1Update
$LN22@mmc1Update:

; 596  :                     {
; 597  :                         DataReg = DataReg >> 1;

  00365	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0036a	d1 f8		 sar	 eax, 1
  0036c	88 44 24 20	 mov	 BYTE PTR DataReg$1[rsp], al

; 598  :                         BankToCpy = Cartridge->PrgData + (DataReg * Kilobytes(32));              

  00370	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  00375	48 69 c0 00 80
	00 00		 imul	 rax, rax, 32768		; 00008000H
  0037c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00384	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00388	48 89 44 24 40	 mov	 QWORD PTR BankToCpy$6[rsp], rax

; 599  :                         cpyMemory((uint8 *)Cpu->MemoryBase + 0x8000, BankToCpy, Kilobytes(32));

  0038d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00395	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00399	48 05 00 80 00
	00		 add	 rax, 32768		; 00008000H
  0039f	66 41 b8 00 80	 mov	 r8w, 32768		; 00008000H
  003a4	48 8b 54 24 40	 mov	 rdx, QWORD PTR BankToCpy$6[rsp]
  003a9	48 8b c8	 mov	 rcx, rax
  003ac	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
  003b1	e9 9c 00 00 00	 jmp	 $LN21@mmc1Update
$LN20@mmc1Update:

; 600  :                     }
; 601  :                     else if(PrgRomMode == 2) // 16kb low bank

  003b6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  003bd	83 f8 02	 cmp	 eax, 2
  003c0	75 43		 jne	 SHORT $LN23@mmc1Update

; 602  :                     {
; 603  :                         BankToCpy = Cartridge->PrgData + (DataReg * Kilobytes(32));              

  003c2	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  003c7	48 69 c0 00 80
	00 00		 imul	 rax, rax, 32768		; 00008000H
  003ce	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  003d6	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  003da	48 89 44 24 40	 mov	 QWORD PTR BankToCpy$6[rsp], rax

; 604  :                         cpyMemory((uint8 *)Cpu->MemoryBase + 0x8000, BankToCpy, Kilobytes(16));

  003df	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  003e7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003eb	48 05 00 80 00
	00		 add	 rax, 32768		; 00008000H
  003f1	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  003f6	48 8b 54 24 40	 mov	 rdx, QWORD PTR BankToCpy$6[rsp]
  003fb	48 8b c8	 mov	 rcx, rax
  003fe	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
  00403	eb 4d		 jmp	 SHORT $LN24@mmc1Update
$LN23@mmc1Update:

; 605  :                         
; 606  :                     }
; 607  :                     else if(PrgRomMode == 3) // 16kb high bank

  00405	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  0040c	83 f8 03	 cmp	 eax, 3
  0040f	75 41		 jne	 SHORT $LN25@mmc1Update

; 608  :                     {
; 609  :                         BankToCpy = Cartridge->PrgData + (DataReg * Kilobytes(32));              

  00411	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  00416	48 69 c0 00 80
	00 00		 imul	 rax, rax, 32768		; 00008000H
  0041d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00425	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00429	48 89 44 24 40	 mov	 QWORD PTR BankToCpy$6[rsp], rax

; 610  :                         cpyMemory((uint8 *)Cpu->MemoryBase + 0xC000, BankToCpy, Kilobytes(16));

  0042e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00436	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0043a	48 05 00 c0 00
	00		 add	 rax, 49152		; 0000c000H
  00440	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  00445	48 8b 54 24 40	 mov	 rdx, QWORD PTR BankToCpy$6[rsp]
  0044a	48 8b c8	 mov	 rcx, rax
  0044d	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
$LN25@mmc1Update:
$LN24@mmc1Update:
$LN21@mmc1Update:
$LN19@mmc1Update:
$LN17@mmc1Update:
$LN13@mmc1Update:
$LN7@mmc1Update:

; 611  :                     }
; 612  :                 }
; 613  :                 
; 614  :                 Cpu->MapperWriteCount = 0;

  00452	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  0045a	c6 40 18 00	 mov	 BYTE PTR [rax+24], 0

; 615  :                 Cpu->MapperReg = 0;

  0045e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00466	c6 40 10 00	 mov	 BYTE PTR [rax+16], 0

; 616  :                 Cartridge->MapperInternalReg = 0;

  0046a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00472	c6 40 4c 00	 mov	 BYTE PTR [rax+76], 0
$LN5@mmc1Update:
$LN4@mmc1Update:
$LN2@mmc1Update:

; 617  :             }
; 618  :         }
; 619  :     }
; 620  : }

  00476	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0047a	c3		 ret	 0
?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP ; mmc1Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Cartridge$ = 8
Cpu$ = 16
Ppu$ = 24
?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC ; nromUpdate

; 512  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 513  :     Assert(0);

  0000f	33 c0		 xor	 eax, eax
  00011	83 f8 01	 cmp	 eax, 1
  00014	74 0b		 je	 SHORT $LN2@nromUpdate
  00016	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@nromUpdate:

; 514  : }

  00021	c3		 ret	 0
?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP ; nromUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemPrgBank1$ = 32
MemPrgBank2$ = 36
BankToCpy1$ = 40
BankToCpy2$ = 48
Cartridge$ = 80
Cpu$ = 88
Ppu$ = 96
?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC	; unromInit

; 493  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 494  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 20	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 495  :     uint16 MemPrgBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 24	 mov	 WORD PTR MemPrgBank2$[rsp], ax

; 496  : 
; 497  :     uint8 * BankToCpy1 = Cartridge->PrgData;

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00030	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 498  :     uint8 * BankToCpy2 = Cartridge->PrgData + ((Cartridge->PrgBankCount - 1) * Kilobytes(16));

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003a	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0003e	ff c8		 dec	 eax
  00040	48 98		 cdqe
  00042	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00049	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0004e	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00052	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax

; 499  :            
; 500  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy1, Kilobytes(16));

  00057	0f b7 44 24 20	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  0005c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00061	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00065	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0006a	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy1$[rsp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 501  :     cpyMemory((uint8 *)MemPrgBank2 + Cpu->MemoryBase, BankToCpy2, Kilobytes(16));

  00077	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank2$[rsp]
  0007c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00081	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00085	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0008a	48 8b 54 24 30	 mov	 rdx, QWORD PTR BankToCpy2$[rsp]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 502  : }

  00097	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009b	c3		 ret	 0
?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP	; unromInit
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemPrgBank1$ = 32
MemPrgBank2$ = 36
BankToCpy1$ = 40
BankToCpy2$ = 48
Cartridge$ = 80
Cpu$ = 88
Ppu$ = 96
?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC	; mmc1Init

; 481  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 482  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 20	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 483  :     uint16 MemPrgBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 24	 mov	 WORD PTR MemPrgBank2$[rsp], ax

; 484  : 
; 485  :     uint8 * BankToCpy1 = Cartridge->PrgData;

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00030	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 486  :     uint8 * BankToCpy2 = Cartridge->PrgData + ((Cartridge->PrgBankCount - 1) * Kilobytes(16));

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003a	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0003e	ff c8		 dec	 eax
  00040	48 98		 cdqe
  00042	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00049	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0004e	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00052	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax

; 487  :            
; 488  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy1, Kilobytes(16));

  00057	0f b7 44 24 20	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  0005c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00061	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00065	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0006a	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy1$[rsp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 489  :     cpyMemory((uint8 *)MemPrgBank2 + Cpu->MemoryBase, BankToCpy2, Kilobytes(16));

  00077	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank2$[rsp]
  0007c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00081	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00085	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0008a	48 8b 54 24 30	 mov	 rdx, QWORD PTR BankToCpy2$[rsp]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 490  :  }

  00097	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009b	c3		 ret	 0
?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP	; mmc1Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemPrgBank1$ = 32
MemPrgBank2$ = 36
BankToCpy1$ = 40
BankToCpy2$ = 48
Cartridge$ = 80
Cpu$ = 88
Ppu$ = 96
?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC	; nromInit

; 452  : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 453  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 20	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 454  :     uint16 MemPrgBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 24	 mov	 WORD PTR MemPrgBank2$[rsp], ax

; 455  : 
; 456  :     uint8 * BankToCpy1;
; 457  :     uint8 * BankToCpy2;
; 458  :         
; 459  :     if(Cartridge->PrgBankCount == 1)

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002c	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 1e		 jne	 SHORT $LN2@nromInit

; 460  :     {
; 461  :         BankToCpy1 = Cartridge->PrgData;

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003e	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 462  :         BankToCpy2 = Cartridge->PrgData;

  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00048	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004c	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax
  00051	eb 30		 jmp	 SHORT $LN3@nromInit
$LN2@nromInit:

; 463  :     }
; 464  :     else if(Cartridge->PrgBankCount == 2)

  00053	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00058	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0005c	83 f8 02	 cmp	 eax, 2
  0005f	75 22		 jne	 SHORT $LN4@nromInit

; 465  :     {
; 466  :         BankToCpy1 = Cartridge->PrgData;

  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00066	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0006a	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 467  :         BankToCpy2 = Cartridge->PrgData + Kilobytes(16);

  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00074	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00078	48 05 00 40 00
	00		 add	 rax, 16384		; 00004000H
  0007e	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax
$LN4@nromInit:
$LN3@nromInit:

; 468  :     }
; 469  :         
; 470  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy1, Kilobytes(16));

  00083	0f b7 44 24 20	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  00088	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0008d	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00091	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  00096	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy1$[rsp]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 471  :     cpyMemory((uint8 *)MemPrgBank2 + Cpu->MemoryBase, BankToCpy2, Kilobytes(16));

  000a3	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank2$[rsp]
  000a8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000ad	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  000b1	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  000b6	48 8b 54 24 30	 mov	 rdx, QWORD PTR BankToCpy2$[rsp]
  000bb	48 8b c8	 mov	 rcx, rax
  000be	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 472  : 
; 473  :     // Map CHR Data to Ppu
; 474  :     if(Cartridge->ChrBankCount == 1)

  000c3	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  000c8	0f b6 40 28	 movzx	 eax, BYTE PTR [rax+40]
  000cc	83 f8 01	 cmp	 eax, 1
  000cf	75 1b		 jne	 SHORT $LN5@nromInit

; 475  :     {
; 476  :         cpyMemory((uint8 *)Ppu->MemoryBase, Cartridge->ChrData, Kilobytes(8));

  000d1	66 41 b8 00 20	 mov	 r8w, 8192		; 00002000H
  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  000db	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  000df	48 8b 44 24 60	 mov	 rax, QWORD PTR Ppu$[rsp]
  000e4	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000e7	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
$LN5@nromInit:

; 477  :     }
; 478  : }

  000ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f0	c3		 ret	 0
?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP	; nromInit
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Ppu$ = 8
MemoryBase$ = 16
BasePixel$ = 24
PpuRegisters$ = 32
?initPpu@@YAXPEAUppu@@_KPEAIPEAUppu_registers@@@Z PROC	; initPpu

; 441  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 442  :     OamData = Ppu->Oam;

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR Ppu$[rsp]
  00019	48 83 c0 20	 add	 rax, 32			; 00000020H
  0001d	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?OamData@@3PEAEEA, rax

; 443  : 
; 444  :     Ppu->MemoryBase = MemoryBase;

  00024	48 8b 44 24 08	 mov	 rax, QWORD PTR Ppu$[rsp]
  00029	48 8b 4c 24 10	 mov	 rcx, QWORD PTR MemoryBase$[rsp]
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 445  :     Ppu->Registers = PpuRegisters;

  00031	48 8b 44 24 08	 mov	 rax, QWORD PTR Ppu$[rsp]
  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR PpuRegisters$[rsp]
  0003b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 446  :     Ppu->BasePixel = BasePixel;

  0003f	48 8b 44 24 08	 mov	 rax, QWORD PTR Ppu$[rsp]
  00044	48 8b 4c 24 18	 mov	 rcx, QWORD PTR BasePixel$[rsp]
  00049	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 447  : }

  0004d	c3		 ret	 0
?initPpu@@YAXPEAUppu@@_KPEAIPEAUppu_registers@@@Z ENDP	; initPpu
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Cpu$ = 8
MemoryBase$ = 16
?initCpu@@YAXPEAUcpu@@_K@Z PROC				; initCpu

; 435  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 436  :     Cpu->MemoryBase = MemoryBase;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR Cpu$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR MemoryBase$[rsp]
  00014	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 437  : }

  00018	c3		 ret	 0
?initCpu@@YAXPEAUcpu@@_K@Z ENDP				; initCpu
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
BackBuffer$ = 128
DeviceContext$ = 136
WindowWidth$ = 144
WindowHeight$ = 152
?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z PROC ; drawScreenBuffer

; 423  : {                

  00000	66 44 89 4c 24
	20		 mov	 WORD PTR [rsp+32], r9w
  00006	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 424  :     StretchDIBits(DeviceContext,

  0001a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  00022	0f b7 8c 24 98
	00 00 00	 movzx	 ecx, WORD PTR WindowHeight$[rsp]
  0002a	0f b7 94 24 90
	00 00 00	 movzx	 edx, WORD PTR WindowWidth$[rsp]
  00032	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  0003a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00042	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  0004f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00053	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00058	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  00060	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00063	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00067	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  0006f	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00072	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00076	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0007e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00086	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0008a	44 8b ca	 mov	 r9d, edx
  0008d	45 33 c0	 xor	 r8d, r8d
  00090	33 d2		 xor	 edx, edx
  00092	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 425  :                   0, 0, WindowWidth, WindowHeight,
; 426  :                   0, 0, BackBuffer->Width, BackBuffer->Height,
; 427  :                   BackBuffer->Memory,
; 428  :                   &BackBuffer->Info,
; 429  :                   DIB_RGB_COLORS, SRCCOPY);
; 430  : }

  000a0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a4	c3		 ret	 0
?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z ENDP ; drawScreenBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z PROC	; createBackBuffer

; 399  : {

  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 400  :     if(Buffer->Memory)

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00019	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001e	74 17		 je	 SHORT $LN2@createBack

; 401  :     {
; 402  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  00020	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00026	33 d2		 xor	 edx, edx
  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002d	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@createBack:

; 403  :     }
; 404  : 
; 405  :     Buffer->Width = Width;

  00037	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  0003c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00041	89 41 38	 mov	 DWORD PTR [rcx+56], eax

; 406  :     Buffer->Height = Height;

  00044	0f b7 44 24 50	 movzx	 eax, WORD PTR Height$[rsp]
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0004e	89 41 3c	 mov	 DWORD PTR [rcx+60], eax

; 407  :     Buffer->BytesPerPixel = 4; // TODO: Check if this is wrong. Should it be 3 instead? No alpha value

  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00056	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 408  : 
; 409  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00062	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 410  :     Buffer->Info.bmiHeader.biWidth = Width;

  00068	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00072	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 411  :     Buffer->Info.bmiHeader.biHeight = -Height; // Negative tells windows that we raster top to bottom

  00075	0f b7 44 24 50	 movzx	 eax, WORD PTR Height$[rsp]
  0007a	f7 d8		 neg	 eax
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00081	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 412  :     Buffer->Info.bmiHeader.biPlanes = 1;

  00084	b8 01 00 00 00	 mov	 eax, 1
  00089	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0008e	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 413  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00092	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00097	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009c	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 414  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a0	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a5	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 415  : 
; 416  :     int MemorySize = Width * Height * Buffer->BytesPerPixel;

  000ac	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  000b1	0f b7 4c 24 50	 movzx	 ecx, WORD PTR Height$[rsp]
  000b6	0f af c1	 imul	 eax, ecx
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000be	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c2	89 44 24 20	 mov	 DWORD PTR MemorySize$[rsp], eax

; 417  :     Buffer->Memory = VirtualAlloc(0, MemorySize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE); 

  000c6	48 63 44 24 20	 movsxd	 rax, DWORD PTR MemorySize$[rsp]
  000cb	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d1	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000d7	48 8b d0	 mov	 rdx, rax
  000da	33 c9		 xor	 ecx, ecx
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000e7	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 418  :     Buffer->Pitch = Width * Buffer->BytesPerPixel;

  000eb	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  000f0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000f5	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000fe	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 419  : }

  00101	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00105	c3		 ret	 0
?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z ENDP	; createBackBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
ClientRect$ = 32
__$ArrayPad$ = 48
Window$ = 80
Width$ = 88
Height$ = 96
?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z PROC		; getWindowSize

; 390  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 391  :     RECT ClientRect;
; 392  :     GetClientRect(Window, &ClientRect);

  00022	48 8d 54 24 20	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 393  :     *Width = ClientRect.right - ClientRect.left;

  00032	8b 44 24 20	 mov	 eax, DWORD PTR ClientRect$[rsp]
  00036	8b 4c 24 28	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  0003a	2b c8		 sub	 ecx, eax
  0003c	8b c1		 mov	 eax, ecx
  0003e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Width$[rsp]
  00043	66 89 01	 mov	 WORD PTR [rcx], ax

; 394  :     *Height = ClientRect.bottom - ClientRect.top;

  00046	8b 44 24 24	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0004a	8b 4c 24 2c	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  0004e	2b c8		 sub	 ecx, eax
  00050	8b c1		 mov	 eax, ecx
  00052	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Height$[rsp]
  00057	66 89 01	 mov	 WORD PTR [rcx], ax

; 395  : }

  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0005f	48 33 cc	 xor	 rcx, rsp
  00062	e8 00 00 00 00	 call	 __security_check_cookie
  00067	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006b	c3		 ret	 0
?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z ENDP		; getWindowSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
Address$ = 32
CyclesElapsed$ = 36
Instruction$ = 37
idx$1 = 38
AddressMode$ = 39
InstrData$ = 40
InstrLength$ = 44
InstrCycles$ = 45
RelOffset$2 = 46
ZeroAddress$3 = 47
AddedAddress$4 = 48
ZeroAddress$5 = 49
AdditionalCycles$6 = 50
i$7 = 52
CrossedPage$ = 56
IndirectAddress$8 = 60
tv155 = 64
$T9 = 72
$T10 = 80
InstrName$ = 88
tv316 = 96
LogCpu$ = 112
__$ArrayPad$ = 224
Cpu$ = 272
NewInput$ = 280
?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z PROC		; cpuTick

; 441  : {        

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 442  :     uint8 CyclesElapsed = 0;

  00025	c6 44 24 24 00	 mov	 BYTE PTR CyclesElapsed$[rsp], 0

; 443  : 
; 444  :     uint16 Address = 0;

  0002a	33 c0		 xor	 eax, eax
  0002c	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 445  :     bool32 CrossedPage = 0;

  00031	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR CrossedPage$[rsp], 0

; 446  :     
; 447  :     uint8 Instruction;
; 448  :     uint8 AddressMode;
; 449  :     uint8 InstrLength;
; 450  :     char *InstrName;
; 451  :     uint8 InstrCycles;
; 452  :     uint8 InstrData[3]; // Stores data for each instruction
; 453  : 
; 454  :     // NOTE: Logging: Save Cpu before changes. Print out later
; 455  :     cpu LogCpu = *Cpu;

  00039	48 8d 44 24 70	 lea	 rax, QWORD PTR LogCpu$[rsp]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	48 8b b4 24 10
	01 00 00	 mov	 rsi, QWORD PTR Cpu$[rsp]
  00049	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  0004e	f3 a4		 rep movsb

; 456  : 
; 457  :     if(Cpu->PadStrobe)

  00050	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00058	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  0005c	74 3f		 je	 SHORT $LN10@cpuTick

; 458  :     {
; 459  :         for(uint8 idx = 0; idx < input::BUTTON_NUM; ++idx)

  0005e	c6 44 24 26 00	 mov	 BYTE PTR idx$1[rsp], 0
  00063	eb 0b		 jmp	 SHORT $LN4@cpuTick
$LN2@cpuTick:
  00065	0f b6 44 24 26	 movzx	 eax, BYTE PTR idx$1[rsp]
  0006a	fe c0		 inc	 al
  0006c	88 44 24 26	 mov	 BYTE PTR idx$1[rsp], al
$LN4@cpuTick:
  00070	0f b6 44 24 26	 movzx	 eax, BYTE PTR idx$1[rsp]
  00075	83 f8 08	 cmp	 eax, 8
  00078	7d 23		 jge	 SHORT $LN3@cpuTick

; 460  :             Cpu->InputPad1.buttons[idx] = NewInput->buttons[idx];

  0007a	0f b6 44 24 26	 movzx	 eax, BYTE PTR idx$1[rsp]
  0007f	0f b6 4c 24 26	 movzx	 ecx, BYTE PTR idx$1[rsp]
  00084	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0008c	48 8b bc 24 18
	01 00 00	 mov	 rdi, QWORD PTR NewInput$[rsp]
  00094	8b 04 87	 mov	 eax, DWORD PTR [rdi+rax*4]
  00097	89 44 8a 20	 mov	 DWORD PTR [rdx+rcx*4+32], eax
  0009b	eb c8		 jmp	 SHORT $LN2@cpuTick
$LN3@cpuTick:
$LN10@cpuTick:

; 461  :     }
; 462  :     
; 463  :     if(NmiTriggered)

  0009d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?NmiTriggered@@3HA, 0 ; NmiTriggered
  000a4	74 7d		 je	 SHORT $LN11@cpuTick

; 464  :     {
; 465  :         LogCpu.PrgCounter = NMI_VEC;

  000a6	b8 fa ff 00 00	 mov	 eax, 65530		; 0000fffaH
  000ab	66 89 44 24 76	 mov	 WORD PTR LogCpu$[rsp+6], ax

; 466  :         Address = NMI_VEC;

  000b0	b8 fa ff 00 00	 mov	 eax, 65530		; 0000fffaH
  000b5	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 467  :         AddressMode = IMPL;

  000ba	c6 44 24 27 09	 mov	 BYTE PTR AddressMode$[rsp], 9

; 468  :         InstrLength = 0;

  000bf	c6 44 24 2c 00	 mov	 BYTE PTR InstrLength$[rsp], 0

; 469  :         InstrName = "NMI";

  000c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG89085
  000cb	48 89 44 24 58	 mov	 QWORD PTR InstrName$[rsp], rax

; 470  :         InstrCycles = 7;

  000d0	c6 44 24 2d 07	 mov	 BYTE PTR InstrCycles$[rsp], 7

; 471  :         InstrData[0] = 0;

  000d5	b8 01 00 00 00	 mov	 eax, 1
  000da	48 6b c0 00	 imul	 rax, rax, 0
  000de	48 89 44 24 48	 mov	 QWORD PTR $T9[rsp], rax
  000e3	48 83 7c 24 48
	03		 cmp	 QWORD PTR $T9[rsp], 3
  000e9	73 02		 jae	 SHORT $LN32@cpuTick
  000eb	eb 05		 jmp	 SHORT $LN33@cpuTick
$LN32@cpuTick:
  000ed	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN33@cpuTick:
  000f2	48 8b 44 24 48	 mov	 rax, QWORD PTR $T9[rsp]
  000f7	c6 44 04 28 00	 mov	 BYTE PTR InstrData$[rsp+rax], 0

; 472  : 
; 473  :         NmiTriggered = false;

  000fc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?NmiTriggered@@3HA, 0 ; NmiTriggered

; 474  :         nmi_irq(Address, Cpu, AddressMode);

  00106	44 0f b6 44 24
	27		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0010c	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00114	0f b7 4c 24 20	 movzx	 ecx, WORD PTR Address$[rsp]
  00119	e8 00 00 00 00	 call	 ?nmi_irq@@YAEGPEAUcpu@@E@Z ; nmi_irq
  0011e	e9 94 04 00 00	 jmp	 $LN12@cpuTick
$LN11@cpuTick:

; 475  :     }
; 476  :     else if(IrqTriggered)

  00123	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?IrqTriggered@@3HA, 0 ; IrqTriggered
  0012a	74 67		 je	 SHORT $LN13@cpuTick

; 477  :     {
; 478  :         LogCpu.PrgCounter = readCpu16(IRQ_BRK_VEC, Cpu);

  0012c	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00134	66 b9 fe ff	 mov	 cx, 65534		; 0000fffeH
  00138	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  0013d	66 89 44 24 76	 mov	 WORD PTR LogCpu$[rsp+6], ax

; 479  :         Address = IRQ_BRK_VEC;

  00142	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  00147	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 480  :         AddressMode = IMPL;

  0014c	c6 44 24 27 09	 mov	 BYTE PTR AddressMode$[rsp], 9

; 481  :         InstrLength = 0;

  00151	c6 44 24 2c 00	 mov	 BYTE PTR InstrLength$[rsp], 0

; 482  :         InstrName = "IRQ";

  00156	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG89088
  0015d	48 89 44 24 58	 mov	 QWORD PTR InstrName$[rsp], rax

; 483  :         InstrCycles = 7;

  00162	c6 44 24 2d 07	 mov	 BYTE PTR InstrCycles$[rsp], 7

; 484  :         InstrData[0] = 0;

  00167	b8 01 00 00 00	 mov	 eax, 1
  0016c	48 6b c0 00	 imul	 rax, rax, 0
  00170	48 89 44 24 50	 mov	 QWORD PTR $T10[rsp], rax
  00175	48 83 7c 24 50
	03		 cmp	 QWORD PTR $T10[rsp], 3
  0017b	73 02		 jae	 SHORT $LN34@cpuTick
  0017d	eb 05		 jmp	 SHORT $LN35@cpuTick
$LN34@cpuTick:
  0017f	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN35@cpuTick:
  00184	48 8b 44 24 50	 mov	 rax, QWORD PTR $T10[rsp]
  00189	c6 44 04 28 00	 mov	 BYTE PTR InstrData$[rsp+rax], 0

; 485  :     }
; 486  :     else

  0018e	e9 24 04 00 00	 jmp	 $LN14@cpuTick
$LN13@cpuTick:

; 487  :     {    
; 488  :         Instruction = readCpu8(Cpu->PrgCounter, Cpu);

  00193	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0019b	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  001a3	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  001a7	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  001ac	88 44 24 25	 mov	 BYTE PTR Instruction$[rsp], al

; 489  :         AddressMode = instAddressMode[Instruction];

  001b0	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instAddressMode@@3PAEA
  001bc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001c0	88 44 24 27	 mov	 BYTE PTR AddressMode$[rsp], al

; 490  :         InstrLength = instLength[Instruction];

  001c4	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instLength@@3PAEA
  001d0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001d4	88 44 24 2c	 mov	 BYTE PTR InstrLength$[rsp], al

; 491  :         InstrName = instName[Instruction];

  001d8	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instName@@3PAPEADA
  001e4	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  001e8	48 89 44 24 58	 mov	 QWORD PTR InstrName$[rsp], rax

; 492  :         InstrCycles = instCycles[Instruction];

  001ed	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instCycles@@3PAEA
  001f9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001fd	88 44 24 2d	 mov	 BYTE PTR InstrCycles$[rsp], al

; 493  : 
; 494  :         for(int i = 0; i < InstrLength; ++i)

  00201	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$7[rsp], 0
  00209	eb 0a		 jmp	 SHORT $LN7@cpuTick
$LN5@cpuTick:
  0020b	8b 44 24 34	 mov	 eax, DWORD PTR i$7[rsp]
  0020f	ff c0		 inc	 eax
  00211	89 44 24 34	 mov	 DWORD PTR i$7[rsp], eax
$LN7@cpuTick:
  00215	0f b6 44 24 2c	 movzx	 eax, BYTE PTR InstrLength$[rsp]
  0021a	39 44 24 34	 cmp	 DWORD PTR i$7[rsp], eax
  0021e	7d 2b		 jge	 SHORT $LN6@cpuTick

; 495  :         {
; 496  :             InstrData[i] = readCpu8(Cpu->PrgCounter + i, Cpu); 

  00220	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00228	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0022c	03 44 24 34	 add	 eax, DWORD PTR i$7[rsp]
  00230	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00238	0f b7 c8	 movzx	 ecx, ax
  0023b	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00240	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR i$7[rsp]
  00245	88 44 0c 28	 mov	 BYTE PTR InstrData$[rsp+rcx], al

; 497  :         }

  00249	eb c0		 jmp	 SHORT $LN5@cpuTick
$LN6@cpuTick:

; 498  :         
; 499  :     
; 500  :         switch(AddressMode)

  0024b	0f b6 44 24 27	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  00250	89 44 24 40	 mov	 DWORD PTR tv155[rsp], eax
  00254	83 7c 24 40 0d	 cmp	 DWORD PTR tv155[rsp], 13
  00259	0f 87 bf 02 00
	00		 ja	 $LN8@cpuTick
  0025f	48 63 44 24 40	 movsxd	 rax, DWORD PTR tv155[rsp]
  00264	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0026b	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN36@cpuTick[rcx+rax*4]
  00272	48 03 c1	 add	 rax, rcx
  00275	ff e0		 jmp	 rax

; 501  :         {
; 502  :             case ACM:
; 503  :                 break;            

  00277	e9 a2 02 00 00	 jmp	 $LN8@cpuTick

; 504  :             case IMPL:
; 505  :                 break;

  0027c	e9 9d 02 00 00	 jmp	 $LN8@cpuTick
$LN17@cpuTick:

; 506  :             case IMED:
; 507  :                 Address = Cpu->PrgCounter + 1;

  00281	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00289	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0028d	ff c0		 inc	 eax
  0028f	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 508  :                 break;

  00294	e9 85 02 00 00	 jmp	 $LN8@cpuTick
$LN18@cpuTick:

; 509  :             case ZERO:
; 510  :                 Address = (uint16)InstrData[1];

  00299	b8 01 00 00 00	 mov	 eax, 1
  0029e	48 6b c0 01	 imul	 rax, rax, 1
  002a2	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  002a7	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 511  :                 break;

  002ac	e9 6d 02 00 00	 jmp	 $LN8@cpuTick
$LN19@cpuTick:

; 512  :             case ZERX:
; 513  :                 Address = ((uint16)InstrData[1] + Cpu->X) & 0xFF;

  002b1	b8 01 00 00 00	 mov	 eax, 1
  002b6	48 6b c0 01	 imul	 rax, rax, 1
  002ba	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  002bf	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  002c7	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  002cb	03 c1		 add	 eax, ecx
  002cd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002d2	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 514  :                 break;

  002d7	e9 42 02 00 00	 jmp	 $LN8@cpuTick
$LN20@cpuTick:

; 515  :             case ZERY:
; 516  :                 Address = ((uint16)InstrData[1] + Cpu->Y) & 0xFF;

  002dc	b8 01 00 00 00	 mov	 eax, 1
  002e1	48 6b c0 01	 imul	 rax, rax, 1
  002e5	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  002ea	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  002f2	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  002f6	03 c1		 add	 eax, ecx
  002f8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002fd	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 517  :                 break;

  00302	e9 17 02 00 00	 jmp	 $LN8@cpuTick
$LN21@cpuTick:

; 518  :             case ABS:
; 519  :                 Address = ((uint16)InstrData[2] << 8) | InstrData[1];

  00307	b8 01 00 00 00	 mov	 eax, 1
  0030c	48 6b c0 02	 imul	 rax, rax, 2
  00310	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  00315	c1 e0 08	 shl	 eax, 8
  00318	b9 01 00 00 00	 mov	 ecx, 1
  0031d	48 6b c9 01	 imul	 rcx, rcx, 1
  00321	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  00326	0b c1		 or	 eax, ecx
  00328	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 520  :                 break;

  0032d	e9 ec 01 00 00	 jmp	 $LN8@cpuTick
$LN22@cpuTick:

; 521  :             case ABSX:
; 522  :                 Address = (((uint16)InstrData[2] << 8) | InstrData[1]) + Cpu->X;

  00332	b8 01 00 00 00	 mov	 eax, 1
  00337	48 6b c0 02	 imul	 rax, rax, 2
  0033b	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  00340	c1 e0 08	 shl	 eax, 8
  00343	b9 01 00 00 00	 mov	 ecx, 1
  00348	48 6b c9 01	 imul	 rcx, rcx, 1
  0034c	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  00351	0b c1		 or	 eax, ecx
  00353	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0035b	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0035f	03 c1		 add	 eax, ecx
  00361	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 523  :                 CrossedPage = crossedPageCheck(Address - Cpu->X, Address);

  00366	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0036b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00373	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00377	2b c1		 sub	 eax, ecx
  00379	0f b7 54 24 20	 movzx	 edx, WORD PTR Address$[rsp]
  0037e	0f b7 c8	 movzx	 ecx, ax
  00381	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  00386	89 44 24 38	 mov	 DWORD PTR CrossedPage$[rsp], eax

; 524  :                 break;

  0038a	e9 8f 01 00 00	 jmp	 $LN8@cpuTick
$LN23@cpuTick:

; 525  :             case ABSY:
; 526  :                 Address = (((uint16)InstrData[2] << 8) | InstrData[1]) + Cpu->Y;

  0038f	b8 01 00 00 00	 mov	 eax, 1
  00394	48 6b c0 02	 imul	 rax, rax, 2
  00398	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  0039d	c1 e0 08	 shl	 eax, 8
  003a0	b9 01 00 00 00	 mov	 ecx, 1
  003a5	48 6b c9 01	 imul	 rcx, rcx, 1
  003a9	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  003ae	0b c1		 or	 eax, ecx
  003b0	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  003b8	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  003bc	03 c1		 add	 eax, ecx
  003be	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 527  :                 CrossedPage = crossedPageCheck(Address - Cpu->Y, Address);

  003c3	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  003c8	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  003d0	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  003d4	2b c1		 sub	 eax, ecx
  003d6	0f b7 54 24 20	 movzx	 edx, WORD PTR Address$[rsp]
  003db	0f b7 c8	 movzx	 ecx, ax
  003de	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  003e3	89 44 24 38	 mov	 DWORD PTR CrossedPage$[rsp], eax

; 528  :                 break;

  003e7	e9 32 01 00 00	 jmp	 $LN8@cpuTick
$LN24@cpuTick:

; 529  :             case REL:
; 530  :             {
; 531  :                 int8 RelOffset = InstrData[1];

  003ec	b8 01 00 00 00	 mov	 eax, 1
  003f1	48 6b c0 01	 imul	 rax, rax, 1
  003f5	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  003fa	88 44 24 2e	 mov	 BYTE PTR RelOffset$2[rsp], al

; 532  :                 Address = Cpu->PrgCounter + 2 + RelOffset;

  003fe	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00406	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0040a	0f be 4c 24 2e	 movsx	 ecx, BYTE PTR RelOffset$2[rsp]
  0040f	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00413	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 533  :                 break;

  00418	e9 01 01 00 00	 jmp	 $LN8@cpuTick
$LN25@cpuTick:

; 534  :             }
; 535  :             case INDX:
; 536  :             {
; 537  :                 uint8 ZeroAddress = InstrData[1];

  0041d	b8 01 00 00 00	 mov	 eax, 1
  00422	48 6b c0 01	 imul	 rax, rax, 1
  00426	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  0042b	88 44 24 2f	 mov	 BYTE PTR ZeroAddress$3[rsp], al

; 538  :                 uint8 AddedAddress = (ZeroAddress + Cpu->X) & 0xFF;

  0042f	0f b6 44 24 2f	 movzx	 eax, BYTE PTR ZeroAddress$3[rsp]
  00434	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0043c	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00440	03 c1		 add	 eax, ecx
  00442	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00447	88 44 24 30	 mov	 BYTE PTR AddedAddress$4[rsp], al

; 539  :                 Address = bugReadCpu16(AddedAddress, Cpu);

  0044b	0f b6 44 24 30	 movzx	 eax, BYTE PTR AddedAddress$4[rsp]
  00450	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00458	0f b7 c8	 movzx	 ecx, ax
  0045b	e8 00 00 00 00	 call	 ?bugReadCpu16@@YAGGPEAUcpu@@@Z ; bugReadCpu16
  00460	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 540  :                 break;

  00465	e9 b4 00 00 00	 jmp	 $LN8@cpuTick
$LN26@cpuTick:

; 541  :             }
; 542  :             case INDY:
; 543  :             {
; 544  :                 uint8 ZeroAddress = InstrData[1];

  0046a	b8 01 00 00 00	 mov	 eax, 1
  0046f	48 6b c0 01	 imul	 rax, rax, 1
  00473	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  00478	88 44 24 31	 mov	 BYTE PTR ZeroAddress$5[rsp], al

; 545  :                 Address = bugReadCpu16(ZeroAddress, Cpu) + Cpu->Y;

  0047c	0f b6 44 24 31	 movzx	 eax, BYTE PTR ZeroAddress$5[rsp]
  00481	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00489	0f b7 c8	 movzx	 ecx, ax
  0048c	e8 00 00 00 00	 call	 ?bugReadCpu16@@YAGGPEAUcpu@@@Z ; bugReadCpu16
  00491	0f b7 c0	 movzx	 eax, ax
  00494	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0049c	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  004a0	03 c1		 add	 eax, ecx
  004a2	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 546  :                 CrossedPage = crossedPageCheck(Address - Cpu->Y, Address);

  004a7	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  004ac	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  004b4	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  004b8	2b c1		 sub	 eax, ecx
  004ba	0f b7 54 24 20	 movzx	 edx, WORD PTR Address$[rsp]
  004bf	0f b7 c8	 movzx	 ecx, ax
  004c2	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  004c7	89 44 24 38	 mov	 DWORD PTR CrossedPage$[rsp], eax

; 547  :                 break;

  004cb	eb 51		 jmp	 SHORT $LN8@cpuTick
$LN27@cpuTick:

; 548  :             }
; 549  :             case INDI:
; 550  :             {
; 551  :                 uint16 IndirectAddress = ((uint16)InstrData[2] << 8) | InstrData[1];

  004cd	b8 01 00 00 00	 mov	 eax, 1
  004d2	48 6b c0 02	 imul	 rax, rax, 2
  004d6	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  004db	c1 e0 08	 shl	 eax, 8
  004de	b9 01 00 00 00	 mov	 ecx, 1
  004e3	48 6b c9 01	 imul	 rcx, rcx, 1
  004e7	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  004ec	0b c1		 or	 eax, ecx
  004ee	66 89 44 24 3c	 mov	 WORD PTR IndirectAddress$8[rsp], ax

; 552  :                 Address = bugReadCpu16(IndirectAddress, Cpu);

  004f3	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  004fb	0f b7 4c 24 3c	 movzx	 ecx, WORD PTR IndirectAddress$8[rsp]
  00500	e8 00 00 00 00	 call	 ?bugReadCpu16@@YAGGPEAUcpu@@@Z ; bugReadCpu16
  00505	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 553  :                 break;

  0050a	eb 12		 jmp	 SHORT $LN8@cpuTick
$LN28@cpuTick:

; 554  :             }
; 555  :             case NUL:
; 556  :             {
; 557  :                 Assert(0);

  0050c	33 c0		 xor	 eax, eax
  0050e	83 f8 01	 cmp	 eax, 1
  00511	74 0b		 je	 SHORT $LN29@cpuTick
  00513	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN29@cpuTick:
$LN8@cpuTick:

; 558  :                 break;
; 559  :             }        
; 560  :         }
; 561  :     
; 562  :         Cpu->PrgCounter += InstrLength;

  0051e	0f b6 44 24 2c	 movzx	 eax, BYTE PTR InstrLength$[rsp]
  00523	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0052b	0f b7 49 06	 movzx	 ecx, WORD PTR [rcx+6]
  0052f	03 c8		 add	 ecx, eax
  00531	8b c1		 mov	 eax, ecx
  00533	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0053b	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 563  :         CyclesElapsed += InstrCycles;

  0053f	0f b6 44 24 2d	 movzx	 eax, BYTE PTR InstrCycles$[rsp]
  00544	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR CyclesElapsed$[rsp]
  00549	03 c8		 add	 ecx, eax
  0054b	8b c1		 mov	 eax, ecx
  0054d	88 44 24 24	 mov	 BYTE PTR CyclesElapsed$[rsp], al

; 564  : 
; 565  :         // NOTE: This is where the operation is executed, returning extra cycles, for branch ops
; 566  :         if(CrossedPage)

  00551	83 7c 24 38 00	 cmp	 DWORD PTR CrossedPage$[rsp], 0
  00556	74 1d		 je	 SHORT $LN30@cpuTick

; 567  :             CyclesElapsed += instBoundaryCheck[Instruction];

  00558	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  0055d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instBoundaryCheck@@3PAEA
  00564	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00568	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR CyclesElapsed$[rsp]
  0056d	03 c8		 add	 ecx, eax
  0056f	8b c1		 mov	 eax, ecx
  00571	88 44 24 24	 mov	 BYTE PTR CyclesElapsed$[rsp], al
$LN30@cpuTick:

; 568  :      
; 569  :         uint8 AdditionalCycles = instrOps[Instruction](Address, Cpu, AddressMode);

  00575	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  0057a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instrOps@@3PAP6AEGPEAUcpu@@E@ZA ; instrOps
  00581	48 89 4c 24 60	 mov	 QWORD PTR tv316[rsp], rcx
  00586	44 0f b6 44 24
	27		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0058c	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00594	0f b7 4c 24 20	 movzx	 ecx, WORD PTR Address$[rsp]
  00599	48 8b 7c 24 60	 mov	 rdi, QWORD PTR tv316[rsp]
  0059e	ff 14 c7	 call	 QWORD PTR [rdi+rax*8]
  005a1	88 44 24 32	 mov	 BYTE PTR AdditionalCycles$6[rsp], al

; 570  :         CyclesElapsed += AdditionalCycles;

  005a5	0f b6 44 24 32	 movzx	 eax, BYTE PTR AdditionalCycles$6[rsp]
  005aa	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR CyclesElapsed$[rsp]
  005af	03 c8		 add	 ecx, eax
  005b1	8b c1		 mov	 eax, ecx
  005b3	88 44 24 24	 mov	 BYTE PTR CyclesElapsed$[rsp], al
$LN14@cpuTick:
$LN12@cpuTick:

; 571  : 
; 572  :     }
; 573  : #if 0
; 574  :     char LogInstrData[16];
; 575  :     if(InstrLength == 3)
; 576  :         sprintf(LogInstrData, "%2X %2X %2X", InstrData[0], InstrData[1], InstrData[2]);
; 577  :     else if(InstrLength == 2)
; 578  :         sprintf(LogInstrData, "%2X %2X   ", InstrData[0], InstrData[1]);
; 579  :     else
; 580  :         sprintf(LogInstrData, "%2X      ", InstrData[0]);
; 581  : 
; 582  :     char LogOpInfo[64];
; 583  : //    sprintf(LogOpInfo, ""
; 584  :     
; 585  :     char LogCpuInfo[64];
; 586  :     sprintf(LogCpuInfo, "A:%2X X:%2X Y:%2X P:%2X SP:%2X  CYC: %d",
; 587  :             LogCpu.A, LogCpu.X, LogCpu.Y, LogCpu.Flags, LogCpu.StackPtr, CyclesElapsed);
; 588  : 
; 589  :     // NOTE: CPU Log options
; 590  :     char LogBuffer[1024];
; 591  :     sprintf(LogBuffer, "%4X %s    %s\n", LogCpu.PrgCounter, LogInstrData, LogCpuInfo);
; 592  :     OutputDebugString(LogBuffer);
; 593  : #endif
; 594  :     
; 595  :     return(CyclesElapsed);

  005b7	0f b6 44 24 24	 movzx	 eax, BYTE PTR CyclesElapsed$[rsp]
$LN31@cpuTick:

; 596  : }

  005bc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005c4	48 33 cc	 xor	 rcx, rsp
  005c7	e8 00 00 00 00	 call	 __security_check_cookie
  005cc	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  005d3	5f		 pop	 rdi
  005d4	5e		 pop	 rsi
  005d5	c3		 ret	 0
  005d6	66 90		 npad	 2
$LN36@cpuTick:
  005d8	00 00 00 00	 DD	 $LN28@cpuTick
  005dc	00 00 00 00	 DD	 $LN8@cpuTick
  005e0	00 00 00 00	 DD	 $LN17@cpuTick
  005e4	00 00 00 00	 DD	 $LN18@cpuTick
  005e8	00 00 00 00	 DD	 $LN19@cpuTick
  005ec	00 00 00 00	 DD	 $LN20@cpuTick
  005f0	00 00 00 00	 DD	 $LN21@cpuTick
  005f4	00 00 00 00	 DD	 $LN22@cpuTick
  005f8	00 00 00 00	 DD	 $LN23@cpuTick
  005fc	00 00 00 00	 DD	 $LN8@cpuTick
  00600	00 00 00 00	 DD	 $LN24@cpuTick
  00604	00 00 00 00	 DD	 $LN25@cpuTick
  00608	00 00 00 00	 DD	 $LN26@cpuTick
  0060c	00 00 00 00	 DD	 $LN27@cpuTick
?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z ENDP		; cpuTick
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
tv89 = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?nmi_irq@@YAEGPEAUcpu@@E@Z PROC				; nmi_irq

; 420  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 421  :     uint8 HighByte = (uint8)(Cpu->PrgCounter >> 8);

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0001c	c1 f8 08	 sar	 eax, 8
  0001f	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 422  :     uint8 LowByte = (uint8)Cpu->PrgCounter; 

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  0002c	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 423  :     push(HighByte, Cpu);

  00030	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR HighByte$[rsp]
  0003a	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 424  :     push(LowByte, Cpu);

  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00044	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00049	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 425  : 
; 426  :     clearBreak(&Cpu->Flags);

  0004e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00053	48 83 c0 03	 add	 rax, 3
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ?clearBreak@@YAXPEAE@Z	; clearBreak

; 427  :     push(Cpu->Flags, Cpu); 

  0005f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00064	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00069	0f b6 48 03	 movzx	 ecx, BYTE PTR [rax+3]
  0006d	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 428  :     setInterrupt(&Cpu->Flags);

  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00077	48 83 c0 03	 add	 rax, 3
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 429  : 
; 430  :     Cpu->PrgCounter = (read8(Address+1, Cpu->MemoryBase) << 8) | read8(Address, Cpu->MemoryBase);

  00083	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00088	ff c0		 inc	 eax
  0008a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0008f	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00093	0f b7 c8	 movzx	 ecx, ax
  00096	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  0009b	0f b6 c0	 movzx	 eax, al
  0009e	c1 e0 08	 shl	 eax, 8
  000a1	89 44 24 24	 mov	 DWORD PTR tv89[rsp], eax
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000aa	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  000ae	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  000b3	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  000b8	0f b6 c0	 movzx	 eax, al
  000bb	8b 4c 24 24	 mov	 ecx, DWORD PTR tv89[rsp]
  000bf	0b c8		 or	 ecx, eax
  000c1	8b c1		 mov	 eax, ecx
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000c8	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 431  :     return(0);

  000cc	32 c0		 xor	 al, al

; 432  : }

  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
?nmi_irq@@YAEGPEAUcpu@@E@Z ENDP				; nmi_irq
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?xaa@@YAEGPEAUcpu@@E@Z PROC				; xaa

; 787  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 788  : //    Assert(0);
; 789  :     return(0);

  0000f	32 c0		 xor	 al, al

; 790  : }

  00011	c3		 ret	 0
?xaa@@YAEGPEAUcpu@@E@Z ENDP				; xaa
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?tas@@YAEGPEAUcpu@@E@Z PROC				; tas

; 781  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 782  :     ///  Assert(0);
; 783  :     return(0);

  0000f	32 c0		 xor	 al, al

; 784  : }

  00011	c3		 ret	 0
?tas@@YAEGPEAUcpu@@E@Z ENDP				; tas
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sre@@YAEGPEAUcpu@@E@Z PROC				; sre

; 775  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 776  :     lsr(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?lsr@@YAEGPEAUcpu@@E@Z	; lsr

; 777  :     eor(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?eor@@YAEGPEAUcpu@@E@Z	; eor

; 778  :     return(0);

  0003d	32 c0		 xor	 al, al

; 779  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?sre@@YAEGPEAUcpu@@E@Z ENDP				; sre
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?slo@@YAEGPEAUcpu@@E@Z PROC				; slo

; 769  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 770  :     asl(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?asl@@YAEGPEAUcpu@@E@Z	; asl

; 771  :     ora(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?ora@@YAEGPEAUcpu@@E@Z	; ora

; 772  :     return(0);

  0003d	32 c0		 xor	 al, al

; 773  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?slo@@YAEGPEAUcpu@@E@Z ENDP				; slo
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
ReadValue$ = 32
Value$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?shy@@YAEGPEAUcpu@@E@Z PROC				; shy

; 760  : {

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 761  :     uint8 Value = (Cpu->Y & ((Address >> 8) + 1)) & 0xFF;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0001c	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00021	c1 f9 08	 sar	 ecx, 8
  00024	ff c1		 inc	 ecx
  00026	23 c1		 and	 eax, ecx
  00028	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002d	88 44 24 21	 mov	 BYTE PTR Value$[rsp], al

; 762  :     uint8 ReadValue = readCpu8((Cpu->PrgCounter + 1), Cpu);

  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00036	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0003a	ff c0		 inc	 eax
  0003c	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00041	0f b7 c8	 movzx	 ecx, ax
  00044	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00049	88 44 24 20	 mov	 BYTE PTR ReadValue$[rsp], al

; 763  :     
; 764  :     if((Cpu->X + ReadValue) <= 0xFF)

  0004d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00052	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00056	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR ReadValue$[rsp]
  0005b	03 c1		 add	 eax, ecx
  0005d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00062	7f 14		 jg	 SHORT $LN2@shy

; 765  :         writeCpu8(Value, Address, Cpu);

  00064	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00069	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0006e	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR Value$[rsp]
  00073	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN2@shy:

; 766  :     return(0);

  00078	32 c0		 xor	 al, al

; 767  : }

  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007e	c3		 ret	 0
?shy@@YAEGPEAUcpu@@E@Z ENDP				; shy
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?shx@@YAEGPEAUcpu@@E@Z PROC				; shx

; 725  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 726  : 
; 727  :     return(0);

  0000f	32 c0		 xor	 al, al

; 728  : }

  00011	c3		 ret	 0
?shx@@YAEGPEAUcpu@@E@Z ENDP				; shx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?sax@@YAEGPEAUcpu@@E@Z PROC				; sax

; 719  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 720  :     uint8 Value = Cpu->A & Cpu->X;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00020	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00024	23 c1		 and	 eax, ecx
  00026	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 721  :     writeCpu8(Value, Address, Cpu);    

  0002a	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  0002f	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00034	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00039	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 722  :     return(0);

  0003e	32 c0		 xor	 al, al

; 723  : }

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
?sax@@YAEGPEAUcpu@@E@Z ENDP				; sax
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?rra@@YAEGPEAUcpu@@E@Z PROC				; rra

; 713  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 714  :     ror(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?ror@@YAEGPEAUcpu@@E@Z	; ror

; 715  :     adc(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?adc@@YAEGPEAUcpu@@E@Z	; adc

; 716  :     return(0);

  0003d	32 c0		 xor	 al, al

; 717  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?rra@@YAEGPEAUcpu@@E@Z ENDP				; rra
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?rla@@YAEGPEAUcpu@@E@Z PROC				; rla

; 707  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 708  :     rol(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?rol@@YAEGPEAUcpu@@E@Z	; rol

; 709  :     AND(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 710  :     return(0);

  0003d	32 c0		 xor	 al, al

; 711  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?rla@@YAEGPEAUcpu@@E@Z ENDP				; rla
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?lax@@YAEGPEAUcpu@@E@Z PROC				; lax

; 701  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 702  :     lda(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?lda@@YAEGPEAUcpu@@E@Z	; lda

; 703  :     ldx(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?ldx@@YAEGPEAUcpu@@E@Z	; ldx

; 704  :     return(0);

  0003d	32 c0		 xor	 al, al

; 705  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?lax@@YAEGPEAUcpu@@E@Z ENDP				; lax
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?las@@YAEGPEAUcpu@@E@Z PROC				; las

; 697  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 698  :     return(0); 

  0000f	32 c0		 xor	 al, al

; 699  : }

  00011	c3		 ret	 0
?las@@YAEGPEAUcpu@@E@Z ENDP				; las
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?kil@@YAEGPEAUcpu@@E@Z PROC				; kil

; 692  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 693  :     //Assert(0);
; 694  :     return(0);

  0000f	32 c0		 xor	 al, al

; 695  : }

  00011	c3		 ret	 0
?kil@@YAEGPEAUcpu@@E@Z ENDP				; kil
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?isc@@YAEGPEAUcpu@@E@Z PROC				; isc

; 686  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 687  :     inc(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?inc@@YAEGPEAUcpu@@E@Z	; inc

; 688  :     sbc(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?sbc@@YAEGPEAUcpu@@E@Z	; sbc

; 689  :     return(0);

  0003d	32 c0		 xor	 al, al

; 690  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?isc@@YAEGPEAUcpu@@E@Z ENDP				; isc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?dcp@@YAEGPEAUcpu@@E@Z PROC				; dcp

; 680  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 681  :     dec(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?dec@@YAEGPEAUcpu@@E@Z	; dec

; 682  :     cmp(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?cmp@@YAEGPEAUcpu@@E@Z	; cmp

; 683  :     return(0);

  0003d	32 c0		 xor	 al, al

; 684  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?dcp@@YAEGPEAUcpu@@E@Z ENDP				; dcp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
ANDValue$ = 32
Value$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?axs@@YAEGPEAUcpu@@E@Z PROC				; axs

; 663  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 664  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 21	 mov	 BYTE PTR Value$[rsp], al

; 665  : 
; 666  :     uint8 ANDValue = (Cpu->A & Cpu->X);

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00033	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00037	23 c1		 and	 eax, ecx
  00039	88 44 24 20	 mov	 BYTE PTR ANDValue$[rsp], al

; 667  :     Cpu->X = ANDValue - Value;

  0003d	0f b6 44 24 20	 movzx	 eax, BYTE PTR ANDValue$[rsp]
  00042	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR Value$[rsp]
  00047	2b c1		 sub	 eax, ecx
  00049	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0004e	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 668  : 
; 669  :     if(ANDValue >= Value)

  00051	0f b6 44 24 20	 movzx	 eax, BYTE PTR ANDValue$[rsp]
  00056	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR Value$[rsp]
  0005b	3b c1		 cmp	 eax, ecx
  0005d	7c 13		 jl	 SHORT $LN2@axs

; 670  :         setCarry(&Cpu->Flags);

  0005f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00064	48 83 c0 03	 add	 rax, 3
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 671  :     else

  00070	eb 11		 jmp	 SHORT $LN3@axs
$LN2@axs:

; 672  :         clearCarry(&Cpu->Flags);

  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00077	48 83 c0 03	 add	 rax, 3
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@axs:

; 673  :     
; 674  :     setZero(Cpu->X, &Cpu->Flags);

  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00088	48 83 c0 03	 add	 rax, 3
  0008c	48 8b d0	 mov	 rdx, rax
  0008f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00094	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00098	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 675  :     setNegative(Cpu->X, &Cpu->Flags);

  0009d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000a2	48 83 c0 03	 add	 rax, 3
  000a6	48 8b d0	 mov	 rdx, rax
  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ae	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  000b2	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 676  :     
; 677  :     return(0);

  000b7	32 c0		 xor	 al, al

; 678  : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
?axs@@YAEGPEAUcpu@@E@Z ENDP				; axs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
bit6$ = 32
bit5$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?arr@@YAEGPEAUcpu@@E@Z PROC				; arr

; 639  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 640  :     AND(Address, Cpu, AddressMode);    

  00013	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 641  :     ror(Address, Cpu, ACM);

  00028	41 b0 01	 mov	 r8b, 1
  0002b	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00030	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00035	e8 00 00 00 00	 call	 ?ror@@YAEGPEAUcpu@@E@Z	; ror

; 642  : 
; 643  :     uint8 bit5 = Cpu->A & (1<<5);

  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00042	83 e0 20	 and	 eax, 32			; 00000020H
  00045	88 44 24 21	 mov	 BYTE PTR bit5$[rsp], al

; 644  :     uint8 bit6 = Cpu->A & (1<<6);

  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	88 44 24 20	 mov	 BYTE PTR bit6$[rsp], al

; 645  : 
; 646  :     if(bit6)

  00058	0f b6 44 24 20	 movzx	 eax, BYTE PTR bit6$[rsp]
  0005d	85 c0		 test	 eax, eax
  0005f	74 13		 je	 SHORT $LN2@arr

; 647  :         setCarry(&Cpu->Flags);

  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	48 83 c0 03	 add	 rax, 3
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 648  :     else

  00072	eb 11		 jmp	 SHORT $LN3@arr
$LN2@arr:

; 649  :         clearCarry(&Cpu->Flags);

  00074	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00079	48 83 c0 03	 add	 rax, 3
  0007d	48 8b c8	 mov	 rcx, rax
  00080	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@arr:

; 650  : 
; 651  :     if((bit5 && !bit6) || (!bit5 && bit6))

  00085	0f b6 44 24 21	 movzx	 eax, BYTE PTR bit5$[rsp]
  0008a	85 c0		 test	 eax, eax
  0008c	74 09		 je	 SHORT $LN7@arr
  0008e	0f b6 44 24 20	 movzx	 eax, BYTE PTR bit6$[rsp]
  00093	85 c0		 test	 eax, eax
  00095	74 12		 je	 SHORT $LN6@arr
$LN7@arr:
  00097	0f b6 44 24 21	 movzx	 eax, BYTE PTR bit5$[rsp]
  0009c	85 c0		 test	 eax, eax
  0009e	75 1c		 jne	 SHORT $LN4@arr
  000a0	0f b6 44 24 20	 movzx	 eax, BYTE PTR bit6$[rsp]
  000a5	85 c0		 test	 eax, eax
  000a7	74 13		 je	 SHORT $LN4@arr
$LN6@arr:

; 652  :         setOverflow(&Cpu->Flags);

  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ae	48 83 c0 03	 add	 rax, 3
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 653  :     else

  000ba	eb 11		 jmp	 SHORT $LN5@arr
$LN4@arr:

; 654  :         clearOverflow(&Cpu->Flags);

  000bc	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000c1	48 83 c0 03	 add	 rax, 3
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN5@arr:

; 655  :         
; 656  :     setZero(Cpu->A, &Cpu->Flags);

  000cd	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d2	48 83 c0 03	 add	 rax, 3
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000de	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000e1	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 657  :     setNegative(Cpu->A, &Cpu->Flags);

  000e6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000eb	48 83 c0 03	 add	 rax, 3
  000ef	48 8b d0	 mov	 rdx, rax
  000f2	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f7	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000fa	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 658  : 
; 659  :     
; 660  :     return(0);

  000ff	32 c0		 xor	 al, al

; 661  : }

  00101	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00105	c3		 ret	 0
?arr@@YAEGPEAUcpu@@E@Z ENDP				; arr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?anc@@YAEGPEAUcpu@@E@Z PROC				; anc

; 628  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 629  :     AND(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 630  :     
; 631  :     if(isBitSet(NEGATIVE_BIT, Cpu->Flags))

  00028	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00031	b1 80		 mov	 cl, 128			; 00000080H
  00033	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00038	85 c0		 test	 eax, eax
  0003a	74 13		 je	 SHORT $LN2@anc

; 632  :         setCarry(&Cpu->Flags);

  0003c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 633  :     else

  0004d	eb 11		 jmp	 SHORT $LN3@anc
$LN2@anc:

; 634  :         clearCarry(&Cpu->Flags);

  0004f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00054	48 83 c0 03	 add	 rax, 3
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@anc:

; 635  :     
; 636  :     return(0);

  00060	32 c0		 xor	 al, al

; 637  : }

  00062	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00066	c3		 ret	 0
?anc@@YAEGPEAUcpu@@E@Z ENDP				; anc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?alr@@YAEGPEAUcpu@@E@Z PROC				; alr

; 622  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 623  :     AND(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 624  :     lsr(Address, Cpu, ACM);

  00028	41 b0 01	 mov	 r8b, 1
  0002b	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00030	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00035	e8 00 00 00 00	 call	 ?lsr@@YAEGPEAUcpu@@E@Z	; lsr

; 625  :     return(0);

  0003a	32 c0		 xor	 al, al

; 626  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
?alr@@YAEGPEAUcpu@@E@Z ENDP				; alr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?ahx@@YAEGPEAUcpu@@E@Z PROC				; ahx

; 617  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 618  :     //Assert(0);
; 619  :     return(0);

  0000f	32 c0		 xor	 al, al

; 620  : }

  00011	c3		 ret	 0
?ahx@@YAEGPEAUcpu@@E@Z ENDP				; ahx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?txs@@YAEGPEAUcpu@@E@Z PROC				; txs

; 609  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 610  :     Cpu->StackPtr = Cpu->X;

  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR Cpu$[rsp]
  00014	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00019	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0001d	88 48 04	 mov	 BYTE PTR [rax+4], cl

; 611  :     return(0);

  00020	32 c0		 xor	 al, al

; 612  : }

  00022	c3		 ret	 0
?txs@@YAEGPEAUcpu@@E@Z ENDP				; txs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tya@@YAEGPEAUcpu@@E@Z PROC				; tya

; 602  : {   

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 603  :     Cpu->A = Cpu->Y;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  00021	88 08		 mov	 BYTE PTR [rax], cl

; 604  :     setZero(Cpu->A, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00037	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 605  :     setNegative(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 606  :     return(0);

  00055	32 c0		 xor	 al, al

; 607  : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
?tya@@YAEGPEAUcpu@@E@Z ENDP				; tya
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?txa@@YAEGPEAUcpu@@E@Z PROC				; txa

; 595  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 596  :     Cpu->A = Cpu->X;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00021	88 08		 mov	 BYTE PTR [rax], cl

; 597  :     setZero(Cpu->A, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00037	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 598  :     setNegative(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 599  :     return(0);

  00055	32 c0		 xor	 al, al

; 600  : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
?txa@@YAEGPEAUcpu@@E@Z ENDP				; txa
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tsx@@YAEGPEAUcpu@@E@Z PROC				; tsx

; 588  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 589  :     Cpu->X = Cpu->StackPtr;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00021	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 590  :     setZero(Cpu->X, &Cpu->Flags);

  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00029	48 83 c0 03	 add	 rax, 3
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00035	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00039	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 591  :     setNegative(Cpu->X, &Cpu->Flags);

  0003e	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00043	48 83 c0 03	 add	 rax, 3
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004f	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00053	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 592  :     return(0);

  00058	32 c0		 xor	 al, al

; 593  : }

  0005a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005e	c3		 ret	 0
?tsx@@YAEGPEAUcpu@@E@Z ENDP				; tsx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tay@@YAEGPEAUcpu@@E@Z PROC				; tay

; 581  : {    

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 582  :     Cpu->Y = Cpu->A;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00020	88 48 02	 mov	 BYTE PTR [rax+2], cl

; 583  :     setZero(Cpu->Y, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00038	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 584  :     setNegative(Cpu->Y, &Cpu->Flags);

  0003d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00042	48 83 c0 03	 add	 rax, 3
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00052	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 585  :     return(0);

  00057	32 c0		 xor	 al, al

; 586  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
?tay@@YAEGPEAUcpu@@E@Z ENDP				; tay
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tax@@YAEGPEAUcpu@@E@Z PROC				; tax

; 574  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 575  :     Cpu->X = Cpu->A;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00020	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 576  :     setZero(Cpu->X, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00038	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 577  :     setNegative(Cpu->X, &Cpu->Flags);

  0003d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00042	48 83 c0 03	 add	 rax, 3
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00052	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 578  :     return(0);

  00057	32 c0		 xor	 al, al

; 579  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
?tax@@YAEGPEAUcpu@@E@Z ENDP				; tax
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sty@@YAEGPEAUcpu@@E@Z PROC				; sty

; 569  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 570  :     writeCpu8(Cpu->Y, Address, Cpu);

  00013	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  00018	0f b7 54 24 30	 movzx	 edx, WORD PTR Address$[rsp]
  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00026	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 571  :     return(0);

  0002b	32 c0		 xor	 al, al

; 572  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?sty@@YAEGPEAUcpu@@E@Z ENDP				; sty
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?stx@@YAEGPEAUcpu@@E@Z PROC				; stx

; 564  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 565  :     writeCpu8(Cpu->X, Address, Cpu);

  00013	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  00018	0f b7 54 24 30	 movzx	 edx, WORD PTR Address$[rsp]
  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00026	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 566  :     return(0);

  0002b	32 c0		 xor	 al, al

; 567  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?stx@@YAEGPEAUcpu@@E@Z ENDP				; stx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sta@@YAEGPEAUcpu@@E@Z PROC				; sta

; 559  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 560  :     writeCpu8(Cpu->A, Address, Cpu);

  00013	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  00018	0f b7 54 24 30	 movzx	 edx, WORD PTR Address$[rsp]
  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00025	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 561  :     return(0);

  0002a	32 c0		 xor	 al, al

; 562  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
?sta@@YAEGPEAUcpu@@E@Z ENDP				; sta
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sei@@YAEGPEAUcpu@@E@Z PROC				; sei

; 554  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 555  :     setInterrupt(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 556  :     return(0);

  00024	32 c0		 xor	 al, al

; 557  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?sei@@YAEGPEAUcpu@@E@Z ENDP				; sei
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sed@@YAEGPEAUcpu@@E@Z PROC				; sed

; 549  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 550  :     setDecimal(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setDecimal@@YAXPEAE@Z	; setDecimal

; 551  :     return(0);

  00024	32 c0		 xor	 al, al

; 552  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?sed@@YAEGPEAUcpu@@E@Z ENDP				; sed
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sec@@YAEGPEAUcpu@@E@Z PROC				; sec

; 544  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 545  :     setCarry(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 546  :     return(0);

  00024	32 c0		 xor	 al, al

; 547  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?sec@@YAEGPEAUcpu@@E@Z ENDP				; sec
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
A$ = 32
B$ = 33
C$ = 34
Sum$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?sbc@@YAEGPEAUcpu@@E@Z PROC				; sbc

; 518  : {

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 519  :     uint8 A = Cpu->A;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001b	88 44 24 20	 mov	 BYTE PTR A$[rsp], al

; 520  :     uint8 B = ~readCpu8(Address, Cpu); // NOTE: Using the inverse

  0001f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00024	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00029	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0002e	0f b6 c0	 movzx	 eax, al
  00031	f7 d0		 not	 eax
  00033	88 44 24 21	 mov	 BYTE PTR B$[rsp], al

; 521  :     uint8 C = isBitSet(CARRY_BIT, Cpu->Flags);

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003c	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00040	b1 01		 mov	 cl, 1
  00042	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00047	88 44 24 22	 mov	 BYTE PTR C$[rsp], al

; 522  : 
; 523  :     uint16 Sum = (uint16)A + (uint16)B + (uint16)C;

  0004b	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  00050	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  00055	03 c1		 add	 eax, ecx
  00057	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR C$[rsp]
  0005c	03 c1		 add	 eax, ecx
  0005e	66 89 44 24 24	 mov	 WORD PTR Sum$[rsp], ax

; 524  : 
; 525  :     // Overflow check, taken from the web. One day find out how this works
; 526  :     if(((A ^ Sum) & (B ^ Sum) & 0x80) == 0x80)

  00063	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  00068	0f b7 4c 24 24	 movzx	 ecx, WORD PTR Sum$[rsp]
  0006d	33 c1		 xor	 eax, ecx
  0006f	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  00074	0f b7 54 24 24	 movzx	 edx, WORD PTR Sum$[rsp]
  00079	33 ca		 xor	 ecx, edx
  0007b	23 c1		 and	 eax, ecx
  0007d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00082	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00087	75 13		 jne	 SHORT $LN2@sbc

; 527  :         setOverflow(&Cpu->Flags);

  00089	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0008e	48 83 c0 03	 add	 rax, 3
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 528  :     else

  0009a	eb 11		 jmp	 SHORT $LN3@sbc
$LN2@sbc:

; 529  :         clearOverflow(&Cpu->Flags);

  0009c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000a1	48 83 c0 03	 add	 rax, 3
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN3@sbc:

; 530  : 
; 531  :     if(Sum & 0x100)

  000ad	0f b7 44 24 24	 movzx	 eax, WORD PTR Sum$[rsp]
  000b2	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000b7	85 c0		 test	 eax, eax
  000b9	74 13		 je	 SHORT $LN4@sbc

; 532  :         setCarry(&Cpu->Flags);

  000bb	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000c0	48 83 c0 03	 add	 rax, 3
  000c4	48 8b c8	 mov	 rcx, rax
  000c7	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 533  :     else

  000cc	eb 11		 jmp	 SHORT $LN5@sbc
$LN4@sbc:

; 534  :         clearCarry(&Cpu->Flags);

  000ce	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d3	48 83 c0 03	 add	 rax, 3
  000d7	48 8b c8	 mov	 rcx, rax
  000da	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@sbc:

; 535  : 
; 536  :     setZero(Sum, &Cpu->Flags);

  000df	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e4	48 83 c0 03	 add	 rax, 3
  000e8	48 8b d0	 mov	 rdx, rax
  000eb	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  000f0	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 537  :     setNegative(Sum, &Cpu->Flags);

  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000fa	48 83 c0 03	 add	 rax, 3
  000fe	48 8b d0	 mov	 rdx, rax
  00101	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00106	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 538  : 
; 539  :     Cpu->A = (uint8)Sum;

  0010b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00110	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00115	88 08		 mov	 BYTE PTR [rax], cl

; 540  : 
; 541  :     return(0);

  00117	32 c0		 xor	 al, al

; 542  : }

  00119	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011d	c3		 ret	 0
?sbc@@YAEGPEAUcpu@@E@Z ENDP				; sbc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
ReturnAddress$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?rts@@YAEGPEAUcpu@@E@Z PROC				; rts

; 510  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 511  :     uint8 LowByte = pop(Cpu);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 512  :     uint8 HighByte = pop(Cpu);

  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00026	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0002b	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 513  :     uint16 ReturnAddress = ((uint16)HighByte << 8) | (uint16)LowByte;

  0002f	0f b6 44 24 20	 movzx	 eax, BYTE PTR HighByte$[rsp]
  00034	c1 e0 08	 shl	 eax, 8
  00037	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  0003c	0b c1		 or	 eax, ecx
  0003e	66 89 44 24 24	 mov	 WORD PTR ReturnAddress$[rsp], ax

; 514  :     Cpu->PrgCounter = ReturnAddress + 1;

  00043	0f b7 44 24 24	 movzx	 eax, WORD PTR ReturnAddress$[rsp]
  00048	ff c0		 inc	 eax
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0004f	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 515  :     return(0);

  00053	32 c0		 xor	 al, al

; 516  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
?rts@@YAEGPEAUcpu@@E@Z ENDP				; rts
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Flags$ = 32
HighByte$ = 33
LowByte$ = 34
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?rti@@YAEGPEAUcpu@@E@Z PROC				; rti

; 500  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 501  :     uint8 Flags = pop(Cpu);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	88 44 24 20	 mov	 BYTE PTR Flags$[rsp], al

; 502  :     Cpu->Flags = Flags;

  00021	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00026	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Flags$[rsp]
  0002b	88 48 03	 mov	 BYTE PTR [rax+3], cl

; 503  :     
; 504  :     uint8 LowByte = pop(Cpu);

  0002e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00033	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  00038	88 44 24 22	 mov	 BYTE PTR LowByte$[rsp], al

; 505  :     uint8 HighByte = pop(Cpu);

  0003c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00041	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  00046	88 44 24 21	 mov	 BYTE PTR HighByte$[rsp], al

; 506  :     Cpu->PrgCounter = ((uint16)HighByte << 8) | (uint16)LowByte;

  0004a	0f b6 44 24 21	 movzx	 eax, BYTE PTR HighByte$[rsp]
  0004f	c1 e0 08	 shl	 eax, 8
  00052	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00057	0b c1		 or	 eax, ecx
  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0005e	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 507  :     return(0);

  00062	32 c0		 xor	 al, al

; 508  : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
?rti@@YAEGPEAUcpu@@E@Z ENDP				; rti
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CarrySet$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ror@@YAEGPEAUcpu@@E@Z PROC				; ror

; 461  : {

$LN11:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 462  :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 463  :     uint8 CarrySet = isBitSet(CARRY_BIT, Cpu->Flags);

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	88 44 24 21	 mov	 BYTE PTR CarrySet$[rsp], al

; 464  :     
; 465  :     if(AddressMode == ACM)

  0002c	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 65		 jne	 SHORT $LN2@ror

; 466  :     {        
; 467  :         if(Cpu->A & 1)

  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003e	83 e0 01	 and	 eax, 1
  00041	85 c0		 test	 eax, eax
  00043	74 13		 je	 SHORT $LN4@ror

; 468  :             setCarry(&Cpu->Flags);

  00045	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004a	48 83 c0 03	 add	 rax, 3
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 469  :         else

  00056	eb 11		 jmp	 SHORT $LN5@ror
$LN4@ror:

; 470  :             clearCarry(&Cpu->Flags);

  00058	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005d	48 83 c0 03	 add	 rax, 3
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@ror:

; 471  :         
; 472  :         Value = Cpu->A >> 1;

  00069	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0006e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00071	d1 f8		 sar	 eax, 1
  00073	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 473  :         
; 474  :         if(CarrySet)

  00077	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  0007c	85 c0		 test	 eax, eax
  0007e	74 0d		 je	 SHORT $LN6@ror

; 475  :             Value = Value | (1 << 7);

  00080	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  00085	0f ba e8 07	 bts	 eax, 7
  00089	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN6@ror:

; 476  :         
; 477  :         Cpu->A = Value;

  0008d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00092	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00097	88 08		 mov	 BYTE PTR [rax], cl

; 478  :     }
; 479  :     else

  00099	eb 78		 jmp	 SHORT $LN3@ror
$LN2@ror:

; 480  :     {
; 481  :         Value = readCpu8(Address, Cpu);

  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  000a0	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  000a5	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  000aa	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 482  :         if(Value & 1)

  000ae	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 13		 je	 SHORT $LN7@ror

; 483  :             setCarry(&Cpu->Flags);

  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000bf	48 83 c0 03	 add	 rax, 3
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 484  :         else

  000cb	eb 11		 jmp	 SHORT $LN8@ror
$LN7@ror:

; 485  :             clearCarry(&Cpu->Flags);

  000cd	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d2	48 83 c0 03	 add	 rax, 3
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN8@ror:

; 486  :         
; 487  :         Value = Value >> 1;

  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000e3	d1 f8		 sar	 eax, 1
  000e5	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 488  :         
; 489  :         if(CarrySet)

  000e9	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  000ee	85 c0		 test	 eax, eax
  000f0	74 0d		 je	 SHORT $LN9@ror

; 490  :             Value = Value | (1 << 7);

  000f2	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000f7	0f ba e8 07	 bts	 eax, 7
  000fb	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN9@ror:

; 491  :         
; 492  :         writeCpu8(Value, Address, Cpu);

  000ff	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00104	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00109	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0010e	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@ror:

; 493  :     }
; 494  :     setZero(Value, &Cpu->Flags);

  00113	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00118	48 83 c0 03	 add	 rax, 3
  0011c	48 8b d0	 mov	 rdx, rax
  0011f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00124	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 495  :     setNegative(Value, &Cpu->Flags);

  00129	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0012e	48 83 c0 03	 add	 rax, 3
  00132	48 8b d0	 mov	 rdx, rax
  00135	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0013a	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 496  :     return(0);

  0013f	32 c0		 xor	 al, al

; 497  : }

  00141	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00145	c3		 ret	 0
?ror@@YAEGPEAUcpu@@E@Z ENDP				; ror
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CarrySet$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?rol@@YAEGPEAUcpu@@E@Z PROC				; rol

; 422  : {    

$LN11:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 423  :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 424  :     uint8 CarrySet = isBitSet(CARRY_BIT, Cpu->Flags);

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	88 44 24 21	 mov	 BYTE PTR CarrySet$[rsp], al

; 425  :     
; 426  :     if(AddressMode == ACM)

  0002c	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 66		 jne	 SHORT $LN2@rol

; 427  :     {        
; 428  :         if(Cpu->A & (1 << 7))

  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00043	85 c0		 test	 eax, eax
  00045	74 13		 je	 SHORT $LN4@rol

; 429  :             setCarry(&Cpu->Flags);

  00047	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004c	48 83 c0 03	 add	 rax, 3
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 430  :         else

  00058	eb 11		 jmp	 SHORT $LN5@rol
$LN4@rol:

; 431  :             clearCarry(&Cpu->Flags);

  0005a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005f	48 83 c0 03	 add	 rax, 3
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@rol:

; 432  :         
; 433  :         Value = Cpu->A << 1;

  0006b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00070	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00073	d1 e0		 shl	 eax, 1
  00075	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 434  :         
; 435  :         if(CarrySet)

  00079	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  0007e	85 c0		 test	 eax, eax
  00080	74 0c		 je	 SHORT $LN6@rol

; 436  :             Value = Value | 1;

  00082	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  00087	83 c8 01	 or	 eax, 1
  0008a	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN6@rol:

; 437  :         
; 438  :         Cpu->A = Value;

  0008e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00093	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00098	88 08		 mov	 BYTE PTR [rax], cl

; 439  :     }
; 440  :     else

  0009a	eb 79		 jmp	 SHORT $LN3@rol
$LN2@rol:

; 441  :     {
; 442  :         Value = readCpu8(Address, Cpu);

  0009c	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  000a1	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  000a6	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  000ab	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 443  :         if(Value & (1 << 7))

  000af	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000b4	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000b9	85 c0		 test	 eax, eax
  000bb	74 13		 je	 SHORT $LN7@rol

; 444  :             setCarry(&Cpu->Flags);

  000bd	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000c2	48 83 c0 03	 add	 rax, 3
  000c6	48 8b c8	 mov	 rcx, rax
  000c9	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 445  :         else

  000ce	eb 11		 jmp	 SHORT $LN8@rol
$LN7@rol:

; 446  :             clearCarry(&Cpu->Flags);

  000d0	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d5	48 83 c0 03	 add	 rax, 3
  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN8@rol:

; 447  :         
; 448  :         Value = Value << 1;

  000e1	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000e6	d1 e0		 shl	 eax, 1
  000e8	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 449  :         
; 450  :         if(CarrySet)

  000ec	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  000f1	85 c0		 test	 eax, eax
  000f3	74 0c		 je	 SHORT $LN9@rol

; 451  :             Value = Value | 1;

  000f5	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000fa	83 c8 01	 or	 eax, 1
  000fd	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN9@rol:

; 452  :         
; 453  :         writeCpu8(Value, Address, Cpu);

  00101	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00106	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0010b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00110	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@rol:

; 454  :     }
; 455  :     setZero(Value, &Cpu->Flags);

  00115	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0011a	48 83 c0 03	 add	 rax, 3
  0011e	48 8b d0	 mov	 rdx, rax
  00121	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00126	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 456  :     setNegative(Value, &Cpu->Flags);

  0012b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00130	48 83 c0 03	 add	 rax, 3
  00134	48 8b d0	 mov	 rdx, rax
  00137	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0013c	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 457  :     return(0);

  00141	32 c0		 xor	 al, al

; 458  : }

  00143	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00147	c3		 ret	 0
?rol@@YAEGPEAUcpu@@E@Z ENDP				; rol
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?plp@@YAEGPEAUcpu@@E@Z PROC				; plp

; 417  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 418  :     Cpu->Flags = pop(Cpu);

  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00022	88 41 03	 mov	 BYTE PTR [rcx+3], al

; 419  :     return(0);

  00025	32 c0		 xor	 al, al

; 420  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?plp@@YAEGPEAUcpu@@E@Z ENDP				; plp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?pla@@YAEGPEAUcpu@@E@Z PROC				; pla

; 410  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 411  :     Cpu->A = pop(Cpu); 

  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00022	88 01		 mov	 BYTE PTR [rcx], al

; 412  :     setZero(Cpu->A, &Cpu->Flags);

  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00029	48 83 c0 03	 add	 rax, 3
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00035	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00038	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 413  :     setNegative(Cpu->A, &Cpu->Flags);

  0003d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00042	48 83 c0 03	 add	 rax, 3
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00051	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 414  :     return(0);

  00056	32 c0		 xor	 al, al

; 415  : }

  00058	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005c	c3		 ret	 0
?pla@@YAEGPEAUcpu@@E@Z ENDP				; pla
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?php@@YAEGPEAUcpu@@E@Z PROC				; php

; 403  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 404  :     setBreak(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setBreak@@YAXPEAE@Z	; setBreak

; 405  :     setBlank(&Cpu->Flags);

  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00029	48 83 c0 03	 add	 rax, 3
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ?setBlank@@YAXPEAE@Z	; setBlank

; 406  :     push(Cpu->Flags, Cpu);

  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0003a	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003f	0f b6 48 03	 movzx	 ecx, BYTE PTR [rax+3]
  00043	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 407  :     return(0);

  00048	32 c0		 xor	 al, al

; 408  : }

  0004a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004e	c3		 ret	 0
?php@@YAEGPEAUcpu@@E@Z ENDP				; php
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?pha@@YAEGPEAUcpu@@E@Z PROC				; pha

; 398  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 399  :     push(Cpu->A, Cpu);

  00013	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00020	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 400  :     return(0);

  00025	32 c0		 xor	 al, al

; 401  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?pha@@YAEGPEAUcpu@@E@Z ENDP				; pha
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ora@@YAEGPEAUcpu@@E@Z PROC				; ora

; 390  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 391  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 392  :     Cpu->A = Cpu->A | Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	0b c1		 or	 eax, ecx
  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003a	88 01		 mov	 BYTE PTR [rcx], al

; 393  :     setZero(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 394  :     setNegative(Cpu->A, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00069	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 395  :     return(0);

  0006e	32 c0		 xor	 al, al

; 396  : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
?ora@@YAEGPEAUcpu@@E@Z ENDP				; ora
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?nop@@YAEGPEAUcpu@@E@Z PROC				; nop

; 386  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 387  :     return(0);

  0000f	32 c0		 xor	 al, al

; 388  : }

  00011	c3		 ret	 0
?nop@@YAEGPEAUcpu@@E@Z ENDP				; nop
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?lsr@@YAEGPEAUcpu@@E@Z PROC				; lsr

; 360  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 361  :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 362  :     if(AddressMode == ACM)

  00018	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 52		 jne	 SHORT $LN2@lsr

; 363  :     {        
; 364  :         if(Cpu->A & 1)

  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00027	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 13		 je	 SHORT $LN4@lsr

; 365  :             setCarry(&Cpu->Flags);

  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00036	48 83 c0 03	 add	 rax, 3
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 366  :         else

  00042	eb 11		 jmp	 SHORT $LN5@lsr
$LN4@lsr:

; 367  :             clearCarry(&Cpu->Flags);

  00044	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00049	48 83 c0 03	 add	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@lsr:

; 368  :         Cpu->A = Cpu->A >> 1;

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005d	d1 f8		 sar	 eax, 1
  0005f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00064	88 01		 mov	 BYTE PTR [rcx], al

; 369  :         Value = Cpu->A;

  00066	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0006b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006e	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 370  :     }
; 371  :     else

  00072	eb 62		 jmp	 SHORT $LN3@lsr
$LN2@lsr:

; 372  :     {
; 373  :         Value = readCpu8(Address, Cpu);

  00074	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00079	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0007e	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00083	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 374  :         if(Value & 1)

  00087	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  0008c	83 e0 01	 and	 eax, 1
  0008f	85 c0		 test	 eax, eax
  00091	74 13		 je	 SHORT $LN6@lsr

; 375  :             setCarry(&Cpu->Flags);

  00093	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00098	48 83 c0 03	 add	 rax, 3
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 376  :         else

  000a4	eb 11		 jmp	 SHORT $LN7@lsr
$LN6@lsr:

; 377  :             clearCarry(&Cpu->Flags);

  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ab	48 83 c0 03	 add	 rax, 3
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN7@lsr:

; 378  :         Value = Value >> 1;

  000b7	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000bc	d1 f8		 sar	 eax, 1
  000be	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 379  :         writeCpu8(Value, Address, Cpu);

  000c2	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  000c7	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  000cc	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000d1	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@lsr:

; 380  :     }
; 381  :     setZero(Value, &Cpu->Flags);

  000d6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000db	48 83 c0 03	 add	 rax, 3
  000df	48 8b d0	 mov	 rdx, rax
  000e2	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000e7	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 382  :     setNegative(Value, &Cpu->Flags);

  000ec	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f1	48 83 c0 03	 add	 rax, 3
  000f5	48 8b d0	 mov	 rdx, rax
  000f8	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000fd	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 383  :     return(0);

  00102	32 c0		 xor	 al, al

; 384  : }

  00104	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00108	c3		 ret	 0
?lsr@@YAEGPEAUcpu@@E@Z ENDP				; lsr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ldy@@YAEGPEAUcpu@@E@Z PROC				; ldy

; 352  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 353  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 354  :     Cpu->Y = Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00030	88 48 02	 mov	 BYTE PTR [rax+2], cl

; 355  :     setZero(Value, &Cpu->Flags);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00038	48 83 c0 03	 add	 rax, 3
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00044	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 356  :     setNegative(Value, &Cpu->Flags);

  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	48 83 c0 03	 add	 rax, 3
  00052	48 8b d0	 mov	 rdx, rax
  00055	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0005a	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 357  :     return(0);

  0005f	32 c0		 xor	 al, al

; 358  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
?ldy@@YAEGPEAUcpu@@E@Z ENDP				; ldy
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ldx@@YAEGPEAUcpu@@E@Z PROC				; ldx

; 344  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 345  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 346  :     Cpu->X = Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00030	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 347  :     setZero(Value, &Cpu->Flags);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00038	48 83 c0 03	 add	 rax, 3
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00044	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 348  :     setNegative(Value, &Cpu->Flags);

  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	48 83 c0 03	 add	 rax, 3
  00052	48 8b d0	 mov	 rdx, rax
  00055	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0005a	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 349  :     return(0);

  0005f	32 c0		 xor	 al, al

; 350  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
?ldx@@YAEGPEAUcpu@@E@Z ENDP				; ldx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?lda@@YAEGPEAUcpu@@E@Z PROC				; lda

; 336  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 337  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 338  :     Cpu->A = Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00030	88 08		 mov	 BYTE PTR [rax], cl

; 339  :     setZero(Value, &Cpu->Flags);

  00032	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	48 83 c0 03	 add	 rax, 3
  0003b	48 8b d0	 mov	 rdx, rax
  0003e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00043	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 340  :     setNegative(Value, &Cpu->Flags);

  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	48 83 c0 03	 add	 rax, 3
  00051	48 8b d0	 mov	 rdx, rax
  00054	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00059	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 341  :     return(0);

  0005e	32 c0		 xor	 al, al

; 342  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
?lda@@YAEGPEAUcpu@@E@Z ENDP				; lda
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
ReturnAddress$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?jsr@@YAEGPEAUcpu@@E@Z PROC				; jsr

; 324  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 325  :     uint16 ReturnAddress = Cpu->PrgCounter - 1;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0001c	ff c8		 dec	 eax
  0001e	66 89 44 24 24	 mov	 WORD PTR ReturnAddress$[rsp], ax

; 326  :     uint8 HighByte = (uint8)(ReturnAddress >> 8);

  00023	0f b7 44 24 24	 movzx	 eax, WORD PTR ReturnAddress$[rsp]
  00028	c1 f8 08	 sar	 eax, 8
  0002b	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 327  :     uint8 LowByte = (uint8)ReturnAddress; 

  0002f	0f b6 44 24 24	 movzx	 eax, BYTE PTR ReturnAddress$[rsp]
  00034	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 328  : 
; 329  :     push(HighByte, Cpu);

  00038	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0003d	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR HighByte$[rsp]
  00042	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 330  :     push(LowByte, Cpu);

  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0004c	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00051	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 331  : 
; 332  :     Cpu->PrgCounter = Address;

  00056	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005b	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00060	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 333  :     return(0);

  00064	32 c0		 xor	 al, al

; 334  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
?jsr@@YAEGPEAUcpu@@E@Z ENDP				; jsr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?jmp@@YAEGPEAUcpu@@E@Z PROC				; jmp

; 319  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 320  :     Cpu->PrgCounter = Address;

  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR Cpu$[rsp]
  00014	0f b7 4c 24 08	 movzx	 ecx, WORD PTR Address$[rsp]
  00019	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 321  :     return(0);

  0001d	32 c0		 xor	 al, al

; 322  : }

  0001f	c3		 ret	 0
?jmp@@YAEGPEAUcpu@@E@Z ENDP				; jmp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?iny@@YAEGPEAUcpu@@E@Z PROC				; iny

; 312  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 313  :     ++Cpu->Y;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0001c	fe c0		 inc	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 314  :     setZero(Cpu->Y, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 315  :     setNegative(Cpu->Y, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 316  :     return(0);

  0005a	32 c0		 xor	 al, al

; 317  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?iny@@YAEGPEAUcpu@@E@Z ENDP				; iny
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?inx@@YAEGPEAUcpu@@E@Z PROC				; inx

; 305  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 306  :     ++Cpu->X;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0001c	fe c0		 inc	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 307  :     setZero(Cpu->X, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 308  :     setNegative(Cpu->X, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 309  :     return(0);

  0005a	32 c0		 xor	 al, al

; 310  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?inx@@YAEGPEAUcpu@@E@Z ENDP				; inx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?inc@@YAEGPEAUcpu@@E@Z PROC				; inc

; 297  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 298  :     uint8 Value = readCpu8(Address, Cpu) + 1;

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	0f b6 c0	 movzx	 eax, al
  00025	ff c0		 inc	 eax
  00027	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 299  :     writeCpu8(Value, Address, Cpu);

  0002b	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00030	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0003a	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 300  :     setZero(Value, &Cpu->Flags);

  0003f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00044	48 83 c0 03	 add	 rax, 3
  00048	48 8b d0	 mov	 rdx, rax
  0004b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 301  :     setNegative(Value, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00066	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 302  :     return(0);

  0006b	32 c0		 xor	 al, al

; 303  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
?inc@@YAEGPEAUcpu@@E@Z ENDP				; inc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?eor@@YAEGPEAUcpu@@E@Z PROC				; eor

; 289  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 290  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 291  :     Cpu->A = Cpu->A ^ Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	33 c1		 xor	 eax, ecx
  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003a	88 01		 mov	 BYTE PTR [rcx], al

; 292  :     setZero(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 293  :     setNegative(Cpu->A, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00069	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 294  :     return(0);

  0006e	32 c0		 xor	 al, al

; 295  : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
?eor@@YAEGPEAUcpu@@E@Z ENDP				; eor
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?dey@@YAEGPEAUcpu@@E@Z PROC				; dey

; 282  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 283  :     --Cpu->Y;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0001c	fe c8		 dec	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 284  :     setZero(Cpu->Y, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 285  :     setNegative(Cpu->Y, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 286  :     return(0);

  0005a	32 c0		 xor	 al, al

; 287  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?dey@@YAEGPEAUcpu@@E@Z ENDP				; dey
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?dex@@YAEGPEAUcpu@@E@Z PROC				; dex

; 275  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 276  :     --Cpu->X;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0001c	fe c8		 dec	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 277  :     setZero(Cpu->X, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 278  :     setNegative(Cpu->X, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 279  :     return(0);

  0005a	32 c0		 xor	 al, al

; 280  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?dex@@YAEGPEAUcpu@@E@Z ENDP				; dex
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?dec@@YAEGPEAUcpu@@E@Z PROC				; dec

; 267  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 268  :     uint8 Value = readCpu8(Address, Cpu) - 1;

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	0f b6 c0	 movzx	 eax, al
  00025	ff c8		 dec	 eax
  00027	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 269  :     writeCpu8(Value, Address, Cpu);

  0002b	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00030	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0003a	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 270  :     setZero(Value, &Cpu->Flags);

  0003f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00044	48 83 c0 03	 add	 rax, 3
  00048	48 8b d0	 mov	 rdx, rax
  0004b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 271  :     setNegative(Value, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00066	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 272  :     return(0);

  0006b	32 c0		 xor	 al, al

; 273  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
?dec@@YAEGPEAUcpu@@E@Z ENDP				; dec
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CmpValue$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?cpy@@YAEGPEAUcpu@@E@Z PROC				; cpy

; 253  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 254  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 255  : 
; 256  :     if(Cpu->Y >= Value)

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0002f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00034	3b c1		 cmp	 eax, ecx
  00036	7c 13		 jl	 SHORT $LN2@cpy

; 257  :         setCarry(&Cpu->Flags);

  00038	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003d	48 83 c0 03	 add	 rax, 3
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 258  :     else

  00049	eb 11		 jmp	 SHORT $LN3@cpy
$LN2@cpy:

; 259  :         clearCarry(&Cpu->Flags);

  0004b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00050	48 83 c0 03	 add	 rax, 3
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@cpy:

; 260  :     
; 261  :     uint8 CmpValue = Cpu->Y - Value;

  0005c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00061	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00065	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0006a	2b c1		 sub	 eax, ecx
  0006c	88 44 24 21	 mov	 BYTE PTR CmpValue$[rsp], al

; 262  :     setZero(CmpValue, &Cpu->Flags);

  00070	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00075	48 83 c0 03	 add	 rax, 3
  00079	48 8b d0	 mov	 rdx, rax
  0007c	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00081	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 263  :     setNegative(CmpValue, &Cpu->Flags);

  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0008b	48 83 c0 03	 add	 rax, 3
  0008f	48 8b d0	 mov	 rdx, rax
  00092	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00097	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 264  :     return(0);

  0009c	32 c0		 xor	 al, al

; 265  : }

  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
?cpy@@YAEGPEAUcpu@@E@Z ENDP				; cpy
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CmpValue$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?cpx@@YAEGPEAUcpu@@E@Z PROC				; cpx

; 239  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 240  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 241  : 
; 242  :     if(Cpu->X >= Value)

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0002f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00034	3b c1		 cmp	 eax, ecx
  00036	7c 13		 jl	 SHORT $LN2@cpx

; 243  :         setCarry(&Cpu->Flags);

  00038	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003d	48 83 c0 03	 add	 rax, 3
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 244  :     else

  00049	eb 11		 jmp	 SHORT $LN3@cpx
$LN2@cpx:

; 245  :         clearCarry(&Cpu->Flags);

  0004b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00050	48 83 c0 03	 add	 rax, 3
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@cpx:

; 246  :     
; 247  :     uint8 CmpValue = Cpu->X - Value;

  0005c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00061	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00065	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0006a	2b c1		 sub	 eax, ecx
  0006c	88 44 24 21	 mov	 BYTE PTR CmpValue$[rsp], al

; 248  :     setZero(CmpValue, &Cpu->Flags);

  00070	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00075	48 83 c0 03	 add	 rax, 3
  00079	48 8b d0	 mov	 rdx, rax
  0007c	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00081	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 249  :     setNegative(CmpValue, &Cpu->Flags);

  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0008b	48 83 c0 03	 add	 rax, 3
  0008f	48 8b d0	 mov	 rdx, rax
  00092	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00097	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 250  :     return(0);

  0009c	32 c0		 xor	 al, al

; 251  : }

  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
?cpx@@YAEGPEAUcpu@@E@Z ENDP				; cpx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CmpValue$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?cmp@@YAEGPEAUcpu@@E@Z PROC				; cmp

; 225  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 226  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 227  : 
; 228  :     if(Cpu->A >= Value)

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	3b c1		 cmp	 eax, ecx
  00035	7c 13		 jl	 SHORT $LN2@cmp

; 229  :         setCarry(&Cpu->Flags);

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003c	48 83 c0 03	 add	 rax, 3
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 230  :     else

  00048	eb 11		 jmp	 SHORT $LN3@cmp
$LN2@cmp:

; 231  :         clearCarry(&Cpu->Flags);

  0004a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004f	48 83 c0 03	 add	 rax, 3
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@cmp:

; 232  :     
; 233  :     uint8 CmpValue = Cpu->A - Value;

  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00060	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00063	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00068	2b c1		 sub	 eax, ecx
  0006a	88 44 24 21	 mov	 BYTE PTR CmpValue$[rsp], al

; 234  :     setZero(CmpValue, &Cpu->Flags);

  0006e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00073	48 83 c0 03	 add	 rax, 3
  00077	48 8b d0	 mov	 rdx, rax
  0007a	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  0007f	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 235  :     setNegative(CmpValue, &Cpu->Flags);

  00084	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00089	48 83 c0 03	 add	 rax, 3
  0008d	48 8b d0	 mov	 rdx, rax
  00090	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00095	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 236  :     return(0);

  0009a	32 c0		 xor	 al, al

; 237  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
?cmp@@YAEGPEAUcpu@@E@Z ENDP				; cmp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?clv@@YAEGPEAUcpu@@E@Z PROC				; clv

; 220  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 221  :     clearOverflow(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow

; 222  :     return(0);

  00024	32 c0		 xor	 al, al

; 223  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?clv@@YAEGPEAUcpu@@E@Z ENDP				; clv
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?cli@@YAEGPEAUcpu@@E@Z PROC				; cli

; 215  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     clearInterrupt(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearInterrupt@@YAXPEAE@Z ; clearInterrupt

; 217  :     return(0);

  00024	32 c0		 xor	 al, al

; 218  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?cli@@YAEGPEAUcpu@@E@Z ENDP				; cli
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?cld@@YAEGPEAUcpu@@E@Z PROC				; cld

; 210  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 211  :     clearDecimal(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearDecimal@@YAXPEAE@Z ; clearDecimal

; 212  :     return(0);

  00024	32 c0		 xor	 al, al

; 213  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?cld@@YAEGPEAUcpu@@E@Z ENDP				; cld
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?clc@@YAEGPEAUcpu@@E@Z PROC				; clc

; 205  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 206  :     clearCarry(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry

; 207  :     return(0);

  00024	32 c0		 xor	 al, al

; 208  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?clc@@YAEGPEAUcpu@@E@Z ENDP				; clc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bvs@@YAEGPEAUcpu@@E@Z PROC				; bvs

; 192  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 193  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 194  :     if(isBitSet(OVERFLOW_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 40		 mov	 cl, 64			; 00000040H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@bvs

; 195  :     {
; 196  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 197  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bvs

; 198  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bvs:

; 199  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bvs:

; 200  :     }   
; 201  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 202  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bvs@@YAEGPEAUcpu@@E@Z ENDP				; bvs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bvc@@YAEGPEAUcpu@@E@Z PROC				; bvc

; 179  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 180  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 181  :     if(!isBitSet(OVERFLOW_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 40		 mov	 cl, 64			; 00000040H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3b		 jne	 SHORT $LN2@bvc

; 182  :     {
; 183  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 184  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bvc

; 185  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bvc:

; 186  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bvc:

; 187  :     }   
; 188  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 189  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bvc@@YAEGPEAUcpu@@E@Z ENDP				; bvc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?brk@@YAEGPEAUcpu@@E@Z PROC				; brk

; 163  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 164  :     uint8 HighByte = (uint8)(Cpu->PrgCounter >> 8);

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0001c	c1 f8 08	 sar	 eax, 8
  0001f	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 165  :     uint8 LowByte = (uint8)Cpu->PrgCounter; 

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  0002c	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 166  :     push(HighByte, Cpu);

  00030	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR HighByte$[rsp]
  0003a	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 167  :     push(LowByte, Cpu);

  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00044	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00049	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 168  : 
; 169  :     setBlank(&Cpu->Flags);

  0004e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00053	48 83 c0 03	 add	 rax, 3
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ?setBlank@@YAXPEAE@Z	; setBlank

; 170  :     setBreak(&Cpu->Flags);

  0005f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00064	48 83 c0 03	 add	 rax, 3
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?setBreak@@YAXPEAE@Z	; setBreak

; 171  :     push(Cpu->Flags, Cpu);

  00070	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00075	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0007a	0f b6 48 03	 movzx	 ecx, BYTE PTR [rax+3]
  0007e	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 172  :     setInterrupt(&Cpu->Flags);

  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00088	48 83 c0 03	 add	 rax, 3
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 173  : 
; 174  :     Cpu->PrgCounter = readCpu16(IRQ_BRK_VEC, Cpu);

  00094	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00099	66 b9 fe ff	 mov	 cx, 65534		; 0000fffeH
  0009d	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  000a2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000a7	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 175  :     return(0);

  000ab	32 c0		 xor	 al, al

; 176  : }

  000ad	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b1	c3		 ret	 0
?brk@@YAEGPEAUcpu@@E@Z ENDP				; brk
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bpl@@YAEGPEAUcpu@@E@Z PROC				; bpl

; 150  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 151  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 152  :     if(!isBitSet(NEGATIVE_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 80		 mov	 cl, 128			; 00000080H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3b		 jne	 SHORT $LN2@bpl

; 153  :     {
; 154  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 155  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bpl

; 156  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bpl:

; 157  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bpl:

; 158  :     }   
; 159  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 160  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bpl@@YAEGPEAUcpu@@E@Z ENDP				; bpl
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bne@@YAEGPEAUcpu@@E@Z PROC				; bne

; 137  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 138  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 139  :     if(!isBitSet(ZERO_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 02		 mov	 cl, 2
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3b		 jne	 SHORT $LN2@bne

; 140  :     {
; 141  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 142  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bne

; 143  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bne:

; 144  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bne:

; 145  :     }   
; 146  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 147  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bne@@YAEGPEAUcpu@@E@Z ENDP				; bne
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bmi@@YAEGPEAUcpu@@E@Z PROC				; bmi

; 124  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 125  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 126  :     if(isBitSet(NEGATIVE_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 80		 mov	 cl, 128			; 00000080H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@bmi

; 127  :     {
; 128  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 129  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bmi

; 130  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bmi:

; 131  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bmi:

; 132  :     }   
; 133  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 134  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bmi@@YAEGPEAUcpu@@E@Z ENDP				; bmi
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bit@@YAEGPEAUcpu@@E@Z PROC				; bit

; 112  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 113  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 114  :     if(Value & (1 << 6))

  00026	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  0002b	83 e0 40	 and	 eax, 64			; 00000040H
  0002e	85 c0		 test	 eax, eax
  00030	74 13		 je	 SHORT $LN2@bit

; 115  :         setOverflow(&Cpu->Flags);

  00032	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	48 83 c0 03	 add	 rax, 3
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 116  :     else

  00043	eb 11		 jmp	 SHORT $LN3@bit
$LN2@bit:

; 117  :         clearOverflow(&Cpu->Flags);

  00045	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004a	48 83 c0 03	 add	 rax, 3
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN3@bit:

; 118  :     setNegative(Value, &Cpu->Flags);

  00056	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005b	48 83 c0 03	 add	 rax, 3
  0005f	48 8b d0	 mov	 rdx, rax
  00062	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00067	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 119  :     setZero(Cpu->A & Value, &Cpu->Flags);

  0006c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00071	48 83 c0 03	 add	 rax, 3
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0007a	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0007d	0f b6 54 24 20	 movzx	 edx, BYTE PTR Value$[rsp]
  00082	23 ca		 and	 ecx, edx
  00084	48 8b d0	 mov	 rdx, rax
  00087	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 120  :     return(0);

  0008c	32 c0		 xor	 al, al

; 121  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
?bit@@YAEGPEAUcpu@@E@Z ENDP				; bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?beq@@YAEGPEAUcpu@@E@Z PROC				; beq

; 99   : {   

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 100  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 101  :     if(isBitSet(ZERO_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 02		 mov	 cl, 2
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@beq

; 102  :     {
; 103  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 104  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@beq

; 105  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@beq:

; 106  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@beq:

; 107  :     }   
; 108  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 109  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?beq@@YAEGPEAUcpu@@E@Z ENDP				; beq
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bcs@@YAEGPEAUcpu@@E@Z PROC				; bcs

; 87   : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 88   :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 89   :     if(isBitSet(CARRY_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@bcs

; 90   :     {
; 91   :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 92   :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bcs

; 93   :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bcs:

; 94   :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bcs:

; 95   :     }   
; 96   :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 97   : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bcs@@YAEGPEAUcpu@@E@Z ENDP				; bcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Test$1 = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bcc@@YAEGPEAUcpu@@E@Z PROC				; bcc

; 71   : {

$LN6:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 72   :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 73   :     
; 74   :     if(!isBitSet(CARRY_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3d		 jne	 SHORT $LN2@bcc

; 75   :     {
; 76   :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 77   :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN4@bcc

; 78   :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN4@bcc:

; 79   :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 80   :     }
; 81   :     else

  00067	eb 05		 jmp	 SHORT $LN3@bcc
$LN2@bcc:

; 82   :         uint8 Test =0;

  00069	c6 44 24 21 00	 mov	 BYTE PTR Test$1[rsp], 0
$LN3@bcc:

; 83   :     return(AddCycles);

  0006e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 84   : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
?bcc@@YAEGPEAUcpu@@E@Z ENDP				; bcc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?asl@@YAEGPEAUcpu@@E@Z PROC				; asl

; 44   : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 45   :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 46   :     if(AddressMode == ACM)

  00018	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 51		 jne	 SHORT $LN2@asl

; 47   :     {        
; 48   :         if(Cpu->A & (1 << 7))

  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00027	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002a	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0002f	85 c0		 test	 eax, eax
  00031	74 13		 je	 SHORT $LN4@asl

; 49   :             setCarry(&Cpu->Flags);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00038	48 83 c0 03	 add	 rax, 3
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 50   :         else

  00044	eb 11		 jmp	 SHORT $LN5@asl
$LN4@asl:

; 51   :             clearCarry(&Cpu->Flags);

  00046	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004b	48 83 c0 03	 add	 rax, 3
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@asl:

; 52   :         Value = Cpu->A << 1;

  00057	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005f	d1 e0		 shl	 eax, 1
  00061	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 53   :         Cpu->A = Value;

  00065	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0006a	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0006f	88 08		 mov	 BYTE PTR [rax], cl

; 54   :     }
; 55   :     else

  00071	eb 64		 jmp	 SHORT $LN3@asl
$LN2@asl:

; 56   :     {
; 57   :         Value = readCpu8(Address, Cpu);

  00073	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00078	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0007d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00082	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 58   :         if(Value & (1 << 7))

  00086	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  0008b	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00090	85 c0		 test	 eax, eax
  00092	74 13		 je	 SHORT $LN6@asl

; 59   :             setCarry(&Cpu->Flags);

  00094	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00099	48 83 c0 03	 add	 rax, 3
  0009d	48 8b c8	 mov	 rcx, rax
  000a0	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 60   :         else

  000a5	eb 11		 jmp	 SHORT $LN7@asl
$LN6@asl:

; 61   :             clearCarry(&Cpu->Flags);

  000a7	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ac	48 83 c0 03	 add	 rax, 3
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN7@asl:

; 62   :         Value = Value << 1;

  000b8	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000bd	d1 e0		 shl	 eax, 1
  000bf	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 63   :         writeCpu8(Value, Address, Cpu);

  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  000c8	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  000cd	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000d2	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@asl:

; 64   :     }
; 65   :     setZero(Value, &Cpu->Flags);

  000d7	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000dc	48 83 c0 03	 add	 rax, 3
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000e8	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 66   :     setNegative(Value, &Cpu->Flags);

  000ed	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f2	48 83 c0 03	 add	 rax, 3
  000f6	48 8b d0	 mov	 rdx, rax
  000f9	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000fe	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 67   :     return(0);

  00103	32 c0		 xor	 al, al

; 68   : }

  00105	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00109	c3		 ret	 0
?asl@@YAEGPEAUcpu@@E@Z ENDP				; asl
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?AND@@YAEGPEAUcpu@@E@Z PROC				; AND

; 35   : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 36   :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 37   :     Cpu->A = Cpu->A & Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	23 c1		 and	 eax, ecx
  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003a	88 01		 mov	 BYTE PTR [rcx], al

; 38   :     setZero(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 39   :     setNegative(Cpu->A, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00069	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 40   :     return(0);

  0006e	32 c0		 xor	 al, al

; 41   : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
?AND@@YAEGPEAUcpu@@E@Z ENDP				; AND
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
A$ = 32
B$ = 33
C$ = 34
Sum$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?adc@@YAEGPEAUcpu@@E@Z PROC				; adc

; 9    : {

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 10   :     uint8 A = Cpu->A;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001b	88 44 24 20	 mov	 BYTE PTR A$[rsp], al

; 11   :     uint8 B = readCpu8(Address, Cpu);

  0001f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00024	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00029	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0002e	88 44 24 21	 mov	 BYTE PTR B$[rsp], al

; 12   :     uint8 C = isBitSet(CARRY_BIT, Cpu->Flags);

  00032	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  0003b	b1 01		 mov	 cl, 1
  0003d	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00042	88 44 24 22	 mov	 BYTE PTR C$[rsp], al

; 13   : 
; 14   :     uint16 Sum = (uint16)A + (uint16)B + (uint16)C;

  00046	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  0004b	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  00050	03 c1		 add	 eax, ecx
  00052	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR C$[rsp]
  00057	03 c1		 add	 eax, ecx
  00059	66 89 44 24 24	 mov	 WORD PTR Sum$[rsp], ax

; 15   : 
; 16   :     // Overflow check, taken from the web. One day find out how this works
; 17   :     if(((A ^ Sum) & (B ^ Sum) & 0x80) == 0x80)

  0005e	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  00063	0f b7 4c 24 24	 movzx	 ecx, WORD PTR Sum$[rsp]
  00068	33 c1		 xor	 eax, ecx
  0006a	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  0006f	0f b7 54 24 24	 movzx	 edx, WORD PTR Sum$[rsp]
  00074	33 ca		 xor	 ecx, edx
  00076	23 c1		 and	 eax, ecx
  00078	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0007d	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00082	75 13		 jne	 SHORT $LN2@adc

; 18   :         setOverflow(&Cpu->Flags);

  00084	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00089	48 83 c0 03	 add	 rax, 3
  0008d	48 8b c8	 mov	 rcx, rax
  00090	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 19   :     else

  00095	eb 11		 jmp	 SHORT $LN3@adc
$LN2@adc:

; 20   :         clearOverflow(&Cpu->Flags);

  00097	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0009c	48 83 c0 03	 add	 rax, 3
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN3@adc:

; 21   : 
; 22   :     if(Sum & 0x100)

  000a8	0f b7 44 24 24	 movzx	 eax, WORD PTR Sum$[rsp]
  000ad	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000b2	85 c0		 test	 eax, eax
  000b4	74 13		 je	 SHORT $LN4@adc

; 23   :         setCarry(&Cpu->Flags);

  000b6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000bb	48 83 c0 03	 add	 rax, 3
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 24   :     else

  000c7	eb 11		 jmp	 SHORT $LN5@adc
$LN4@adc:

; 25   :         clearCarry(&Cpu->Flags);

  000c9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ce	48 83 c0 03	 add	 rax, 3
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@adc:

; 26   : 
; 27   :     setZero(Sum, &Cpu->Flags);

  000da	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000df	48 83 c0 03	 add	 rax, 3
  000e3	48 8b d0	 mov	 rdx, rax
  000e6	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  000eb	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 28   :     setNegative(Sum, &Cpu->Flags);

  000f0	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f5	48 83 c0 03	 add	 rax, 3
  000f9	48 8b d0	 mov	 rdx, rax
  000fc	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00101	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 29   : 
; 30   :     Cpu->A = (uint8)Sum;

  00106	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0010b	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00110	88 08		 mov	 BYTE PTR [rax], cl

; 31   :     return(0);

  00112	32 c0		 xor	 al, al

; 32   : }

  00114	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00118	c3		 ret	 0
?adc@@YAEGPEAUcpu@@E@Z ENDP				; adc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?crossedPageCheck@@YAHGG@Z
_TEXT	SEGMENT
tv69 = 0
Before$ = 32
Now$ = 40
?crossedPageCheck@@YAHGG@Z PROC				; crossedPageCheck, COMDAT

; 280  : inline bool32 crossedPageCheck(uint16 Before, uint16 Now) { return((Before & 0xFF00) != (Now & 0xFF00));}

$LN5:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 18	 sub	 rsp, 24
  0000e	0f b7 44 24 20	 movzx	 eax, WORD PTR Before$[rsp]
  00013	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00018	0f b7 4c 24 28	 movzx	 ecx, WORD PTR Now$[rsp]
  0001d	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00023	3b c1		 cmp	 eax, ecx
  00025	74 09		 je	 SHORT $LN3@crossedPag
  00027	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv69[rsp], 1
  0002e	eb 07		 jmp	 SHORT $LN4@crossedPag
$LN3@crossedPag:
  00030	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
$LN4@crossedPag:
  00037	8b 04 24	 mov	 eax, DWORD PTR tv69[rsp]
  0003a	48 83 c4 18	 add	 rsp, 24
  0003e	c3		 ret	 0
?crossedPageCheck@@YAHGG@Z ENDP				; crossedPageCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?isBitSet@@YAHEE@Z
_TEXT	SEGMENT
Bit$ = 8
Flags$ = 16
?isBitSet@@YAHEE@Z PROC					; isBitSet, COMDAT

; 279  : inline bool32 isBitSet(uint8 Bit, uint8 Flags) { return(Bit & Flags); }

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00008	0f b6 44 24 08	 movzx	 eax, BYTE PTR Bit$[rsp]
  0000d	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR Flags$[rsp]
  00012	23 c1		 and	 eax, ecx
  00014	c3		 ret	 0
?isBitSet@@YAHEE@Z ENDP					; isBitSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setNegative@@YAXEPEAE@Z
_TEXT	SEGMENT
Value$ = 8
Flags$ = 16
?setNegative@@YAXEPEAE@Z PROC				; setNegative, COMDAT

; 273  : {  

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 274  :     if(Value >= 0x00 && Value <= 0x7F)

  00009	0f b6 44 24 08	 movzx	 eax, BYTE PTR Value$[rsp]
  0000e	85 c0		 test	 eax, eax
  00010	7c 1f		 jl	 SHORT $LN2@setNegativ
  00012	0f b6 44 24 08	 movzx	 eax, BYTE PTR Value$[rsp]
  00017	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0001a	7f 15		 jg	 SHORT $LN2@setNegativ

; 275  :         *Flags = *Flags & ~NEGATIVE_BIT; // clear negative flag

  0001c	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  00021	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00024	0f ba f0 07	 btr	 eax, 7
  00028	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  0002d	88 01		 mov	 BYTE PTR [rcx], al

; 276  :     else

  0002f	eb 13		 jmp	 SHORT $LN3@setNegativ
$LN2@setNegativ:

; 277  :         *Flags = *Flags | NEGATIVE_BIT; // set negative flag

  00031	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  00036	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00039	0f ba e8 07	 bts	 eax, 7
  0003d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  00042	88 01		 mov	 BYTE PTR [rcx], al
$LN3@setNegativ:

; 278  : }

  00044	c3		 ret	 0
?setNegative@@YAXEPEAE@Z ENDP				; setNegative
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setZero@@YAXEPEAE@Z
_TEXT	SEGMENT
Value$ = 8
Flags$ = 16
?setZero@@YAXEPEAE@Z PROC				; setZero, COMDAT

; 266  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 267  :     if(Value == 0x00)

  00009	0f b6 44 24 08	 movzx	 eax, BYTE PTR Value$[rsp]
  0000e	85 c0		 test	 eax, eax
  00010	75 14		 jne	 SHORT $LN2@setZero

; 268  :         *Flags = *Flags | ZERO_BIT;

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  00017	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001a	83 c8 02	 or	 eax, 2
  0001d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  00022	88 01		 mov	 BYTE PTR [rcx], al

; 269  :     else

  00024	eb 12		 jmp	 SHORT $LN3@setZero
$LN2@setZero:

; 270  :         *Flags = *Flags & ~ZERO_BIT;

  00026	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	83 e0 fd	 and	 eax, -3
  00031	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  00036	88 01		 mov	 BYTE PTR [rcx], al
$LN3@setZero:

; 271  : }

  00038	c3		 ret	 0
?setZero@@YAXEPEAE@Z ENDP				; setZero
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearOverflow@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearOverflow@@YAXPEAE@Z PROC				; clearOverflow, COMDAT

; 264  : inline void clearOverflow(uint8 *Flags)  { *Flags = *Flags & ~OVERFLOW_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearOverflow@@YAXPEAE@Z ENDP				; clearOverflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setOverflow@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setOverflow@@YAXPEAE@Z PROC				; setOverflow, COMDAT

; 263  : inline void setOverflow(uint8 *Flags)    { *Flags = *Flags | OVERFLOW_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 40	 or	 eax, 64			; 00000040H
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setOverflow@@YAXPEAE@Z ENDP				; setOverflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setBlank@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setBlank@@YAXPEAE@Z PROC				; setBlank, COMDAT

; 261  : inline void setBlank(uint8 *Flags)       { *Flags = *Flags | BLANK_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 20	 or	 eax, 32			; 00000020H
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setBlank@@YAXPEAE@Z ENDP				; setBlank
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearBreak@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearBreak@@YAXPEAE@Z PROC				; clearBreak, COMDAT

; 260  : inline void clearBreak(uint8 *Flags)     { *Flags = *Flags & ~BREAK_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 ef	 and	 eax, -17
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearBreak@@YAXPEAE@Z ENDP				; clearBreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setBreak@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setBreak@@YAXPEAE@Z PROC				; setBreak, COMDAT

; 259  : inline void setBreak(uint8 *Flags)       { *Flags = *Flags | BREAK_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 10	 or	 eax, 16
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setBreak@@YAXPEAE@Z ENDP				; setBreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearDecimal@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearDecimal@@YAXPEAE@Z PROC				; clearDecimal, COMDAT

; 258  : inline void clearDecimal(uint8 *Flags)   { *Flags = *Flags & ~DECIMAL_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 f7	 and	 eax, -9
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearDecimal@@YAXPEAE@Z ENDP				; clearDecimal
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setDecimal@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setDecimal@@YAXPEAE@Z PROC				; setDecimal, COMDAT

; 257  : inline void setDecimal(uint8 *Flags)     { *Flags = *Flags | DECIMAL_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 08	 or	 eax, 8
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setDecimal@@YAXPEAE@Z ENDP				; setDecimal
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearInterrupt@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearInterrupt@@YAXPEAE@Z PROC				; clearInterrupt, COMDAT

; 256  : inline void clearInterrupt(uint8 *Flags) { *Flags = *Flags & ~INTERRUPT_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 fb	 and	 eax, -5
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearInterrupt@@YAXPEAE@Z ENDP				; clearInterrupt
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setInterrupt@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setInterrupt@@YAXPEAE@Z PROC				; setInterrupt, COMDAT

; 255  : inline void setInterrupt(uint8 *Flags)   { *Flags = *Flags | INTERRUPT_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 04	 or	 eax, 4
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setInterrupt@@YAXPEAE@Z ENDP				; setInterrupt
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearCarry@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearCarry@@YAXPEAE@Z PROC				; clearCarry, COMDAT

; 254  : inline void clearCarry(uint8 *Flags)     { *Flags = *Flags & ~CARRY_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 fe	 and	 eax, -2
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearCarry@@YAXPEAE@Z ENDP				; clearCarry
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setCarry@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setCarry@@YAXPEAE@Z PROC				; setCarry, COMDAT

; 253  : inline void setCarry(uint8 *Flags)       { *Flags = *Flags | CARRY_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 01	 or	 eax, 1
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setCarry@@YAXPEAE@Z ENDP				; setCarry
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
Value$ = 32
Cpu$ = 64
?pop@@YAEPEAUcpu@@@Z PROC				; pop

; 238  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 239  :     ++Cpu->StackPtr;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR Cpu$[rsp]
  0000e	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00012	fe c0		 inc	 al
  00014	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00019	88 41 04	 mov	 BYTE PTR [rcx+4], al

; 240  :     uint8 Value = readCpu8((uint16)Cpu->StackPtr | STACK_ADDRESS, Cpu);

  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR Cpu$[rsp]
  00021	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00025	0f ba e8 08	 bts	 eax, 8
  00029	48 8b 54 24 40	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0002e	0f b7 c8	 movzx	 ecx, ax
  00031	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00036	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 241  :     return(Value);

  0003a	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]

; 242  : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
?pop@@YAEPEAUcpu@@@Z ENDP				; pop
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
Byte$ = 48
Cpu$ = 56
?push@@YAXEPEAUcpu@@@Z PROC				; push

; 233  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 234  :     writeCpu8(Byte, (uint16)Cpu->StackPtr | STACK_ADDRESS, Cpu);

  0000d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00012	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00016	0f ba e8 08	 bts	 eax, 8
  0001a	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  0001f	0f b7 d0	 movzx	 edx, ax
  00022	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00027	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 235  :     --Cpu->StackPtr;  

  0002c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00031	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00035	fe c8		 dec	 al
  00037	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003c	88 41 04	 mov	 BYTE PTR [rcx+4], al

; 236  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?push@@YAXEPEAUcpu@@@Z ENDP				; push
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
Byte2Adrs$ = 36
NewAddress$ = 40
Address$ = 64
Cpu$ = 72
?bugReadCpu16@@YAGGPEAUcpu@@@Z PROC			; bugReadCpu16

; 220  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 221  :     // NOTE: This is a bug in the nes 6502 that will wrap the value instead of going to new page.
; 222  :     //       Only happens with indirect addressing.
; 223  :     
; 224  :     uint8 LowByte = readCpu8(Address, Cpu);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00013	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00018	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0001d	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 225  :     uint16 Byte2Adrs = (Address & 0xFF00) | (uint16)((uint8)(Address + 1));

  00021	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00026	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0002b	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00030	ff c1		 inc	 ecx
  00032	0f b6 c9	 movzx	 ecx, cl
  00035	0b c1		 or	 eax, ecx
  00037	66 89 44 24 24	 mov	 WORD PTR Byte2Adrs$[rsp], ax

; 226  :     uint8 HighByte = readCpu8(Byte2Adrs, Cpu);

  0003c	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00041	0f b7 4c 24 24	 movzx	 ecx, WORD PTR Byte2Adrs$[rsp]
  00046	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0004b	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 227  :         
; 228  :     uint16 NewAddress = (HighByte << 8) | LowByte;

  0004f	0f b6 44 24 20	 movzx	 eax, BYTE PTR HighByte$[rsp]
  00054	c1 e0 08	 shl	 eax, 8
  00057	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  0005c	0b c1		 or	 eax, ecx
  0005e	66 89 44 24 28	 mov	 WORD PTR NewAddress$[rsp], ax

; 229  :     return(NewAddress);

  00063	0f b7 44 24 28	 movzx	 eax, WORD PTR NewAddress$[rsp]

; 230  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
?bugReadCpu16@@YAGGPEAUcpu@@@Z ENDP			; bugReadCpu16
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
NewAddress$ = 36
Address$ = 64
Cpu$ = 72
?readCpu16@@YAGGPEAUcpu@@@Z PROC			; readCpu16

; 210  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 211  :     // NOTE: Little Endian
; 212  :     uint8 LowByte = readCpu8(Address, Cpu);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00013	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00018	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0001d	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 213  :     uint8 HighByte = readCpu8(Address+1, Cpu);

  00021	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00026	ff c0		 inc	 eax
  00028	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0002d	0f b7 c8	 movzx	 ecx, ax
  00030	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00035	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 214  :         
; 215  :     uint16 NewAddress = (HighByte << 8) | LowByte;

  00039	0f b6 44 24 20	 movzx	 eax, BYTE PTR HighByte$[rsp]
  0003e	c1 e0 08	 shl	 eax, 8
  00041	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00046	0b c1		 or	 eax, ecx
  00048	66 89 44 24 24	 mov	 WORD PTR NewAddress$[rsp], ax

; 216  :     return(NewAddress);

  0004d	0f b7 44 24 24	 movzx	 eax, WORD PTR NewAddress$[rsp]

; 217  : }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
?readCpu16@@YAGGPEAUcpu@@@Z ENDP			; readCpu16
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
BtnValue$1 = 32
Bit0$2 = 33
OamAddress$3 = 34
Reg1Value$4 = 35
Reg2Value$5 = 36
index$6 = 40
NewAddress$7 = 44
Byte$ = 64
Address$ = 72
Cpu$ = 80
?writeCpu8@@YAXEGPEAUcpu@@@Z PROC			; writeCpu8

; 131  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 132  :     Address = cpuMemoryMirror(Address);

  00012	0f b7 4c 24 48	 movzx	 ecx, WORD PTR Address$[rsp]
  00017	e8 00 00 00 00	 call	 ?cpuMemoryMirror@@YAGG@Z ; cpuMemoryMirror
  0001c	66 89 44 24 48	 mov	 WORD PTR Address$[rsp], ax

; 133  : 
; 134  :     if(Address == 0x2002)

  00021	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00026	3d 02 20 00 00	 cmp	 eax, 8194		; 00002002H
  0002b	75 12		 jne	 SHORT $LN5@writeCpu8

; 135  :         Assert(0);

  0002d	33 c0		 xor	 eax, eax
  0002f	83 f8 01	 cmp	 eax, 1
  00032	74 0b		 je	 SHORT $LN6@writeCpu8
  00034	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN6@writeCpu8:
$LN5@writeCpu8:

; 136  :     
; 137  :     write8(Byte, Address, Cpu->MemoryBase);

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00044	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00048	0f b7 54 24 48	 movzx	 edx, WORD PTR Address$[rsp]
  0004d	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00052	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8

; 138  : 
; 139  :     if(Address == 0x2005) // Scroll address

  00057	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  0005c	3d 05 20 00 00	 cmp	 eax, 8197		; 00002005H
  00061	75 0a		 jne	 SHORT $LN7@writeCpu8

; 140  :         ScrollAdrsChange = true;

  00063	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ScrollAdrsChange@@3HA, 1 ; ScrollAdrsChange
$LN7@writeCpu8:

; 141  :     if(Address == 0x2006) // Writing to ppu io address register

  0006d	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00072	3d 06 20 00 00	 cmp	 eax, 8198		; 00002006H
  00077	75 0a		 jne	 SHORT $LN8@writeCpu8

; 142  :         VRamAdrsChange = true;

  00079	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?VRamAdrsChange@@3HA, 1 ; VRamAdrsChange
$LN8@writeCpu8:

; 143  :     if(Address == 0x2007) // Write to IO for ppu. Happens after two writes to 0x2006

  00083	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00088	3d 07 20 00 00	 cmp	 eax, 8199		; 00002007H
  0008d	75 0a		 jne	 SHORT $LN9@writeCpu8

; 144  :         IOWriteFromCpu = true;

  0008f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?IOWriteFromCpu@@3HA, 1 ; IOWriteFromCpu
$LN9@writeCpu8:

; 145  :     
; 146  : 
; 147  :     if(Address == 0x2000)

  00099	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  0009e	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000a3	75 27		 jne	 SHORT $LN10@writeCpu8

; 148  :     {
; 149  :         Cpu->PpuVramIO->TempVRamAdrs |= (Byte & 3) << 10;

  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  000aa	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ae	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR Byte$[rsp]
  000b3	83 e1 03	 and	 ecx, 3
  000b6	c1 e1 0a	 shl	 ecx, 10
  000b9	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  000bd	0b c1		 or	 eax, ecx
  000bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000c4	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000c8	66 89 41 02	 mov	 WORD PTR [rcx+2], ax
$LN10@writeCpu8:

; 150  :     }
; 151  : 
; 152  :     
; 153  :     if(Address == 0x2004) // OAM data

  000cc	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  000d1	3d 04 20 00 00	 cmp	 eax, 8196		; 00002004H
  000d6	75 0a		 jne	 SHORT $LN11@writeCpu8

; 154  :         OamDataChange = true;

  000d8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?OamDataChange@@3HA, 1 ; OamDataChange
$LN11@writeCpu8:

; 155  : 
; 156  :     // NOTE: OAM DMA Write
; 157  :     if(Address == 0x4014)

  000e2	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  000e7	3d 14 40 00 00	 cmp	 eax, 16404		; 00004014H
  000ec	0f 85 8f 00 00
	00		 jne	 $LN12@writeCpu8

; 158  :     {
; 159  :         uint8 OamAddress = read8(0x2003, Cpu->MemoryBase);

  000f2	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f7	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000fb	66 b9 03 20	 mov	 cx, 8195		; 00002003H
  000ff	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00104	88 44 24 22	 mov	 BYTE PTR OamAddress$3[rsp], al

; 160  : 
; 161  :         if(OamData == 0)

  00108	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?OamData@@3PEAEEA, 0
  00110	75 12		 jne	 SHORT $LN13@writeCpu8

; 162  :         {
; 163  :             Assert(0);

  00112	33 c0		 xor	 eax, eax
  00114	83 f8 01	 cmp	 eax, 1
  00117	74 0b		 je	 SHORT $LN14@writeCpu8
  00119	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN14@writeCpu8:
$LN13@writeCpu8:

; 164  :         }
; 165  :         
; 166  :         for(uint16 index = OamAddress; index < OAM_SIZE; ++index)

  00124	0f b6 44 24 22	 movzx	 eax, BYTE PTR OamAddress$3[rsp]
  00129	66 89 44 24 28	 mov	 WORD PTR index$6[rsp], ax
  0012e	eb 0d		 jmp	 SHORT $LN4@writeCpu8
$LN2@writeCpu8:
  00130	0f b7 44 24 28	 movzx	 eax, WORD PTR index$6[rsp]
  00135	66 ff c0	 inc	 ax
  00138	66 89 44 24 28	 mov	 WORD PTR index$6[rsp], ax
$LN4@writeCpu8:
  0013d	0f b7 44 24 28	 movzx	 eax, WORD PTR index$6[rsp]
  00142	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00147	7d 38		 jge	 SHORT $LN3@writeCpu8

; 167  :         {
; 168  :             uint16 NewAddress = (Byte << 8) | index; 

  00149	0f b6 44 24 40	 movzx	 eax, BYTE PTR Byte$[rsp]
  0014e	c1 e0 08	 shl	 eax, 8
  00151	0f b7 4c 24 28	 movzx	 ecx, WORD PTR index$6[rsp]
  00156	0b c1		 or	 eax, ecx
  00158	66 89 44 24 2c	 mov	 WORD PTR NewAddress$7[rsp], ax

; 169  :             OamData[index] = read8(NewAddress, Cpu->MemoryBase);

  0015d	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00162	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00166	0f b7 4c 24 2c	 movzx	 ecx, WORD PTR NewAddress$7[rsp]
  0016b	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00170	0f b7 4c 24 28	 movzx	 ecx, WORD PTR index$6[rsp]
  00175	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?OamData@@3PEAEEA
  0017c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 170  :         }

  0017f	eb af		 jmp	 SHORT $LN2@writeCpu8
$LN3@writeCpu8:
$LN12@writeCpu8:

; 171  :     }
; 172  :     
; 173  :     // Input
; 174  :     if(Address == 0x4016 || Address == 0x4017)

  00181	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00186	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  0018b	74 10		 je	 SHORT $LN16@writeCpu8
  0018d	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00192	3d 17 40 00 00	 cmp	 eax, 16407		; 00004017H
  00197	0f 85 e9 00 00
	00		 jne	 $LN15@writeCpu8
$LN16@writeCpu8:

; 175  :     {
; 176  :         uint8 Reg1Value = read8(0x4016, Cpu->MemoryBase);

  0019d	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  001a2	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001a6	66 b9 16 40	 mov	 cx, 16406		; 00004016H
  001aa	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  001af	88 44 24 23	 mov	 BYTE PTR Reg1Value$4[rsp], al

; 177  :         uint8 Reg2Value = read8(0x4017, Cpu->MemoryBase);

  001b3	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  001b8	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001bc	66 b9 17 40	 mov	 cx, 16407		; 00004017H
  001c0	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  001c5	88 44 24 24	 mov	 BYTE PTR Reg2Value$5[rsp], al

; 178  : 
; 179  :         uint8 Bit0 = (Reg1Value | Reg2Value) & 1;

  001c9	0f b6 44 24 23	 movzx	 eax, BYTE PTR Reg1Value$4[rsp]
  001ce	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Reg2Value$5[rsp]
  001d3	0b c1		 or	 eax, ecx
  001d5	83 e0 01	 and	 eax, 1
  001d8	88 44 24 21	 mov	 BYTE PTR Bit0$2[rsp], al

; 180  : 
; 181  :         if(Bit0 == 0)

  001dc	0f b6 44 24 21	 movzx	 eax, BYTE PTR Bit0$2[rsp]
  001e1	85 c0		 test	 eax, eax
  001e3	75 2b		 jne	 SHORT $LN17@writeCpu8

; 182  :         {
; 183  :             if(Cpu->PadStrobe)

  001e5	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  001ea	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  001ee	74 12		 je	 SHORT $LN19@writeCpu8

; 184  :             {
; 185  :                 Cpu->Pad1CurrentButton = Cpu->Pad2CurrentButton = input::B_A;

  001f0	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  001f5	c6 40 64 00	 mov	 BYTE PTR [rax+100], 0
  001f9	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  001fe	c6 40 40 00	 mov	 BYTE PTR [rax+64], 0
$LN19@writeCpu8:

; 186  :             }
; 187  :             Cpu->PadStrobe = false;

  00202	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00207	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [rax+28], 0
  0020e	eb 16		 jmp	 SHORT $LN18@writeCpu8
$LN17@writeCpu8:

; 188  :         }
; 189  :         else if(Bit0 == 1)

  00210	0f b6 44 24 21	 movzx	 eax, BYTE PTR Bit0$2[rsp]
  00215	83 f8 01	 cmp	 eax, 1
  00218	75 0c		 jne	 SHORT $LN20@writeCpu8

; 190  :         {
; 191  :             Cpu->PadStrobe = true;

  0021a	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0021f	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [rax+28], 1
$LN20@writeCpu8:
$LN18@writeCpu8:

; 192  :         }        
; 193  : 
; 194  :         uint8 BtnValue = Cpu->InputPad1.buttons[Cpu->Pad1CurrentButton] & 1;

  00226	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0022b	0f b6 40 40	 movzx	 eax, BYTE PTR [rax+64]
  0022f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00234	8b 44 81 20	 mov	 eax, DWORD PTR [rcx+rax*4+32]
  00238	83 e0 01	 and	 eax, 1
  0023b	88 44 24 20	 mov	 BYTE PTR BtnValue$1[rsp], al

; 195  :         write8(BtnValue, 0x4016, Cpu->MemoryBase);

  0023f	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00244	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00248	66 ba 16 40	 mov	 dx, 16406		; 00004016H
  0024c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR BtnValue$1[rsp]
  00251	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8

; 196  : 
; 197  :         BtnValue = Cpu->InputPad2.buttons[Cpu->Pad2CurrentButton] & 1;

  00256	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0025b	0f b6 40 64	 movzx	 eax, BYTE PTR [rax+100]
  0025f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00264	8b 44 81 44	 mov	 eax, DWORD PTR [rcx+rax*4+68]
  00268	83 e0 01	 and	 eax, 1
  0026b	88 44 24 20	 mov	 BYTE PTR BtnValue$1[rsp], al

; 198  :         write8(BtnValue, 0x4017, Cpu->MemoryBase);

  0026f	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00274	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00278	66 ba 17 40	 mov	 dx, 16407		; 00004017H
  0027c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR BtnValue$1[rsp]
  00281	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8
$LN15@writeCpu8:

; 199  :     }
; 200  : 
; 201  :     if(Address >= 0x8000)

  00286	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  0028b	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  00290	7c 27		 jl	 SHORT $LN21@writeCpu8

; 202  :     {
; 203  :         Cpu->MapperWrite = true;

  00292	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00297	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [rax+20], 1

; 204  :         Cpu->MapperReg = Byte;

  0029e	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  002a3	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR Byte$[rsp]
  002a8	88 48 10	 mov	 BYTE PTR [rax+16], cl

; 205  :         Cpu->MapperWriteAddress = Address;

  002ab	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  002b0	0f b7 4c 24 48	 movzx	 ecx, WORD PTR Address$[rsp]
  002b5	66 89 48 12	 mov	 WORD PTR [rax+18], cx
$LN21@writeCpu8:

; 206  :     }
; 207  : }

  002b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002bd	c3		 ret	 0
?writeCpu8@@YAXEGPEAUcpu@@@Z ENDP			; writeCpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
tv92 = 32
tv128 = 33
BtnValue$1 = 34
Value$ = 35
ResetValue$2 = 36
CurrentValue$3 = 37
NewValue$4 = 38
InputAddress$5 = 40
Address$ = 64
Cpu$ = 72
?readCpu8@@YAEGPEAUcpu@@@Z PROC				; readCpu8

; 80   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 81   :     Address = cpuMemoryMirror(Address);

  0000e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00013	e8 00 00 00 00	 call	 ?cpuMemoryMirror@@YAGG@Z ; cpuMemoryMirror
  00018	66 89 44 24 40	 mov	 WORD PTR Address$[rsp], ax

; 82   : 
; 83   :     if(Address == 0x2007) // Reading from the IO of ppu. First read is junk, unless its the colour palette

  0001d	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00022	3d 07 20 00 00	 cmp	 eax, 8199		; 00002007H
  00027	75 0a		 jne	 SHORT $LN2@readCpu8

; 84   :         IOReadFromCpu = true;

  00029	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?IOReadFromCpu@@3HA, 1 ; IOReadFromCpu
$LN2@readCpu8:

; 85   :     
; 86   :     uint8 Value = read8(Address, Cpu->MemoryBase);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00038	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0003c	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00041	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00046	88 44 24 23	 mov	 BYTE PTR Value$[rsp], al

; 87   : 
; 88   :     if(Address == 0x2002)

  0004a	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  0004f	3d 02 20 00 00	 cmp	 eax, 8194		; 00002002H
  00054	75 39		 jne	 SHORT $LN3@readCpu8

; 89   :     {
; 90   :         // NOTE: Will reset 2005 and 2006 registers, and turn off bit 7 of 0x2002
; 91   :         ResetScrollIOAdrs = true;

  00056	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ResetScrollIOAdrs@@3HA, 1 ; ResetScrollIOAdrs

; 92   :         ResetVRamIOAdrs = true;

  00060	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ResetVRamIOAdrs@@3HA, 1 ; ResetVRamIOAdrs

; 93   :         
; 94   :         uint8 ResetValue = Value & ~(1 << 7);

  0006a	0f b6 44 24 23	 movzx	 eax, BYTE PTR Value$[rsp]
  0006f	0f ba f0 07	 btr	 eax, 7
  00073	88 44 24 24	 mov	 BYTE PTR ResetValue$2[rsp], al

; 95   :         write8(ResetValue, Address, Cpu->MemoryBase);

  00077	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0007c	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00080	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00085	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR ResetValue$2[rsp]
  0008a	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8
$LN3@readCpu8:

; 96   :     }
; 97   :         
; 98   :     // Input
; 99   :     if(Address == 0x4016 || Address == 0x4017)

  0008f	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00094	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  00099	74 10		 je	 SHORT $LN5@readCpu8
  0009b	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  000a0	3d 17 40 00 00	 cmp	 eax, 16407		; 00004017H
  000a5	0f 85 03 01 00
	00		 jne	 $LN4@readCpu8
$LN5@readCpu8:

; 100  :     {
; 101  :         if( !Cpu->PadStrobe )

  000ab	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000b0	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  000b4	75 60		 jne	 SHORT $LN6@readCpu8

; 102  :         {
; 103  :             if(Address == 0x4016)

  000b6	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  000bb	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  000c0	75 2b		 jne	 SHORT $LN7@readCpu8

; 104  :                 Cpu->Pad1CurrentButton = ++(Cpu->Pad1CurrentButton);

  000c2	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000c7	0f b6 40 40	 movzx	 eax, BYTE PTR [rax+64]
  000cb	fe c0		 inc	 al
  000cd	88 44 24 20	 mov	 BYTE PTR tv92[rsp], al
  000d1	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d6	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv92[rsp]
  000db	88 48 40	 mov	 BYTE PTR [rax+64], cl
  000de	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e3	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv92[rsp]
  000e8	88 48 40	 mov	 BYTE PTR [rax+64], cl

; 105  :             else

  000eb	eb 29		 jmp	 SHORT $LN8@readCpu8
$LN7@readCpu8:

; 106  :                 Cpu->Pad2CurrentButton = ++(Cpu->Pad2CurrentButton);

  000ed	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f2	0f b6 40 64	 movzx	 eax, BYTE PTR [rax+100]
  000f6	fe c0		 inc	 al
  000f8	88 44 24 21	 mov	 BYTE PTR tv128[rsp], al
  000fc	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00101	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv128[rsp]
  00106	88 48 64	 mov	 BYTE PTR [rax+100], cl
  00109	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0010e	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv128[rsp]
  00113	88 48 64	 mov	 BYTE PTR [rax+100], cl
$LN8@readCpu8:
$LN6@readCpu8:

; 107  :         }
; 108  :         
; 109  :         uint16 InputAddress;
; 110  :         uint8 BtnValue;
; 111  :         if(Address == 0x4016)

  00116	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  0011b	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  00120	75 25		 jne	 SHORT $LN9@readCpu8

; 112  :         {
; 113  :             InputAddress = 0x4016;

  00122	b8 16 40 00 00	 mov	 eax, 16406		; 00004016H
  00127	66 89 44 24 28	 mov	 WORD PTR InputAddress$5[rsp], ax

; 114  :             BtnValue = Cpu->InputPad1.buttons[Cpu->Pad1CurrentButton] & 1;

  0012c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00131	0f b6 40 40	 movzx	 eax, BYTE PTR [rax+64]
  00135	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0013a	8b 44 81 20	 mov	 eax, DWORD PTR [rcx+rax*4+32]
  0013e	83 e0 01	 and	 eax, 1
  00141	88 44 24 22	 mov	 BYTE PTR BtnValue$1[rsp], al

; 115  :         }
; 116  :         else

  00145	eb 23		 jmp	 SHORT $LN10@readCpu8
$LN9@readCpu8:

; 117  :         {
; 118  :             InputAddress = 0x4017;

  00147	b8 17 40 00 00	 mov	 eax, 16407		; 00004017H
  0014c	66 89 44 24 28	 mov	 WORD PTR InputAddress$5[rsp], ax

; 119  :             BtnValue = Cpu->InputPad2.buttons[Cpu->Pad2CurrentButton] & 1;

  00151	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00156	0f b6 40 64	 movzx	 eax, BYTE PTR [rax+100]
  0015a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0015f	8b 44 81 44	 mov	 eax, DWORD PTR [rcx+rax*4+68]
  00163	83 e0 01	 and	 eax, 1
  00166	88 44 24 22	 mov	 BYTE PTR BtnValue$1[rsp], al
$LN10@readCpu8:

; 120  :         }
; 121  : 
; 122  :         uint8 CurrentValue = read8(InputAddress, Cpu->MemoryBase);

  0016a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0016f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00173	0f b7 4c 24 28	 movzx	 ecx, WORD PTR InputAddress$5[rsp]
  00178	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  0017d	88 44 24 25	 mov	 BYTE PTR CurrentValue$3[rsp], al

; 123  :         uint8 NewValue = (CurrentValue & 0xFE) | BtnValue;

  00181	0f b6 44 24 25	 movzx	 eax, BYTE PTR CurrentValue$3[rsp]
  00186	25 fe 00 00 00	 and	 eax, 254		; 000000feH
  0018b	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR BtnValue$1[rsp]
  00190	0b c1		 or	 eax, ecx
  00192	88 44 24 26	 mov	 BYTE PTR NewValue$4[rsp], al

; 124  :         write8(NewValue, InputAddress, Cpu->MemoryBase);

  00196	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0019b	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  0019f	0f b7 54 24 28	 movzx	 edx, WORD PTR InputAddress$5[rsp]
  001a4	0f b6 4c 24 26	 movzx	 ecx, BYTE PTR NewValue$4[rsp]
  001a9	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8
$LN4@readCpu8:

; 125  :     }
; 126  :     
; 127  :     return(Value);

  001ae	0f b6 44 24 23	 movzx	 eax, BYTE PTR Value$[rsp]

; 128  : }

  001b3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001b7	c3		 ret	 0
?readCpu8@@YAEGPEAUcpu@@@Z ENDP				; readCpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
Address$ = 8
?cpuMemoryMirror@@YAGG@Z PROC				; cpuMemoryMirror

; 41   : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 42   :     // NOTE: Mirrors the address for the 2kb ram 
; 43   :     if(0x0800 <= Address && Address < 0x2000)

  00005	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  0000a	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  0000f	7c 26		 jl	 SHORT $LN2@cpuMemoryM
  00011	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00016	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0001b	7d 1a		 jge	 SHORT $LN2@cpuMemoryM

; 44   :         Address = (Address % 0x0800);

  0001d	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00022	99		 cdq
  00023	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00029	03 c2		 add	 eax, edx
  0002b	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00030	2b c2		 sub	 eax, edx
  00032	66 89 44 24 08	 mov	 WORD PTR Address$[rsp], ax
$LN2@cpuMemoryM:

; 45   :     // NOTE: Mirror for PPU Registers
; 46   :     if(0x2008 <= Address && Address < 0x4000)

  00037	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  0003c	3d 08 20 00 00	 cmp	 eax, 8200		; 00002008H
  00041	7c 26		 jl	 SHORT $LN3@cpuMemoryM
  00043	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00048	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0004d	7d 1a		 jge	 SHORT $LN3@cpuMemoryM

; 47   :         Address = (Address % (0x2008 - 0x2000)) + 0x2000;

  0004f	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00054	99		 cdq
  00055	83 e2 07	 and	 edx, 7
  00058	03 c2		 add	 eax, edx
  0005a	83 e0 07	 and	 eax, 7
  0005d	2b c2		 sub	 eax, edx
  0005f	05 00 20 00 00	 add	 eax, 8192		; 00002000H
  00064	66 89 44 24 08	 mov	 WORD PTR Address$[rsp], ax
$LN3@cpuMemoryM:

; 48   :     return(Address);

  00069	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]

; 49   : }

  0006e	c3		 ret	 0
?cpuMemoryMirror@@YAGG@Z ENDP				; cpuMemoryMirror
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
SpriteIdx$1 = 32
VRamIO$ = 40
TileRelY$2 = 48
SpriteIdx$3 = 49
SpriteColourIndex$4 = 50
RelX$5 = 51
Registers$ = 56
XOffset$6 = 64
SpritePatternBase$ = 68
SpritesEnabled$ = 72
BackgroundEnabled$ = 76
tv447 = 80
PatternLow$7 = 81
PatternHigh$8 = 82
HighPattern$9 = 83
LowPattern$10 = 84
PixColourHigh$11 = 85
Value$12 = 86
BgrdColourIndex$13 = 87
PixelX$14 = 88
Sprite$15 = 92
AtrbPixelValue$16 = 96
PatternPixelValue$17 = 97
BgrdPaletteIndex$18 = 98
SprtPaletteIndex$19 = 99
Sprite8x16$ = 100
Colour$20 = 104
BgrdBaseColour$21 = 108
Sprite0Check$22 = 112
PixelY$23 = 116
Sprite$24 = 120
tv235 = 128
tv302 = 132
tv306 = 136
tv313 = 140
tv317 = 144
tv588 = 148
SprtPixTransparent$25 = 152
VRamAdrsOnPalette$ = 156
VisibleLine$ = 160
FlippedVert$26 = 164
tv427 = 168
tv439 = 172
FlippedHorz$27 = 176
Priority$28 = 180
PostRenderLine$ = 184
VBlankLine$ = 188
PreRenderLine$ = 192
LowAddress$29 = 200
HighAddress$30 = 208
BackBuffer$ = 240
Ppu$ = 248
?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z PROC	; ppuTick

; 305  : {    

$LN101:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H

; 306  :     ppu_registers *Registers = Ppu->Registers;

  00012	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0001a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001e	48 89 44 24 38	 mov	 QWORD PTR Registers$[rsp], rax

; 307  :     vram_io *VRamIO = &Ppu->VRamIO; 

  00023	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0002b	48 05 74 01 00
	00		 add	 rax, 372		; 00000174H
  00031	48 89 44 24 28	 mov	 QWORD PTR VRamIO$[rsp], rax

; 308  :     
; 309  :     if(OamDataChange)

  00036	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?OamDataChange@@3HA, 0 ; OamDataChange
  0003d	74 3b		 je	 SHORT $LN8@ppuTick

; 310  :     {
; 311  :         OamDataChange = false;

  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?OamDataChange@@3HA, 0 ; OamDataChange

; 312  :         Ppu->Oam[Registers->OamAddress] = Registers->OamIO;

  00049	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  0004e	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00052	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0005a	48 8b 54 24 38	 mov	 rdx, QWORD PTR Registers$[rsp]
  0005f	0f b6 52 04	 movzx	 edx, BYTE PTR [rdx+4]
  00063	88 54 01 20	 mov	 BYTE PTR [rcx+rax+32], dl

; 313  :         ++Registers->OamAddress;

  00067	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  0006c	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00070	fe c0		 inc	 al
  00072	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00077	88 41 03	 mov	 BYTE PTR [rcx+3], al
$LN8@ppuTick:

; 314  :     }
; 315  : 
; 316  :     if(ScrollAdrsChange)

  0007a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ScrollAdrsChange@@3HA, 0 ; ScrollAdrsChange
  00081	0f 84 df 00 00
	00		 je	 $LN9@ppuTick

; 317  :     {
; 318  :         ScrollAdrsChange = false;

  00087	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ScrollAdrsChange@@3HA, 0 ; ScrollAdrsChange

; 319  : 
; 320  :         if(VRamIO->LatchWrite == 0)

  00091	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00096	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0009a	85 c0		 test	 eax, eax
  0009c	75 56		 jne	 SHORT $LN10@ppuTick

; 321  :         {
; 322  :             VRamIO->FineX = Registers->ScrollAddress & 7; // Bit 0,1, and 2 are fine X

  0009e	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  000a3	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  000a7	83 e0 07	 and	 eax, 7
  000aa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  000af	88 41 05	 mov	 BYTE PTR [rcx+5], al

; 323  :             VRamIO->TempVRamAdrs &= ~(0x001F); // Clear Bits

  000b2	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  000b7	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  000bb	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  000be	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  000c3	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 324  :             VRamIO->TempVRamAdrs |= ((uint16)Registers->ScrollAddress) >> 3;

  000c7	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  000cc	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  000d0	c1 f8 03	 sar	 eax, 3
  000d3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  000d8	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  000dc	0b c8		 or	 ecx, eax
  000de	8b c1		 mov	 eax, ecx
  000e0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  000e5	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 325  :             VRamIO->LatchWrite = 1;

  000e9	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  000ee	c6 40 04 01	 mov	 BYTE PTR [rax+4], 1

; 326  :         }
; 327  :         else

  000f2	eb 72		 jmp	 SHORT $LN11@ppuTick
$LN10@ppuTick:

; 328  :         {
; 329  :             VRamIO->TempVRamAdrs &= ~(0x73E0); // Clear Bits

  000f4	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  000f9	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  000fd	25 1f 8c ff ff	 and	 eax, -29665		; ffffffffffff8c1fH
  00102	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00107	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 330  :             VRamIO->TempVRamAdrs |= ((uint16)(Registers->ScrollAddress & 0x0007)) << 12; // Set fine scroll Y, bits 0-2 set bit 12-14

  0010b	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00110	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  00114	83 e0 07	 and	 eax, 7
  00117	0f b7 c0	 movzx	 eax, ax
  0011a	c1 e0 0c	 shl	 eax, 12
  0011d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00122	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  00126	0b c8		 or	 ecx, eax
  00128	8b c1		 mov	 eax, ecx
  0012a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0012f	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 331  :             VRamIO->TempVRamAdrs |= ((uint16)(Registers->ScrollAddress & 0x00F8)) << 2; // Set coarse Y, bits 3-7 set bit 5-9

  00133	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00138	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  0013c	25 f8 00 00 00	 and	 eax, 248		; 000000f8H
  00141	0f b7 c0	 movzx	 eax, ax
  00144	c1 e0 02	 shl	 eax, 2
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0014c	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  00150	0b c8		 or	 ecx, eax
  00152	8b c1		 mov	 eax, ecx
  00154	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00159	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 332  :             VRamIO->LatchWrite = 0;

  0015d	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00162	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0
$LN11@ppuTick:
$LN9@ppuTick:

; 333  :         }
; 334  :     }
; 335  :     
; 336  :     // NOTE: This is where data is transferred from Cpu via IO registers
; 337  :     if(VRamAdrsChange)

  00166	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?VRamAdrsChange@@3HA, 0 ; VRamAdrsChange
  0016d	0f 84 f7 00 00
	00		 je	 $LN12@ppuTick

; 338  :     {
; 339  :         VRamAdrsChange = false;

  00173	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?VRamAdrsChange@@3HA, 0 ; VRamAdrsChange

; 340  : 
; 341  :         if(VRamIO->LatchWrite == 0)

  0017d	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00182	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00186	85 c0		 test	 eax, eax
  00188	75 4d		 jne	 SHORT $LN13@ppuTick

; 342  :         {
; 343  :             VRamIO->TempVRamAdrs &= ~(0x7F00); // Clear Bits. 14th bit does not get set again

  0018a	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0018f	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00193	25 ff 80 ff ff	 and	 eax, -32513		; ffffffffffff80ffH
  00198	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0019d	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 344  :             VRamIO->TempVRamAdrs |= ((uint16)(Registers->VRamAddress & 0x003F)) << 8;

  001a1	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  001a6	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  001aa	83 e0 3f	 and	 eax, 63			; 0000003fH
  001ad	0f b7 c0	 movzx	 eax, ax
  001b0	c1 e0 08	 shl	 eax, 8
  001b3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  001b8	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  001bc	0b c8		 or	 ecx, eax
  001be	8b c1		 mov	 eax, ecx
  001c0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  001c5	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 345  :             VRamIO->LatchWrite = 1;

  001c9	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  001ce	c6 40 04 01	 mov	 BYTE PTR [rax+4], 1

; 346  :         }
; 347  :         else

  001d2	e9 93 00 00 00	 jmp	 $LN14@ppuTick
$LN13@ppuTick:

; 348  :         { 
; 349  :             VRamIO->TempVRamAdrs &= ~(0x00FF); // Clear Bit that are about to be loaded

  001d7	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  001dc	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  001e0	25 00 ff ff ff	 and	 eax, -256		; ffffffffffffff00H
  001e5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  001ea	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 350  :             VRamIO->TempVRamAdrs |= (uint16)(Registers->VRamAddress & 0x00FF); 

  001ee	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  001f3	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  001f7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001fc	0f b7 c0	 movzx	 eax, ax
  001ff	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00204	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  00208	0b c8		 or	 ecx, eax
  0020a	8b c1		 mov	 eax, ecx
  0020c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00211	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 351  :             VRamIO->VRamAdrs = VRamIO->TempVRamAdrs;

  00215	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0021a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0021f	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  00223	66 89 08	 mov	 WORD PTR [rax], cx

; 352  :             VRamIO->LatchWrite = 0;

  00226	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0022b	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0

; 353  :             
; 354  :             // NOTE: If address is on the pallette. Then IO register is updated immediately
; 355  :             if(0x3F00 <= VRamIO->VRamAdrs && VRamIO->VRamAdrs <= 0x3FFF)

  0022f	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00234	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00237	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  0023c	7c 2c		 jl	 SHORT $LN15@ppuTick
  0023e	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00243	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00246	3d ff 3f 00 00	 cmp	 eax, 16383		; 00003fffH
  0024b	7f 1d		 jg	 SHORT $LN15@ppuTick

; 356  :                 Registers->VRamIO = readPpu8(VRamIO->VRamAdrs, Ppu);

  0024d	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00255	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0025a	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  0025d	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00262	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00267	88 41 07	 mov	 BYTE PTR [rcx+7], al
$LN15@ppuTick:
$LN14@ppuTick:
$LN12@ppuTick:

; 357  :         }
; 358  :     }
; 359  : 
; 360  :     if(IOWriteFromCpu)

  0026a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?IOWriteFromCpu@@3HA, 0 ; IOWriteFromCpu
  00271	74 5e		 je	 SHORT $LN16@ppuTick

; 361  :     {
; 362  :         IOWriteFromCpu = false;

  00273	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?IOWriteFromCpu@@3HA, 0 ; IOWriteFromCpu

; 363  :         
; 364  :         writePpu8(Registers->VRamIO, VRamIO->VRamAdrs, Ppu);

  0027d	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR Ppu$[rsp]
  00285	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0028a	0f b7 10	 movzx	 edx, WORD PTR [rax]
  0028d	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00292	0f b6 48 07	 movzx	 ecx, BYTE PTR [rax+7]
  00296	e8 00 00 00 00	 call	 ?writePpu8@@YAXEGPEAUppu@@@Z ; writePpu8

; 365  :         if(Registers->Ctrl1 & (1 << 2))

  0029b	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  002a0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002a3	83 e0 04	 and	 eax, 4
  002a6	85 c0		 test	 eax, eax
  002a8	74 15		 je	 SHORT $LN17@ppuTick

; 366  :             VRamIO->VRamAdrs += 32;

  002aa	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  002af	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002b2	83 c0 20	 add	 eax, 32			; 00000020H
  002b5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  002ba	66 89 01	 mov	 WORD PTR [rcx], ax

; 367  :         else

  002bd	eb 12		 jmp	 SHORT $LN18@ppuTick
$LN17@ppuTick:

; 368  :             VRamIO->VRamAdrs += 1;

  002bf	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  002c4	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002c7	ff c0		 inc	 eax
  002c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  002ce	66 89 01	 mov	 WORD PTR [rcx], ax
$LN18@ppuTick:
$LN16@ppuTick:

; 369  :     }
; 370  : 
; 371  :     bool32 VRamAdrsOnPalette = (0x3F00 <= VRamIO->VRamAdrs && VRamIO->VRamAdrs <= 0x3FFF);

  002d1	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  002d6	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002d9	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  002de	7c 1c		 jl	 SHORT $LN87@ppuTick
  002e0	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  002e5	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002e8	3d ff 3f 00 00	 cmp	 eax, 16383		; 00003fffH
  002ed	7f 0d		 jg	 SHORT $LN87@ppuTick
  002ef	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv235[rsp], 1
  002fa	eb 0b		 jmp	 SHORT $LN88@ppuTick
$LN87@ppuTick:
  002fc	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv235[rsp], 0
$LN88@ppuTick:
  00307	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv235[rsp]
  0030e	89 84 24 9c 00
	00 00		 mov	 DWORD PTR VRamAdrsOnPalette$[rsp], eax

; 372  :     
; 373  :     if(IOReadFromCpu)

  00315	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?IOReadFromCpu@@3HA, 0 ; IOReadFromCpu
  0031c	0f 84 bc 00 00
	00		 je	 $LN19@ppuTick

; 374  :     {
; 375  :         IOReadFromCpu = false;

  00322	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?IOReadFromCpu@@3HA, 0 ; IOReadFromCpu

; 376  : 
; 377  :         if(VRamAdrsOnPalette)

  0032c	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR VRamAdrsOnPalette$[rsp], 0
  00334	74 55		 je	 SHORT $LN20@ppuTick

; 378  :         {
; 379  :             if(Registers->Ctrl1 & (1 << 2))

  00336	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  0033b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0033e	83 e0 04	 and	 eax, 4
  00341	85 c0		 test	 eax, eax
  00343	74 15		 je	 SHORT $LN22@ppuTick

; 380  :                 VRamIO->VRamAdrs += 32;

  00345	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0034a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0034d	83 c0 20	 add	 eax, 32			; 00000020H
  00350	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00355	66 89 01	 mov	 WORD PTR [rcx], ax

; 381  :             else

  00358	eb 12		 jmp	 SHORT $LN23@ppuTick
$LN22@ppuTick:

; 382  :                 VRamIO->VRamAdrs += 1;

  0035a	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0035f	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00362	ff c0		 inc	 eax
  00364	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00369	66 89 01	 mov	 WORD PTR [rcx], ax
$LN23@ppuTick:

; 383  :             Registers->VRamIO = readPpu8(VRamIO->VRamAdrs, Ppu);

  0036c	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00374	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00379	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  0037c	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00381	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00386	88 41 07	 mov	 BYTE PTR [rcx+7], al

; 384  :         }
; 385  :         else

  00389	eb 53		 jmp	 SHORT $LN21@ppuTick
$LN20@ppuTick:

; 386  :         {
; 387  :             Registers->VRamIO = readPpu8(VRamIO->VRamAdrs, Ppu);

  0038b	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00393	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00398	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  0039b	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  003a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  003a5	88 41 07	 mov	 BYTE PTR [rcx+7], al

; 388  :             if(Registers->Ctrl1 & (1 << 2))

  003a8	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  003ad	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003b0	83 e0 04	 and	 eax, 4
  003b3	85 c0		 test	 eax, eax
  003b5	74 15		 je	 SHORT $LN24@ppuTick

; 389  :                 VRamIO->VRamAdrs += 32;

  003b7	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  003bc	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003bf	83 c0 20	 add	 eax, 32			; 00000020H
  003c2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  003c7	66 89 01	 mov	 WORD PTR [rcx], ax

; 390  :             else

  003ca	eb 12		 jmp	 SHORT $LN25@ppuTick
$LN24@ppuTick:

; 391  :                 VRamIO->VRamAdrs += 1;

  003cc	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  003d1	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003d4	ff c0		 inc	 eax
  003d6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  003db	66 89 01	 mov	 WORD PTR [rcx], ax
$LN25@ppuTick:
$LN21@ppuTick:
$LN19@ppuTick:

; 392  :         }
; 393  :     }
; 394  :     
; 395  :     if(ResetVRamIOAdrs)

  003de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ResetVRamIOAdrs@@3HA, 0 ; ResetVRamIOAdrs
  003e5	74 13		 je	 SHORT $LN26@ppuTick

; 396  :     {
; 397  :         VRamIO->LatchWrite = 0;

  003e7	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  003ec	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0

; 398  :         ResetVRamIOAdrs = false;

  003f0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ResetVRamIOAdrs@@3HA, 0 ; ResetVRamIOAdrs
$LN26@ppuTick:

; 399  :     }
; 400  :     if(ResetScrollIOAdrs)

  003fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ResetScrollIOAdrs@@3HA, 0 ; ResetScrollIOAdrs
  00401	74 13		 je	 SHORT $LN27@ppuTick

; 401  :     {
; 402  :         VRamIO->LatchWrite = 0;

  00403	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00408	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0

; 403  :         ResetScrollIOAdrs = false;

  0040c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ResetScrollIOAdrs@@3HA, 0 ; ResetScrollIOAdrs
$LN27@ppuTick:

; 404  :     }
; 405  :     
; 406  :     uint16 Sprite8x16 = Registers->Ctrl1 & (1 << 5);

  00416	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  0041b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0041e	83 e0 20	 and	 eax, 32			; 00000020H
  00421	66 89 44 24 64	 mov	 WORD PTR Sprite8x16$[rsp], ax

; 407  :     
; 408  :     uint16 SpritePatternBase = 0x0000;

  00426	33 c0		 xor	 eax, eax
  00428	66 89 44 24 44	 mov	 WORD PTR SpritePatternBase$[rsp], ax

; 409  :     if(!Sprite8x16 && Registers->Ctrl1 & (1 << 3))

  0042d	0f b7 44 24 64	 movzx	 eax, WORD PTR Sprite8x16$[rsp]
  00432	85 c0		 test	 eax, eax
  00434	75 19		 jne	 SHORT $LN28@ppuTick
  00436	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  0043b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0043e	83 e0 08	 and	 eax, 8
  00441	85 c0		 test	 eax, eax
  00443	74 0a		 je	 SHORT $LN28@ppuTick

; 410  :     {
; 411  :         SpritePatternBase = 0x1000;        

  00445	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  0044a	66 89 44 24 44	 mov	 WORD PTR SpritePatternBase$[rsp], ax
$LN28@ppuTick:

; 412  :     }
; 413  :     
; 414  : 
; 415  :     bool32 BackgroundEnabled = Registers->Ctrl2 & (1 << 3);

  0044f	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00454	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00458	83 e0 08	 and	 eax, 8
  0045b	89 44 24 4c	 mov	 DWORD PTR BackgroundEnabled$[rsp], eax

; 416  :     bool32 SpritesEnabled = Registers->Ctrl2 & (1 << 4);

  0045f	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00464	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00468	83 e0 10	 and	 eax, 16
  0046b	89 44 24 48	 mov	 DWORD PTR SpritesEnabled$[rsp], eax

; 417  :     
; 418  :     bool32 VisibleLine = (0 <= Ppu->Scanline && Ppu->Scanline <= 239);

  0046f	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00477	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  0047e	85 c0		 test	 eax, eax
  00480	7c 23		 jl	 SHORT $LN89@ppuTick
  00482	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0048a	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  00491	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  00496	7f 0d		 jg	 SHORT $LN89@ppuTick
  00498	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv302[rsp], 1
  004a3	eb 0b		 jmp	 SHORT $LN90@ppuTick
$LN89@ppuTick:
  004a5	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv302[rsp], 0
$LN90@ppuTick:
  004b0	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv302[rsp]
  004b7	89 84 24 a0 00
	00 00		 mov	 DWORD PTR VisibleLine$[rsp], eax

; 419  :     bool32 PostRenderLine = (Ppu->Scanline == 240);

  004be	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  004c6	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  004cd	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  004d2	75 0d		 jne	 SHORT $LN91@ppuTick
  004d4	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv306[rsp], 1
  004df	eb 0b		 jmp	 SHORT $LN92@ppuTick
$LN91@ppuTick:
  004e1	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv306[rsp], 0
$LN92@ppuTick:
  004ec	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv306[rsp]
  004f3	89 84 24 b8 00
	00 00		 mov	 DWORD PTR PostRenderLine$[rsp], eax

; 420  :     bool32 VBlankLine = (241 <= Ppu->Scanline && Ppu->Scanline <= 260);

  004fa	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00502	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  00509	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  0050e	7c 23		 jl	 SHORT $LN93@ppuTick
  00510	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00518	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  0051f	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  00524	7f 0d		 jg	 SHORT $LN93@ppuTick
  00526	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv313[rsp], 1
  00531	eb 0b		 jmp	 SHORT $LN94@ppuTick
$LN93@ppuTick:
  00533	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv313[rsp], 0
$LN94@ppuTick:
  0053e	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv313[rsp]
  00545	89 84 24 bc 00
	00 00		 mov	 DWORD PTR VBlankLine$[rsp], eax

; 421  :     bool32 PreRenderLine = (Ppu->Scanline == 261);

  0054c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00554	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  0055b	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  00560	75 0d		 jne	 SHORT $LN95@ppuTick
  00562	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv317[rsp], 1
  0056d	eb 0b		 jmp	 SHORT $LN96@ppuTick
$LN95@ppuTick:
  0056f	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv317[rsp], 0
$LN96@ppuTick:
  0057a	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv317[rsp]
  00581	89 84 24 c0 00
	00 00		 mov	 DWORD PTR PreRenderLine$[rsp], eax

; 422  :     
; 423  :     if(VisibleLine)

  00588	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR VisibleLine$[rsp], 0
  00590	0f 84 ce 07 00
	00		 je	 $LN29@ppuTick

; 424  :     {
; 425  :         // NOTE: Do sprite Evaluation
; 426  :         if(Ppu->ScanlineCycle == 0)

  00596	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0059e	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  005a5	85 c0		 test	 eax, eax
  005a7	0f 85 cf 01 00
	00		 jne	 $LN30@ppuTick

; 427  :         {            
; 428  :             for(uint8 SpriteIdx = 0; SpriteIdx < SECOND_OAM_SPRITE_NUM; ++SpriteIdx)

  005ad	c6 44 24 31 00	 mov	 BYTE PTR SpriteIdx$3[rsp], 0
  005b2	eb 0b		 jmp	 SHORT $LN4@ppuTick
$LN2@ppuTick:
  005b4	0f b6 44 24 31	 movzx	 eax, BYTE PTR SpriteIdx$3[rsp]
  005b9	fe c0		 inc	 al
  005bb	88 44 24 31	 mov	 BYTE PTR SpriteIdx$3[rsp], al
$LN4@ppuTick:
  005bf	0f b6 44 24 31	 movzx	 eax, BYTE PTR SpriteIdx$3[rsp]
  005c4	83 f8 08	 cmp	 eax, 8
  005c7	0f 8d af 01 00
	00		 jge	 $LN3@ppuTick

; 429  :             {
; 430  :                 oam_sprite Sprite = Ppu->SecondaryOam[SpriteIdx];

  005cd	0f b6 44 24 31	 movzx	 eax, BYTE PTR SpriteIdx$3[rsp]
  005d2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  005da	8b 84 81 20 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+288]
  005e1	89 44 24 5c	 mov	 DWORD PTR Sprite$15[rsp], eax

; 431  : 
; 432  :                 if(Sprite.Y == 0xFF && Sprite.Tile == 0xFF)

  005e5	0f b6 44 24 5c	 movzx	 eax, BYTE PTR Sprite$15[rsp]
  005ea	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  005ef	75 11		 jne	 SHORT $LN31@ppuTick
  005f1	0f b6 44 24 5d	 movzx	 eax, BYTE PTR Sprite$15[rsp+1]
  005f6	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  005fb	75 05		 jne	 SHORT $LN31@ppuTick

; 433  :                     break;

  005fd	e9 7a 01 00 00	 jmp	 $LN3@ppuTick
$LN31@ppuTick:

; 434  :                 
; 435  :                 bool32 FlippedVert = Sprite.Atrb & (1 << 7);

  00602	0f b6 44 24 5e	 movzx	 eax, BYTE PTR Sprite$15[rsp+2]
  00607	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0060c	89 84 24 a4 00
	00 00		 mov	 DWORD PTR FlippedVert$26[rsp], eax

; 436  : 
; 437  :                 if(Sprite8x16)

  00613	0f b7 44 24 64	 movzx	 eax, WORD PTR Sprite8x16$[rsp]
  00618	85 c0		 test	 eax, eax
  0061a	74 1f		 je	 SHORT $LN32@ppuTick

; 438  :                 {
; 439  :                     if(Sprite.Tile & 1)

  0061c	0f b6 44 24 5d	 movzx	 eax, BYTE PTR Sprite$15[rsp+1]
  00621	83 e0 01	 and	 eax, 1
  00624	85 c0		 test	 eax, eax
  00626	74 0c		 je	 SHORT $LN33@ppuTick

; 440  :                         SpritePatternBase = 0x1000;

  00628	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  0062d	66 89 44 24 44	 mov	 WORD PTR SpritePatternBase$[rsp], ax

; 441  :                     else

  00632	eb 07		 jmp	 SHORT $LN34@ppuTick
$LN33@ppuTick:

; 442  :                         SpritePatternBase = 0;

  00634	33 c0		 xor	 eax, eax
  00636	66 89 44 24 44	 mov	 WORD PTR SpritePatternBase$[rsp], ax
$LN34@ppuTick:
$LN32@ppuTick:

; 443  :                 }
; 444  :                 
; 445  :                 uint8 TileRelY = (uint8)(Ppu->Scanline - Sprite.Y - 1) % PIXEL_PER_TILE; // NOTE TODO: -1?????   

  0063b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00643	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  0064a	0f b6 4c 24 5c	 movzx	 ecx, BYTE PTR Sprite$15[rsp]
  0064f	2b c1		 sub	 eax, ecx
  00651	ff c8		 dec	 eax
  00653	0f b6 c0	 movzx	 eax, al
  00656	99		 cdq
  00657	83 e2 07	 and	 edx, 7
  0065a	03 c2		 add	 eax, edx
  0065c	83 e0 07	 and	 eax, 7
  0065f	2b c2		 sub	 eax, edx
  00661	88 44 24 30	 mov	 BYTE PTR TileRelY$2[rsp], al

; 446  :                 Assert(0 <= TileRelY && TileRelY < PIXEL_PER_TILE);

  00665	0f b6 44 24 30	 movzx	 eax, BYTE PTR TileRelY$2[rsp]
  0066a	85 c0		 test	 eax, eax
  0066c	7c 0a		 jl	 SHORT $LN36@ppuTick
  0066e	0f b6 44 24 30	 movzx	 eax, BYTE PTR TileRelY$2[rsp]
  00673	83 f8 08	 cmp	 eax, 8
  00676	7c 0b		 jl	 SHORT $LN35@ppuTick
$LN36@ppuTick:
  00678	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN35@ppuTick:

; 447  : 
; 448  :                 uint64 LowAddress;
; 449  :                 uint64 HighAddress;
; 450  :                     
; 451  :                 if(FlippedVert)

  00683	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR FlippedVert$26[rsp], 0
  0068b	74 56		 je	 SHORT $LN37@ppuTick

; 452  :                 {
; 453  :                     LowAddress = (SpritePatternBase + (Sprite.Tile * 16)) + (7 - TileRelY);

  0068d	0f b7 44 24 44	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  00692	0f b6 4c 24 5d	 movzx	 ecx, BYTE PTR Sprite$15[rsp+1]
  00697	6b c9 10	 imul	 ecx, ecx, 16
  0069a	03 c1		 add	 eax, ecx
  0069c	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR TileRelY$2[rsp]
  006a1	ba 07 00 00 00	 mov	 edx, 7
  006a6	2b d1		 sub	 edx, ecx
  006a8	8b ca		 mov	 ecx, edx
  006aa	03 c1		 add	 eax, ecx
  006ac	48 98		 cdqe
  006ae	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR LowAddress$29[rsp], rax

; 454  :                     HighAddress = (SpritePatternBase + (Sprite.Tile * 16) + 8) + (7 - TileRelY);

  006b6	0f b7 44 24 44	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  006bb	0f b6 4c 24 5d	 movzx	 ecx, BYTE PTR Sprite$15[rsp+1]
  006c0	6b c9 10	 imul	 ecx, ecx, 16
  006c3	03 c1		 add	 eax, ecx
  006c5	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR TileRelY$2[rsp]
  006ca	ba 07 00 00 00	 mov	 edx, 7
  006cf	2b d1		 sub	 edx, ecx
  006d1	8b ca		 mov	 ecx, edx
  006d3	8d 44 08 08	 lea	 eax, DWORD PTR [rax+rcx+8]
  006d7	48 98		 cdqe
  006d9	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR HighAddress$30[rsp], rax

; 455  :                 }
; 456  :                 else

  006e1	eb 42		 jmp	 SHORT $LN38@ppuTick
$LN37@ppuTick:

; 457  :                 {
; 458  :                     LowAddress = (SpritePatternBase + (Sprite.Tile * 16)) + TileRelY;

  006e3	0f b7 44 24 44	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  006e8	0f b6 4c 24 5d	 movzx	 ecx, BYTE PTR Sprite$15[rsp+1]
  006ed	6b c9 10	 imul	 ecx, ecx, 16
  006f0	03 c1		 add	 eax, ecx
  006f2	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR TileRelY$2[rsp]
  006f7	03 c1		 add	 eax, ecx
  006f9	48 98		 cdqe
  006fb	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR LowAddress$29[rsp], rax

; 459  :                     HighAddress = (SpritePatternBase + (Sprite.Tile * 16) + 8) + TileRelY;

  00703	0f b7 44 24 44	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  00708	0f b6 4c 24 5d	 movzx	 ecx, BYTE PTR Sprite$15[rsp+1]
  0070d	6b c9 10	 imul	 ecx, ecx, 16
  00710	03 c1		 add	 eax, ecx
  00712	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR TileRelY$2[rsp]
  00717	8d 44 08 08	 lea	 eax, DWORD PTR [rax+rcx+8]
  0071b	48 98		 cdqe
  0071d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR HighAddress$30[rsp], rax
$LN38@ppuTick:

; 460  :                 }
; 461  :                     
; 462  :                 Ppu->SpriteTileLow[SpriteIdx] = readPpu8(LowAddress, Ppu);

  00725	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  0072d	0f b7 8c 24 c8
	00 00 00	 movzx	 ecx, WORD PTR LowAddress$29[rsp]
  00735	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  0073a	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR SpriteIdx$3[rsp]
  0073f	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00747	88 84 0a 40 01
	00 00		 mov	 BYTE PTR [rdx+rcx+320], al

; 463  :                 Ppu->SpriteTileHigh[SpriteIdx] = readPpu8(HighAddress, Ppu);                

  0074e	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00756	0f b7 8c 24 d0
	00 00 00	 movzx	 ecx, WORD PTR HighAddress$30[rsp]
  0075e	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00763	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR SpriteIdx$3[rsp]
  00768	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00770	88 84 0a 48 01
	00 00		 mov	 BYTE PTR [rdx+rcx+328], al

; 464  :             }

  00777	e9 38 fe ff ff	 jmp	 $LN2@ppuTick
$LN3@ppuTick:
$LN30@ppuTick:

; 465  :         }
; 466  : 
; 467  :         // TODO: Move to a proper scanline timing. Will have to create a new prepared sprites struct?
; 468  :         if(Ppu->ScanlineCycle == 257)

  0077c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00784	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  0078b	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  00790	75 48		 jne	 SHORT $LN39@ppuTick

; 469  :         {
; 470  :             clearSecondaryOam(Ppu->SecondaryOam);          

  00792	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0079a	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  007a0	48 8b c8	 mov	 rcx, rax
  007a3	e8 00 00 00 00	 call	 ?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z ; clearSecondaryOam

; 471  :             evaluateSecondaryOam(Ppu->Oam, Ppu->SecondaryOam, Ppu->Scanline);

  007a8	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  007b0	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  007b6	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  007be	48 83 c1 20	 add	 rcx, 32			; 00000020H
  007c2	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  007ca	44 0f b7 82 70
	01 00 00	 movzx	 r8d, WORD PTR [rdx+368]
  007d2	48 8b d0	 mov	 rdx, rax
  007d5	e8 00 00 00 00	 call	 ?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z ; evaluateSecondaryOam
$LN39@ppuTick:

; 472  :         }   
; 473  :         
; 474  :         
; 475  :         if(1 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 256)

  007da	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  007e2	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  007e9	83 f8 01	 cmp	 eax, 1
  007ec	0f 8c d5 04 00
	00		 jl	 $LN40@ppuTick
  007f2	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  007fa	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00801	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00806	0f 8f bb 04 00
	00		 jg	 $LN40@ppuTick

; 476  :         {
; 477  :             if(BackgroundEnabled || SpritesEnabled)

  0080c	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00811	75 0b		 jne	 SHORT $LN42@ppuTick
  00813	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00818	0f 84 38 04 00
	00		 je	 $LN41@ppuTick
$LN42@ppuTick:

; 478  :             {
; 479  :                 uint16 PixelX = Ppu->ScanlineCycle - 1;

  0081e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00826	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  0082d	ff c8		 dec	 eax
  0082f	66 89 44 24 58	 mov	 WORD PTR PixelX$14[rsp], ax

; 480  :                 uint16 PixelY = Ppu->Scanline;

  00834	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0083c	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  00843	66 89 44 24 74	 mov	 WORD PTR PixelY$23[rsp], ax

; 481  : 
; 482  :                 uint8 XOffset = 15 - (VRamIO->FineX + ((PixelX-1) % 8));

  00848	48 8b 44 24 28	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0084d	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  00851	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv427[rsp], eax
  00858	0f b7 4c 24 58	 movzx	 ecx, WORD PTR PixelX$14[rsp]
  0085d	ff c9		 dec	 ecx
  0085f	8b c1		 mov	 eax, ecx
  00861	99		 cdq
  00862	83 e2 07	 and	 edx, 7
  00865	03 c2		 add	 eax, edx
  00867	83 e0 07	 and	 eax, 7
  0086a	2b c2		 sub	 eax, edx
  0086c	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv427[rsp]
  00873	03 c8		 add	 ecx, eax
  00875	8b c1		 mov	 eax, ecx
  00877	b9 0f 00 00 00	 mov	 ecx, 15
  0087c	2b c8		 sub	 ecx, eax
  0087e	8b c1		 mov	 eax, ecx
  00880	88 44 24 40	 mov	 BYTE PTR XOffset$6[rsp], al

; 483  :                 
; 484  :                 /* *********************** */
; 485  :                 /* Background Calculations */
; 486  :  
; 487  :                 uint8 PatternPixelValue = (((HighPatternShiftReg >> (XOffset - 1) ) & 2) |

  00884	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?HighPatternShiftReg@@3GA ; HighPatternShiftReg
  0088b	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR XOffset$6[rsp]
  00890	ff c9		 dec	 ecx
  00892	d3 f8		 sar	 eax, cl
  00894	83 e0 02	 and	 eax, 2
  00897	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?LowPatternShiftReg@@3GA ; LowPatternShiftReg
  0089e	89 8c 24 ac 00
	00 00		 mov	 DWORD PTR tv439[rsp], ecx
  008a5	0f b6 54 24 40	 movzx	 edx, BYTE PTR XOffset$6[rsp]
  008aa	0f b6 ca	 movzx	 ecx, dl
  008ad	8b 94 24 ac 00
	00 00		 mov	 edx, DWORD PTR tv439[rsp]
  008b4	d3 fa		 sar	 edx, cl
  008b6	8b ca		 mov	 ecx, edx
  008b8	83 e1 01	 and	 ecx, 1
  008bb	0b c1		 or	 eax, ecx
  008bd	88 44 24 61	 mov	 BYTE PTR PatternPixelValue$17[rsp], al

; 488  :                                            (LowPatternShiftReg >> XOffset) & 1);
; 489  :                 uint8 AtrbPixelValue = (XOffset >= 8) ? PaletteLatchOld : PaletteLatchNew;

  008c1	0f b6 44 24 40	 movzx	 eax, BYTE PTR XOffset$6[rsp]
  008c6	83 f8 08	 cmp	 eax, 8
  008c9	7c 0d		 jl	 SHORT $LN97@ppuTick
  008cb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PaletteLatchOld@@3EA ; PaletteLatchOld
  008d2	88 44 24 50	 mov	 BYTE PTR tv447[rsp], al
  008d6	eb 0b		 jmp	 SHORT $LN98@ppuTick
$LN97@ppuTick:
  008d8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PaletteLatchNew@@3EA ; PaletteLatchNew
  008df	88 44 24 50	 mov	 BYTE PTR tv447[rsp], al
$LN98@ppuTick:
  008e3	0f b6 44 24 50	 movzx	 eax, BYTE PTR tv447[rsp]
  008e8	88 44 24 60	 mov	 BYTE PTR AtrbPixelValue$16[rsp], al

; 490  : 
; 491  :                 uint8 BgrdColourIndex = AtrbPixelValue | PatternPixelValue;

  008ec	0f b6 44 24 60	 movzx	 eax, BYTE PTR AtrbPixelValue$16[rsp]
  008f1	0f b6 4c 24 61	 movzx	 ecx, BYTE PTR PatternPixelValue$17[rsp]
  008f6	0b c1		 or	 eax, ecx
  008f8	88 44 24 57	 mov	 BYTE PTR BgrdColourIndex$13[rsp], al

; 492  : 
; 493  :                 /* ******************* */
; 494  :                 /* Sprite Calculations */
; 495  : 
; 496  :                 bool32 Sprite0Check = false;

  008fc	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR Sprite0Check$22[rsp], 0

; 497  :             
; 498  : #define NO_COLOUR 0xFF
; 499  :                 oam_sprite *Sprite;
; 500  :                 uint8 SpriteColourIndex = NO_COLOUR;

  00904	c6 44 24 32 ff	 mov	 BYTE PTR SpriteColourIndex$4[rsp], 255 ; 000000ffH

; 501  : 
; 502  :                 for(int8 SpriteIdx = SECOND_OAM_SPRITE_NUM - 1; SpriteIdx >= 0; --SpriteIdx)

  00909	c6 44 24 20 07	 mov	 BYTE PTR SpriteIdx$1[rsp], 7
  0090e	eb 0b		 jmp	 SHORT $LN7@ppuTick
$LN5@ppuTick:
  00910	0f b6 44 24 20	 movzx	 eax, BYTE PTR SpriteIdx$1[rsp]
  00915	fe c8		 dec	 al
  00917	88 44 24 20	 mov	 BYTE PTR SpriteIdx$1[rsp], al
$LN7@ppuTick:
  0091b	0f be 44 24 20	 movsx	 eax, BYTE PTR SpriteIdx$1[rsp]
  00920	85 c0		 test	 eax, eax
  00922	0f 8c a3 01 00
	00		 jl	 $LN6@ppuTick

; 503  :                 {
; 504  :                     Sprite = Ppu->SecondaryOam + SpriteIdx; 

  00928	48 0f be 44 24
	20		 movsx	 rax, BYTE PTR SpriteIdx$1[rsp]
  0092e	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00936	48 8d 84 81 20
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*4+288]
  0093e	48 89 44 24 78	 mov	 QWORD PTR Sprite$24[rsp], rax

; 505  : 
; 506  :                     bool32 FlippedHorz = Sprite->Atrb & (1 << 6);

  00943	48 8b 44 24 78	 mov	 rax, QWORD PTR Sprite$24[rsp]
  00948	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0094c	83 e0 40	 and	 eax, 64			; 00000040H
  0094f	89 84 24 b0 00
	00 00		 mov	 DWORD PTR FlippedHorz$27[rsp], eax

; 507  :                                 
; 508  :                     if(PixelX >= Sprite->X && PixelX < (Sprite->X + PIXEL_PER_TILE)) 

  00956	0f b7 44 24 58	 movzx	 eax, WORD PTR PixelX$14[rsp]
  0095b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Sprite$24[rsp]
  00960	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  00964	3b c1		 cmp	 eax, ecx
  00966	0f 8c 5a 01 00
	00		 jl	 $LN43@ppuTick
  0096c	0f b7 44 24 58	 movzx	 eax, WORD PTR PixelX$14[rsp]
  00971	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Sprite$24[rsp]
  00976	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  0097a	83 c1 08	 add	 ecx, 8
  0097d	3b c1		 cmp	 eax, ecx
  0097f	0f 8d 41 01 00
	00		 jge	 $LN43@ppuTick

; 509  :                     {
; 510  :                         uint8 PixColourHigh = Sprite->Atrb & 3; 

  00985	48 8b 44 24 78	 mov	 rax, QWORD PTR Sprite$24[rsp]
  0098a	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0098e	83 e0 03	 and	 eax, 3
  00991	88 44 24 55	 mov	 BYTE PTR PixColourHigh$11[rsp], al

; 511  :                         uint8 PatternLow = Ppu->SpriteTileLow[SpriteIdx];

  00995	48 0f be 44 24
	20		 movsx	 rax, BYTE PTR SpriteIdx$1[rsp]
  0099b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  009a3	0f b6 84 01 40
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+320]
  009ab	88 44 24 51	 mov	 BYTE PTR PatternLow$7[rsp], al

; 512  :                         uint8 PatternHigh = Ppu->SpriteTileHigh[SpriteIdx];

  009af	48 0f be 44 24
	20		 movsx	 rax, BYTE PTR SpriteIdx$1[rsp]
  009b5	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  009bd	0f b6 84 01 48
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+328]
  009c5	88 44 24 52	 mov	 BYTE PTR PatternHigh$8[rsp], al

; 513  :                         
; 514  :                         uint8 RelX = (PixelX - Sprite->X) % 8 ; 

  009c9	0f b7 44 24 58	 movzx	 eax, WORD PTR PixelX$14[rsp]
  009ce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR Sprite$24[rsp]
  009d3	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  009d7	2b c1		 sub	 eax, ecx
  009d9	99		 cdq
  009da	83 e2 07	 and	 edx, 7
  009dd	03 c2		 add	 eax, edx
  009df	83 e0 07	 and	 eax, 7
  009e2	2b c2		 sub	 eax, edx
  009e4	88 44 24 33	 mov	 BYTE PTR RelX$5[rsp], al

; 515  : 
; 516  :                         uint8 LowPattern;
; 517  :                         uint8 HighPattern;
; 518  :                     
; 519  :                         if(FlippedHorz)

  009e8	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR FlippedHorz$27[rsp], 0
  009f0	74 28		 je	 SHORT $LN44@ppuTick

; 520  :                         {
; 521  :                             LowPattern  = (PatternLow >> RelX) & 1;

  009f2	0f b6 44 24 51	 movzx	 eax, BYTE PTR PatternLow$7[rsp]
  009f7	0f b6 4c 24 33	 movzx	 ecx, BYTE PTR RelX$5[rsp]
  009fc	d3 f8		 sar	 eax, cl
  009fe	83 e0 01	 and	 eax, 1
  00a01	88 44 24 54	 mov	 BYTE PTR LowPattern$10[rsp], al

; 522  :                             HighPattern = (PatternHigh >> RelX) & 1;

  00a05	0f b6 44 24 52	 movzx	 eax, BYTE PTR PatternHigh$8[rsp]
  00a0a	0f b6 4c 24 33	 movzx	 ecx, BYTE PTR RelX$5[rsp]
  00a0f	d3 f8		 sar	 eax, cl
  00a11	83 e0 01	 and	 eax, 1
  00a14	88 44 24 53	 mov	 BYTE PTR HighPattern$9[rsp], al

; 523  :                         }
; 524  :                         else

  00a18	eb 38		 jmp	 SHORT $LN45@ppuTick
$LN44@ppuTick:

; 525  :                         {
; 526  :                             LowPattern  = (PatternLow >> (7 - RelX)) & 1;

  00a1a	0f b6 44 24 51	 movzx	 eax, BYTE PTR PatternLow$7[rsp]
  00a1f	0f b6 4c 24 33	 movzx	 ecx, BYTE PTR RelX$5[rsp]
  00a24	ba 07 00 00 00	 mov	 edx, 7
  00a29	2b d1		 sub	 edx, ecx
  00a2b	8b ca		 mov	 ecx, edx
  00a2d	d3 f8		 sar	 eax, cl
  00a2f	83 e0 01	 and	 eax, 1
  00a32	88 44 24 54	 mov	 BYTE PTR LowPattern$10[rsp], al

; 527  :                             HighPattern = (PatternHigh >> (7 - RelX)) & 1;

  00a36	0f b6 44 24 52	 movzx	 eax, BYTE PTR PatternHigh$8[rsp]
  00a3b	0f b6 4c 24 33	 movzx	 ecx, BYTE PTR RelX$5[rsp]
  00a40	ba 07 00 00 00	 mov	 edx, 7
  00a45	2b d1		 sub	 edx, ecx
  00a47	8b ca		 mov	 ecx, edx
  00a49	d3 f8		 sar	 eax, cl
  00a4b	83 e0 01	 and	 eax, 1
  00a4e	88 44 24 53	 mov	 BYTE PTR HighPattern$9[rsp], al
$LN45@ppuTick:

; 528  :                         }
; 529  :                     
; 530  :                         uint8 Value = (HighPattern << 1) | LowPattern;

  00a52	0f b6 44 24 53	 movzx	 eax, BYTE PTR HighPattern$9[rsp]
  00a57	d1 e0		 shl	 eax, 1
  00a59	0f b6 4c 24 54	 movzx	 ecx, BYTE PTR LowPattern$10[rsp]
  00a5e	0b c1		 or	 eax, ecx
  00a60	88 44 24 56	 mov	 BYTE PTR Value$12[rsp], al

; 531  :                     
; 532  :                         if((((PixColourHigh << 2) | Value) % 4) != 0)

  00a64	0f b6 44 24 55	 movzx	 eax, BYTE PTR PixColourHigh$11[rsp]
  00a69	c1 e0 02	 shl	 eax, 2
  00a6c	0f b6 4c 24 56	 movzx	 ecx, BYTE PTR Value$12[rsp]
  00a71	0b c1		 or	 eax, ecx
  00a73	99		 cdq
  00a74	83 e2 03	 and	 edx, 3
  00a77	03 c2		 add	 eax, edx
  00a79	83 e0 03	 and	 eax, 3
  00a7c	2b c2		 sub	 eax, edx
  00a7e	85 c0		 test	 eax, eax
  00a80	74 13		 je	 SHORT $LN46@ppuTick

; 533  :                             SpriteColourIndex = (PixColourHigh << 2) | Value;

  00a82	0f b6 44 24 55	 movzx	 eax, BYTE PTR PixColourHigh$11[rsp]
  00a87	c1 e0 02	 shl	 eax, 2
  00a8a	0f b6 4c 24 56	 movzx	 ecx, BYTE PTR Value$12[rsp]
  00a8f	0b c1		 or	 eax, ecx
  00a91	88 44 24 32	 mov	 BYTE PTR SpriteColourIndex$4[rsp], al
$LN46@ppuTick:

; 534  : 
; 535  :                         if(SpriteIdx == 0 && ((SpriteColourIndex % 4) != 0) && SpriteColourIndex != NO_COLOUR)

  00a95	0f be 44 24 20	 movsx	 eax, BYTE PTR SpriteIdx$1[rsp]
  00a9a	85 c0		 test	 eax, eax
  00a9c	75 28		 jne	 SHORT $LN47@ppuTick
  00a9e	0f b6 44 24 32	 movzx	 eax, BYTE PTR SpriteColourIndex$4[rsp]
  00aa3	99		 cdq
  00aa4	83 e2 03	 and	 edx, 3
  00aa7	03 c2		 add	 eax, edx
  00aa9	83 e0 03	 and	 eax, 3
  00aac	2b c2		 sub	 eax, edx
  00aae	85 c0		 test	 eax, eax
  00ab0	74 14		 je	 SHORT $LN47@ppuTick
  00ab2	0f b6 44 24 32	 movzx	 eax, BYTE PTR SpriteColourIndex$4[rsp]
  00ab7	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00abc	74 08		 je	 SHORT $LN47@ppuTick

; 536  :                             Sprite0Check = true;

  00abe	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR Sprite0Check$22[rsp], 1
$LN47@ppuTick:
$LN43@ppuTick:

; 537  :                     }
; 538  :                 }

  00ac6	e9 45 fe ff ff	 jmp	 $LN5@ppuTick
$LN6@ppuTick:

; 539  : 
; 540  :                 /** **************/
; 541  :                 /* Drawing Pixel */
; 542  :             
; 543  :                 uint8 Colour[3] = {};

  00acb	48 8d 44 24 68	 lea	 rax, QWORD PTR Colour$20[rsp]
  00ad0	48 8b f8	 mov	 rdi, rax
  00ad3	33 c0		 xor	 eax, eax
  00ad5	b9 03 00 00 00	 mov	 ecx, 3
  00ada	f3 aa		 rep stosb

; 544  :                 bool32 BgrdBaseColour = true;

  00adc	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR BgrdBaseColour$21[rsp], 1

; 545  :             
; 546  :                 if(BackgroundEnabled)

  00ae4	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00ae9	74 49		 je	 SHORT $LN48@ppuTick

; 547  :                 {
; 548  :                     if((BgrdColourIndex % 4) != 0)

  00aeb	0f b6 44 24 57	 movzx	 eax, BYTE PTR BgrdColourIndex$13[rsp]
  00af0	99		 cdq
  00af1	83 e2 03	 and	 edx, 3
  00af4	03 c2		 add	 eax, edx
  00af6	83 e0 03	 and	 eax, 3
  00af9	2b c2		 sub	 eax, edx
  00afb	85 c0		 test	 eax, eax
  00afd	74 08		 je	 SHORT $LN49@ppuTick

; 549  :                         BgrdBaseColour = false;

  00aff	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR BgrdBaseColour$21[rsp], 0
$LN49@ppuTick:

; 550  : 
; 551  :                     uint8 BgrdPaletteIndex = readPpu8(BGRD_PALETTE_ADRS + BgrdColourIndex, Ppu);

  00b07	0f b6 44 24 57	 movzx	 eax, BYTE PTR BgrdColourIndex$13[rsp]
  00b0c	05 00 3f 00 00	 add	 eax, 16128		; 00003f00H
  00b11	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00b19	0f b7 c8	 movzx	 ecx, ax
  00b1c	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00b21	88 44 24 62	 mov	 BYTE PTR BgrdPaletteIndex$18[rsp], al

; 552  :                     getPaletteValue(BgrdPaletteIndex, Colour);

  00b25	48 8d 54 24 68	 lea	 rdx, QWORD PTR Colour$20[rsp]
  00b2a	0f b6 4c 24 62	 movzx	 ecx, BYTE PTR BgrdPaletteIndex$18[rsp]
  00b2f	e8 00 00 00 00	 call	 ?getPaletteValue@@YAXEPEAE@Z ; getPaletteValue
$LN48@ppuTick:

; 553  :                 }
; 554  : 
; 555  :                 bool32 SprtPixTransparent = true; 

  00b34	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR SprtPixTransparent$25[rsp], 1

; 556  :             
; 557  :                 if(SpritesEnabled)

  00b3f	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00b44	0f 84 b0 00 00
	00		 je	 $LN50@ppuTick

; 558  :                 {
; 559  :                     bool32 Priority = !(Sprite->Atrb & (1 << 5));

  00b4a	48 8b 44 24 78	 mov	 rax, QWORD PTR Sprite$24[rsp]
  00b4f	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00b53	83 e0 20	 and	 eax, 32			; 00000020H
  00b56	85 c0		 test	 eax, eax
  00b58	75 0d		 jne	 SHORT $LN99@ppuTick
  00b5a	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv588[rsp], 1
  00b65	eb 0b		 jmp	 SHORT $LN100@ppuTick
$LN99@ppuTick:
  00b67	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv588[rsp], 0
$LN100@ppuTick:
  00b72	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv588[rsp]
  00b79	89 84 24 b4 00
	00 00		 mov	 DWORD PTR Priority$28[rsp], eax

; 560  :                     if((SpriteColourIndex % 4) != 0)

  00b80	0f b6 44 24 32	 movzx	 eax, BYTE PTR SpriteColourIndex$4[rsp]
  00b85	99		 cdq
  00b86	83 e2 03	 and	 edx, 3
  00b89	03 c2		 add	 eax, edx
  00b8b	83 e0 03	 and	 eax, 3
  00b8e	2b c2		 sub	 eax, edx
  00b90	85 c0		 test	 eax, eax
  00b92	74 0b		 je	 SHORT $LN51@ppuTick

; 561  :                         SprtPixTransparent = false;

  00b94	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR SprtPixTransparent$25[rsp], 0
$LN51@ppuTick:

; 562  :                     
; 563  :                     if(SpriteColourIndex != NO_COLOUR && !SprtPixTransparent)

  00b9f	0f b6 44 24 32	 movzx	 eax, BYTE PTR SpriteColourIndex$4[rsp]
  00ba4	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00ba9	74 4f		 je	 SHORT $LN52@ppuTick
  00bab	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR SprtPixTransparent$25[rsp], 0
  00bb3	75 45		 jne	 SHORT $LN52@ppuTick

; 564  :                     {
; 565  :                         if(BgrdBaseColour || (!BgrdBaseColour && Priority))

  00bb5	83 7c 24 6c 00	 cmp	 DWORD PTR BgrdBaseColour$21[rsp], 0
  00bba	75 11		 jne	 SHORT $LN54@ppuTick
  00bbc	83 7c 24 6c 00	 cmp	 DWORD PTR BgrdBaseColour$21[rsp], 0
  00bc1	75 37		 jne	 SHORT $LN53@ppuTick
  00bc3	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR Priority$28[rsp], 0
  00bcb	74 2d		 je	 SHORT $LN53@ppuTick
$LN54@ppuTick:

; 566  :                         {
; 567  :                             uint8 SprtPaletteIndex = readPpu8(SPRT_PALETTE_ADRS + SpriteColourIndex, Ppu);                       

  00bcd	0f b6 44 24 32	 movzx	 eax, BYTE PTR SpriteColourIndex$4[rsp]
  00bd2	05 10 3f 00 00	 add	 eax, 16144		; 00003f10H
  00bd7	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00bdf	0f b7 c8	 movzx	 ecx, ax
  00be2	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00be7	88 44 24 63	 mov	 BYTE PTR SprtPaletteIndex$19[rsp], al

; 568  :                             getPaletteValue(SprtPaletteIndex, Colour);                        

  00beb	48 8d 54 24 68	 lea	 rdx, QWORD PTR Colour$20[rsp]
  00bf0	0f b6 4c 24 63	 movzx	 ecx, BYTE PTR SprtPaletteIndex$19[rsp]
  00bf5	e8 00 00 00 00	 call	 ?getPaletteValue@@YAXEPEAE@Z ; getPaletteValue
$LN53@ppuTick:
$LN52@ppuTick:
$LN50@ppuTick:

; 569  :                         }
; 570  :                     }
; 571  :                 }
; 572  : 
; 573  :                 // TODO: NOTE: SPRITE 0 should only work for the first sprite in the secondary oam ??? Causes problems with scrolling
; 574  : 
; 575  :                 /*
; 576  :                 // Sprite 0
; 577  :                 if(!BgrdBaseColour && !SprtPixTransparent)
; 578  :                 Registers->Status = Registers->Status | (1 << 6);
; 579  :                 */
; 580  :                 if(SpritesEnabled && !BgrdBaseColour && Sprite0Check)

  00bfa	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00bff	74 2a		 je	 SHORT $LN55@ppuTick
  00c01	83 7c 24 6c 00	 cmp	 DWORD PTR BgrdBaseColour$21[rsp], 0
  00c06	75 23		 jne	 SHORT $LN55@ppuTick
  00c08	83 7c 24 70 00	 cmp	 DWORD PTR Sprite0Check$22[rsp], 0
  00c0d	74 1c		 je	 SHORT $LN55@ppuTick

; 581  :                 {
; 582  :                     Sprite0Check = false;

  00c0f	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR Sprite0Check$22[rsp], 0

; 583  :                     Registers->Status = Registers->Status | (1 << 6);

  00c17	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00c1c	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00c20	83 c8 40	 or	 eax, 64			; 00000040H
  00c23	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00c28	88 41 02	 mov	 BYTE PTR [rcx+2], al
$LN55@ppuTick:

; 584  :                 }
; 585  :             
; 586  :                 // Draw Pixel
; 587  :                 if(BackgroundEnabled || SpritesEnabled)

  00c2b	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00c30	75 07		 jne	 SHORT $LN57@ppuTick
  00c32	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00c37	74 1d		 je	 SHORT $LN56@ppuTick
$LN57@ppuTick:

; 588  :                     drawPixel(Ppu, PixelX, PixelY, Colour);

  00c39	4c 8d 4c 24 68	 lea	 r9, QWORD PTR Colour$20[rsp]
  00c3e	44 0f b7 44 24
	74		 movzx	 r8d, WORD PTR PixelY$23[rsp]
  00c44	0f b7 54 24 58	 movzx	 edx, WORD PTR PixelX$14[rsp]
  00c49	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00c51	e8 00 00 00 00	 call	 ?drawPixel@@YAXPEAUppu@@GGPEAE@Z ; drawPixel
$LN56@ppuTick:
$LN41@ppuTick:

; 589  :             }
; 590  :             
; 591  :             // NOTE: Loading next background information. Also scrolling
; 592  :             loadFutureData(Ppu);

  00c56	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00c5e	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData

; 593  : 
; 594  :             if((Ppu->ScanlineCycle % 8) == 0 && (BackgroundEnabled || SpritesEnabled) )

  00c63	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00c6b	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00c72	99		 cdq
  00c73	83 e2 07	 and	 edx, 7
  00c76	03 c2		 add	 eax, edx
  00c78	83 e0 07	 and	 eax, 7
  00c7b	2b c2		 sub	 eax, edx
  00c7d	85 c0		 test	 eax, eax
  00c7f	75 18		 jne	 SHORT $LN58@ppuTick
  00c81	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00c86	75 07		 jne	 SHORT $LN59@ppuTick
  00c88	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00c8d	74 0a		 je	 SHORT $LN58@ppuTick
$LN59@ppuTick:

; 595  :                 scrollIncHorz(VRamIO);            

  00c8f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00c94	e8 00 00 00 00	 call	 ?scrollIncHorz@@YAXPEAUvram_io@@@Z ; scrollIncHorz
$LN58@ppuTick:

; 596  :             if(Ppu->ScanlineCycle == 256 && (BackgroundEnabled || SpritesEnabled))

  00c99	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00ca1	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00ca8	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00cad	75 18		 jne	 SHORT $LN60@ppuTick
  00caf	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00cb4	75 07		 jne	 SHORT $LN61@ppuTick
  00cb6	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00cbb	74 0a		 je	 SHORT $LN60@ppuTick
$LN61@ppuTick:

; 597  :                 scrollIncVert(VRamIO);

  00cbd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00cc2	e8 00 00 00 00	 call	 ?scrollIncVert@@YAXPEAUvram_io@@@Z ; scrollIncVert
$LN60@ppuTick:
$LN40@ppuTick:

; 598  :         }
; 599  : 
; 600  :         if(Ppu->ScanlineCycle == 257 && (BackgroundEnabled || SpritesEnabled))

  00cc7	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00ccf	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00cd6	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  00cdb	75 18		 jne	 SHORT $LN62@ppuTick
  00cdd	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00ce2	75 07		 jne	 SHORT $LN63@ppuTick
  00ce4	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00ce9	74 0a		 je	 SHORT $LN62@ppuTick
$LN63@ppuTick:

; 601  :             resetScrollHorz(VRamIO);

  00ceb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00cf0	e8 00 00 00 00	 call	 ?resetScrollHorz@@YAXPEAUvram_io@@@Z ; resetScrollHorz
$LN62@ppuTick:

; 602  :         
; 603  :         if(321 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 340)

  00cf5	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00cfd	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00d04	3d 41 01 00 00	 cmp	 eax, 321		; 00000141H
  00d09	7c 59		 jl	 SHORT $LN64@ppuTick
  00d0b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00d13	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00d1a	3d 54 01 00 00	 cmp	 eax, 340		; 00000154H
  00d1f	7f 43		 jg	 SHORT $LN64@ppuTick

; 604  :         {
; 605  :             loadFutureData(Ppu);

  00d21	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00d29	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData

; 606  :             if((Ppu->ScanlineCycle % 8) == 0 && (BackgroundEnabled || SpritesEnabled))

  00d2e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00d36	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00d3d	99		 cdq
  00d3e	83 e2 07	 and	 edx, 7
  00d41	03 c2		 add	 eax, edx
  00d43	83 e0 07	 and	 eax, 7
  00d46	2b c2		 sub	 eax, edx
  00d48	85 c0		 test	 eax, eax
  00d4a	75 18		 jne	 SHORT $LN65@ppuTick
  00d4c	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00d51	75 07		 jne	 SHORT $LN66@ppuTick
  00d53	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00d58	74 0a		 je	 SHORT $LN65@ppuTick
$LN66@ppuTick:

; 607  :                 scrollIncHorz(VRamIO);

  00d5a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00d5f	e8 00 00 00 00	 call	 ?scrollIncHorz@@YAXPEAUvram_io@@@Z ; scrollIncHorz
$LN65@ppuTick:
$LN64@ppuTick:
$LN29@ppuTick:

; 608  :         }
; 609  :     }
; 610  :     if(PostRenderLine)

  00d64	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR PostRenderLine$[rsp], 0
  00d6c	74 0a		 je	 SHORT $LN67@ppuTick

; 611  :     {
; 612  :         //debugOutputPatternTable(Ppu);
; 613  :         DrawScreen = true;

  00d6e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?DrawScreen@@3HA, 1
$LN67@ppuTick:

; 614  :     }
; 615  :     if(VBlankLine)

  00d78	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR VBlankLine$[rsp], 0
  00d80	74 6c		 je	 SHORT $LN68@ppuTick

; 616  :     {
; 617  :         if(Ppu->Scanline == 241 && Ppu->ScanlineCycle == 1)

  00d82	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00d8a	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  00d91	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  00d96	75 56		 jne	 SHORT $LN69@ppuTick
  00d98	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00da0	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00da7	83 f8 01	 cmp	 eax, 1
  00daa	75 42		 jne	 SHORT $LN69@ppuTick

; 618  :         {
; 619  :             Registers->Status |= (1 << 7); // Set VBlank Status

  00dac	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00db1	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00db5	0f ba e8 07	 bts	 eax, 7
  00db9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00dbe	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 620  : 
; 621  :             // NOTE: if turning on NMI when in vblank. The nmi will be generated immediately.
; 622  :             if( (Registers->Status & (1 << 7)) && ( Registers->Ctrl1 & (1 << 7)) )

  00dc1	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00dc6	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00dca	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00dcf	85 c0		 test	 eax, eax
  00dd1	74 1b		 je	 SHORT $LN70@ppuTick
  00dd3	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00dd8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00ddb	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00de0	85 c0		 test	 eax, eax
  00de2	74 0a		 je	 SHORT $LN70@ppuTick

; 623  :             {
; 624  :                 NmiTriggered = true;

  00de4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?NmiTriggered@@3HA, 1 ; NmiTriggered
$LN70@ppuTick:
$LN69@ppuTick:
$LN68@ppuTick:

; 625  :             }
; 626  :         }
; 627  :     }
; 628  :     if(PreRenderLine)

  00dee	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR PreRenderLine$[rsp], 0
  00df6	0f 84 d0 01 00
	00		 je	 $LN71@ppuTick

; 629  :     {
; 630  :         if(Ppu->ScanlineCycle == 1)

  00dfc	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00e04	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00e0b	83 f8 01	 cmp	 eax, 1
  00e0e	75 47		 jne	 SHORT $LN72@ppuTick

; 631  :         {
; 632  :             Registers->Status &= ~(1 << 5); // Clear Sprite Overflow

  00e10	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00e15	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00e19	83 e0 df	 and	 eax, -33		; ffffffffffffffdfH
  00e1c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00e21	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 633  :             Registers->Status &= ~(1 << 6); // Clear Sprite Zero Hit

  00e24	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00e29	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00e2d	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  00e30	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00e35	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 634  :             Registers->Status &= ~(1 << 7); // Clear Vblank status

  00e38	48 8b 44 24 38	 mov	 rax, QWORD PTR Registers$[rsp]
  00e3d	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00e41	0f ba f0 07	 btr	 eax, 7
  00e45	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Registers$[rsp]
  00e4a	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 635  :             NmiTriggered = false;

  00e4d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?NmiTriggered@@3HA, 0 ; NmiTriggered
$LN72@ppuTick:

; 636  :         }
; 637  :         
; 638  :         if(1 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 256)

  00e57	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00e5f	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00e66	83 f8 01	 cmp	 eax, 1
  00e69	7c 59		 jl	 SHORT $LN73@ppuTick
  00e6b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00e73	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00e7a	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00e7f	7f 43		 jg	 SHORT $LN73@ppuTick

; 639  :         {
; 640  :             loadFutureData(Ppu);

  00e81	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00e89	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData

; 641  :             if((Ppu->ScanlineCycle % 8) == 0 && (BackgroundEnabled || SpritesEnabled))

  00e8e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00e96	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00e9d	99		 cdq
  00e9e	83 e2 07	 and	 edx, 7
  00ea1	03 c2		 add	 eax, edx
  00ea3	83 e0 07	 and	 eax, 7
  00ea6	2b c2		 sub	 eax, edx
  00ea8	85 c0		 test	 eax, eax
  00eaa	75 18		 jne	 SHORT $LN74@ppuTick
  00eac	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00eb1	75 07		 jne	 SHORT $LN75@ppuTick
  00eb3	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00eb8	74 0a		 je	 SHORT $LN74@ppuTick
$LN75@ppuTick:

; 642  :                 scrollIncHorz(VRamIO);

  00eba	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00ebf	e8 00 00 00 00	 call	 ?scrollIncHorz@@YAXPEAUvram_io@@@Z ; scrollIncHorz
$LN74@ppuTick:
$LN73@ppuTick:

; 643  :         }
; 644  : 
; 645  :         if(Ppu->ScanlineCycle == 256 && (BackgroundEnabled || SpritesEnabled))

  00ec4	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00ecc	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00ed3	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00ed8	75 18		 jne	 SHORT $LN76@ppuTick
  00eda	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00edf	75 07		 jne	 SHORT $LN77@ppuTick
  00ee1	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00ee6	74 0a		 je	 SHORT $LN76@ppuTick
$LN77@ppuTick:

; 646  :             scrollIncVert(VRamIO);

  00ee8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00eed	e8 00 00 00 00	 call	 ?scrollIncVert@@YAXPEAUvram_io@@@Z ; scrollIncVert
$LN76@ppuTick:

; 647  :         
; 648  :         if(Ppu->ScanlineCycle == 257 && BackgroundEnabled)

  00ef2	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00efa	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00f01	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  00f06	75 11		 jne	 SHORT $LN78@ppuTick
  00f08	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00f0d	74 0a		 je	 SHORT $LN78@ppuTick

; 649  :             resetScrollHorz(VRamIO);

  00f0f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00f14	e8 00 00 00 00	 call	 ?resetScrollHorz@@YAXPEAUvram_io@@@Z ; resetScrollHorz
$LN78@ppuTick:

; 650  : 
; 651  :         if(280 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 304 && (BackgroundEnabled || SpritesEnabled))

  00f19	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00f21	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00f28	3d 18 01 00 00	 cmp	 eax, 280		; 00000118H
  00f2d	7c 2e		 jl	 SHORT $LN79@ppuTick
  00f2f	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00f37	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00f3e	3d 30 01 00 00	 cmp	 eax, 304		; 00000130H
  00f43	7f 18		 jg	 SHORT $LN79@ppuTick
  00f45	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00f4a	75 07		 jne	 SHORT $LN80@ppuTick
  00f4c	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00f51	74 0a		 je	 SHORT $LN79@ppuTick
$LN80@ppuTick:

; 652  :             resetScrollVert(VRamIO);

  00f53	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00f58	e8 00 00 00 00	 call	 ?resetScrollVert@@YAXPEAUvram_io@@@Z ; resetScrollVert
$LN79@ppuTick:

; 653  : 
; 654  :         if(321 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 340)

  00f5d	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00f65	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00f6c	3d 41 01 00 00	 cmp	 eax, 321		; 00000141H
  00f71	7c 59		 jl	 SHORT $LN81@ppuTick
  00f73	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00f7b	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00f82	3d 54 01 00 00	 cmp	 eax, 340		; 00000154H
  00f87	7f 43		 jg	 SHORT $LN81@ppuTick

; 655  :         {            
; 656  :             loadFutureData(Ppu);

  00f89	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00f91	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData

; 657  :             if((Ppu->ScanlineCycle % 8) == 0 && (BackgroundEnabled || SpritesEnabled))

  00f96	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00f9e	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00fa5	99		 cdq
  00fa6	83 e2 07	 and	 edx, 7
  00fa9	03 c2		 add	 eax, edx
  00fab	83 e0 07	 and	 eax, 7
  00fae	2b c2		 sub	 eax, edx
  00fb0	85 c0		 test	 eax, eax
  00fb2	75 18		 jne	 SHORT $LN82@ppuTick
  00fb4	83 7c 24 4c 00	 cmp	 DWORD PTR BackgroundEnabled$[rsp], 0
  00fb9	75 07		 jne	 SHORT $LN83@ppuTick
  00fbb	83 7c 24 48 00	 cmp	 DWORD PTR SpritesEnabled$[rsp], 0
  00fc0	74 0a		 je	 SHORT $LN82@ppuTick
$LN83@ppuTick:

; 658  :                 scrollIncHorz(VRamIO);        

  00fc2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00fc7	e8 00 00 00 00	 call	 ?scrollIncHorz@@YAXPEAUvram_io@@@Z ; scrollIncHorz
$LN82@ppuTick:
$LN81@ppuTick:
$LN71@ppuTick:

; 659  :         }
; 660  :     }
; 661  :     
; 662  :     ++Ppu->ScanlineCycle;

  00fcc	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00fd4	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00fdb	66 ff c0	 inc	 ax
  00fde	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00fe6	66 89 81 72 01
	00 00		 mov	 WORD PTR [rcx+370], ax

; 663  : 
; 664  :     if(Ppu->ScanlineCycle == 341)

  00fed	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00ff5	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00ffc	3d 55 01 00 00	 cmp	 eax, 341		; 00000155H
  01001	75 31		 jne	 SHORT $LN84@ppuTick

; 665  :     {
; 666  :         Ppu->Scanline += 1;

  01003	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0100b	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  01012	ff c0		 inc	 eax
  01014	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0101c	66 89 81 70 01
	00 00		 mov	 WORD PTR [rcx+368], ax

; 667  :         Ppu->ScanlineCycle = 0;

  01023	33 c0		 xor	 eax, eax
  01025	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0102d	66 89 81 72 01
	00 00		 mov	 WORD PTR [rcx+370], ax
$LN84@ppuTick:

; 668  :     }
; 669  : 
; 670  :     if(Ppu->Scanline == 262)

  01034	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0103c	0f b7 80 70 01
	00 00		 movzx	 eax, WORD PTR [rax+368]
  01043	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  01048	75 11		 jne	 SHORT $LN85@ppuTick

; 671  :     {
; 672  :         Ppu->Scanline = 0;

  0104a	33 c0		 xor	 eax, eax
  0104c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  01054	66 89 81 70 01
	00 00		 mov	 WORD PTR [rcx+368], ax
$LN85@ppuTick:

; 673  :     }
; 674  : }

  0105b	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  01062	5f		 pop	 rdi
  01063	c3		 ret	 0
?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z ENDP	; ppuTick
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
y$1 = 0
Vram$ = 32
?scrollIncVert@@YAXPEAUvram_io@@@Z PROC			; scrollIncVert

; 279  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 280  :     // NOTE: Code take from nesdev wiki. Could be quicker??
; 281  :     if ((Vram->VRamAdrs & 0x7000) != 0x7000) // if fine Y < 7

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	25 00 70 00 00	 and	 eax, 28672		; 00007000H
  00016	3d 00 70 00 00	 cmp	 eax, 28672		; 00007000H
  0001b	74 1a		 je	 SHORT $LN2@scrollIncV

; 282  :         Vram->VRamAdrs += 0x1000; // increment fine Y

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  00022	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00025	05 00 10 00 00	 add	 eax, 4096		; 00001000H
  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  0002f	66 89 01	 mov	 WORD PTR [rcx], ax

; 283  :     else

  00032	e9 87 00 00 00	 jmp	 $LN3@scrollIncV
$LN2@scrollIncV:

; 284  :     {
; 285  :         Vram->VRamAdrs &= ~0x7000; // fine Y = 0        

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  0003c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0003f	25 ff 8f ff ff	 and	 eax, -28673		; ffffffffffff8fffH
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  00049	66 89 01	 mov	 WORD PTR [rcx], ax

; 286  :         uint16 y = (Vram->VRamAdrs & 0x03E0) >> 5 ; // let y = coarse Y

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  00051	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00054	25 e0 03 00 00	 and	 eax, 992		; 000003e0H
  00059	c1 f8 05	 sar	 eax, 5
  0005c	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 287  :     
; 288  :         if (y == 29)

  00060	0f b7 04 24	 movzx	 eax, WORD PTR y$1[rsp]
  00064	83 f8 1d	 cmp	 eax, 29
  00067	75 1c		 jne	 SHORT $LN4@scrollIncV

; 289  :         {
; 290  :             y = 0; // coarse Y = 0

  00069	33 c0		 xor	 eax, eax
  0006b	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 291  :             Vram->VRamAdrs ^= 0x0800; // switch vertical nametable

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  00074	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00077	0f ba f8 0b	 btc	 eax, 11
  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  00080	66 89 01	 mov	 WORD PTR [rcx], ax
  00083	eb 39		 jmp	 SHORT $LN5@scrollIncV
$LN4@scrollIncV:

; 292  :         }
; 293  :         else if (y == 31)

  00085	0f b7 04 24	 movzx	 eax, WORD PTR y$1[rsp]
  00089	83 f8 1f	 cmp	 eax, 31
  0008c	75 08		 jne	 SHORT $LN6@scrollIncV

; 294  :             y = 0; // coarse Y = 0, nametable not switched

  0008e	33 c0		 xor	 eax, eax
  00090	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 295  :         else

  00094	eb 28		 jmp	 SHORT $LN7@scrollIncV
$LN6@scrollIncV:

; 296  :         {
; 297  :             y += 1; // increment coarse Y

  00096	0f b7 04 24	 movzx	 eax, WORD PTR y$1[rsp]
  0009a	ff c0		 inc	 eax
  0009c	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 298  :             Vram->VRamAdrs = (Vram->VRamAdrs & ~0x03E0) | (y << 5); // put coarse Y back into v

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  000a5	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000a8	25 1f fc ff ff	 and	 eax, -993		; fffffffffffffc1fH
  000ad	0f b7 0c 24	 movzx	 ecx, WORD PTR y$1[rsp]
  000b1	c1 e1 05	 shl	 ecx, 5
  000b4	0b c1		 or	 eax, ecx
  000b6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  000bb	66 89 01	 mov	 WORD PTR [rcx], ax
$LN7@scrollIncV:
$LN5@scrollIncV:
$LN3@scrollIncV:

; 299  :         }
; 300  :     }
; 301  : }

  000be	48 83 c4 18	 add	 rsp, 24
  000c2	c3		 ret	 0
?scrollIncVert@@YAXPEAUvram_io@@@Z ENDP			; scrollIncVert
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Vram$ = 8
?scrollIncHorz@@YAXPEAUvram_io@@@Z PROC			; scrollIncHorz

; 267  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 268  :     // NOTE: Code take from nesdev wiki. Could be quicker??
; 269  :     if ((Vram->VRamAdrs & 0x001F) == 31) // if coarse X == 31

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0000d	83 e0 1f	 and	 eax, 31
  00010	83 f8 1f	 cmp	 eax, 31
  00013	75 29		 jne	 SHORT $LN2@scrollIncH

; 270  :     {
; 271  :         Vram->VRamAdrs &= ~0x001F;  // coarse X = 0

  00015	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  0001a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0001d	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  00020	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Vram$[rsp]
  00025	66 89 01	 mov	 WORD PTR [rcx], ax

; 272  :         Vram->VRamAdrs ^= 0x0400;   // switch horizontal nametable

  00028	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00030	0f ba f8 0a	 btc	 eax, 10
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Vram$[rsp]
  00039	66 89 01	 mov	 WORD PTR [rcx], ax

; 273  :     }
; 274  :     else

  0003c	eb 12		 jmp	 SHORT $LN3@scrollIncH
$LN2@scrollIncH:

; 275  :         Vram->VRamAdrs += 1;                // increment coarse X

  0003e	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  00043	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00046	ff c0		 inc	 eax
  00048	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Vram$[rsp]
  0004d	66 89 01	 mov	 WORD PTR [rcx], ax
$LN3@scrollIncH:

; 276  : }

  00050	c3		 ret	 0
?scrollIncHorz@@YAXPEAUvram_io@@@Z ENDP			; scrollIncHorz
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
VRamIO$ = 8
?resetScrollVert@@YAXPEAUvram_io@@@Z PROC		; resetScrollVert

; 260  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 261  :     VRamIO->VRamAdrs &= ~(0x7BE0);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0000d	25 1f 84 ff ff	 and	 eax, -31713		; ffffffffffff841fH
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00017	66 89 01	 mov	 WORD PTR [rcx], ax

; 262  :     VRamIO->VRamAdrs |= (VRamIO->TempVRamAdrs & 0x7BE0);

  0001a	48 8b 44 24 08	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0001f	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00023	25 e0 7b 00 00	 and	 eax, 31712		; 00007be0H
  00028	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0002d	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00030	0b c8		 or	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00039	66 89 01	 mov	 WORD PTR [rcx], ax

; 263  : }

  0003c	c3		 ret	 0
?resetScrollVert@@YAXPEAUvram_io@@@Z ENDP		; resetScrollVert
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
VRamIO$ = 8
?resetScrollHorz@@YAXPEAUvram_io@@@Z PROC		; resetScrollHorz

; 254  : {   

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 255  :     VRamIO->VRamAdrs &= ~(0x041F);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0000d	25 e0 fb ff ff	 and	 eax, -1056		; fffffffffffffbe0H
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00017	66 89 01	 mov	 WORD PTR [rcx], ax

; 256  :     VRamIO->VRamAdrs |= (VRamIO->TempVRamAdrs & 0x041F);

  0001a	48 8b 44 24 08	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0001f	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00023	25 1f 04 00 00	 and	 eax, 1055		; 0000041fH
  00028	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0002d	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00030	0b c8		 or	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00039	66 89 01	 mov	 WORD PTR [rcx], ax

; 257  : }

  0003c	c3		 ret	 0
?resetScrollHorz@@YAXPEAUvram_io@@@Z ENDP		; resetScrollHorz
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
PreparedCount$ = 0
OamSpriteCount$1 = 1
Sprite$2 = 8
Oam$ = 32
SecondaryOam$ = 40
Scanline$ = 48
?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z PROC	; evaluateSecondaryOam

; 232  : {

  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 18	 sub	 rsp, 24

; 233  :     uint8 PreparedCount = 0;

  00014	c6 04 24 00	 mov	 BYTE PTR PreparedCount$[rsp], 0

; 234  :             
; 235  :     for(uint8 OamSpriteCount = 0; OamSpriteCount < OAM_SPRITE_TOTAL; ++OamSpriteCount)

  00018	c6 44 24 01 00	 mov	 BYTE PTR OamSpriteCount$1[rsp], 0
  0001d	eb 0b		 jmp	 SHORT $LN4@evaluateSe
$LN2@evaluateSe:
  0001f	0f b6 44 24 01	 movzx	 eax, BYTE PTR OamSpriteCount$1[rsp]
  00024	fe c0		 inc	 al
  00026	88 44 24 01	 mov	 BYTE PTR OamSpriteCount$1[rsp], al
$LN4@evaluateSe:
  0002a	0f b6 44 24 01	 movzx	 eax, BYTE PTR OamSpriteCount$1[rsp]
  0002f	83 f8 40	 cmp	 eax, 64			; 00000040H
  00032	0f 8d 8d 00 00
	00		 jge	 $LN3@evaluateSe

; 236  :     {
; 237  :         oam_sprite *Sprite = (oam_sprite *)Oam + OamSpriteCount;

  00038	0f b6 44 24 01	 movzx	 eax, BYTE PTR OamSpriteCount$1[rsp]
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Oam$[rsp]
  00042	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00046	48 89 44 24 08	 mov	 QWORD PTR Sprite$2[rsp], rax

; 238  :         
; 239  :         if(Scanline >= Sprite->Y && Scanline < (Sprite->Y + PIXEL_PER_TILE))

  0004b	0f b7 44 24 30	 movzx	 eax, WORD PTR Scanline$[rsp]
  00050	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Sprite$2[rsp]
  00055	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00058	3b c1		 cmp	 eax, ecx
  0005a	7c 59		 jl	 SHORT $LN5@evaluateSe
  0005c	0f b7 44 24 30	 movzx	 eax, WORD PTR Scanline$[rsp]
  00061	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Sprite$2[rsp]
  00066	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00069	83 c1 08	 add	 ecx, 8
  0006c	3b c1		 cmp	 eax, ecx
  0006e	7d 45		 jge	 SHORT $LN5@evaluateSe

; 240  :         {
; 241  :             if(PreparedCount < SECOND_OAM_SPRITE_NUM)

  00070	0f b6 04 24	 movzx	 eax, BYTE PTR PreparedCount$[rsp]
  00074	83 f8 08	 cmp	 eax, 8
  00077	7d 1c		 jge	 SHORT $LN6@evaluateSe

; 242  :                 SecondaryOam[PreparedCount++] = *Sprite;

  00079	48 8b 44 24 08	 mov	 rax, QWORD PTR Sprite$2[rsp]
  0007e	8b 00		 mov	 eax, DWORD PTR [rax]
  00080	0f b6 0c 24	 movzx	 ecx, BYTE PTR PreparedCount$[rsp]
  00084	48 8b 54 24 28	 mov	 rdx, QWORD PTR SecondaryOam$[rsp]
  00089	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0008c	0f b6 04 24	 movzx	 eax, BYTE PTR PreparedCount$[rsp]
  00090	fe c0		 inc	 al
  00092	88 04 24	 mov	 BYTE PTR PreparedCount$[rsp], al
$LN6@evaluateSe:

; 243  : 
; 244  :             if(Sprite->Y == 0xFF)

  00095	48 8b 44 24 08	 mov	 rax, QWORD PTR Sprite$2[rsp]
  0009a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0009d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000a2	75 11		 jne	 SHORT $LN7@evaluateSe

; 245  :                 Assert(1);

  000a4	33 c0		 xor	 eax, eax
  000a6	85 c0		 test	 eax, eax
  000a8	74 0b		 je	 SHORT $LN8@evaluateSe
  000aa	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN8@evaluateSe:
$LN7@evaluateSe:
$LN5@evaluateSe:

; 246  :         }
; 247  : 
; 248  :         if(PreparedCount == SECOND_OAM_SPRITE_NUM)

  000b5	0f b6 04 24	 movzx	 eax, BYTE PTR PreparedCount$[rsp]
  000b9	83 f8 08	 cmp	 eax, 8
  000bc	75 02		 jne	 SHORT $LN9@evaluateSe

; 249  :             break;

  000be	eb 05		 jmp	 SHORT $LN3@evaluateSe
$LN9@evaluateSe:

; 250  :     }

  000c0	e9 5a ff ff ff	 jmp	 $LN2@evaluateSe
$LN3@evaluateSe:

; 251  : }

  000c5	48 83 c4 18	 add	 rsp, 24
  000c9	c3		 ret	 0
?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z ENDP	; evaluateSecondaryOam
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Byte$1 = 0
Data$ = 8
SecondaryOam$ = 32
?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z PROC		; clearSecondaryOam

; 222  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 223  :     uint8 *Data = (uint8 *)SecondaryOam;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR SecondaryOam$[rsp]
  0000e	48 89 44 24 08	 mov	 QWORD PTR Data$[rsp], rax

; 224  :     
; 225  :     for(uint16 Byte = 0; Byte < (SECOND_OAM_SPRITE_NUM * sizeof(oam_sprite)); ++Byte)

  00013	33 c0		 xor	 eax, eax
  00015	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
  00019	eb 0b		 jmp	 SHORT $LN4@clearSecon
$LN2@clearSecon:
  0001b	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  0001f	66 ff c0	 inc	 ax
  00022	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
$LN4@clearSecon:
  00026	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  0002a	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  0002e	73 0f		 jae	 SHORT $LN3@clearSecon

; 226  :     {
; 227  :         Data[Byte] = 0xFF;

  00030	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Data$[rsp]
  00039	c6 04 01 ff	 mov	 BYTE PTR [rcx+rax], 255	; 000000ffH

; 228  :     }

  0003d	eb dc		 jmp	 SHORT $LN2@clearSecon
$LN3@clearSecon:

; 229  : }

  0003f	48 83 c4 18	 add	 rsp, 24
  00043	c3		 ret	 0
?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z ENDP		; clearSecondaryOam
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Cycle$ = 32
Atrb$1 = 33
NametableAddress$2 = 36
AtrbAddress$3 = 40
tv133 = 44
quadrantSelect$4 = 48
Ppu$ = 80
?loadFutureData@@YAXPEAUppu@@@Z PROC			; loadFutureData

; 188  : {                            

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 189  :     uint8 Cycle = (Ppu->ScanlineCycle - 1) % 8;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR Ppu$[rsp]
  0000e	0f b7 80 72 01
	00 00		 movzx	 eax, WORD PTR [rax+370]
  00015	ff c8		 dec	 eax
  00017	99		 cdq
  00018	83 e2 07	 and	 edx, 7
  0001b	03 c2		 add	 eax, edx
  0001d	83 e0 07	 and	 eax, 7
  00020	2b c2		 sub	 eax, edx
  00022	88 44 24 20	 mov	 BYTE PTR Cycle$[rsp], al

; 190  :     if(Cycle == 0) 

  00026	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 be 00 00
	00		 jne	 $LN2@loadFuture

; 191  :     {
; 192  :         LowPatternShiftReg = (LowPatternShiftReg << 8) | NextLowPattern;

  00033	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?LowPatternShiftReg@@3GA ; LowPatternShiftReg
  0003a	c1 e0 08	 shl	 eax, 8
  0003d	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?NextLowPattern@@3EA ; NextLowPattern
  00044	0b c1		 or	 eax, ecx
  00046	66 89 05 00 00
	00 00		 mov	 WORD PTR ?LowPatternShiftReg@@3GA, ax ; LowPatternShiftReg

; 193  :         HighPatternShiftReg = (HighPatternShiftReg << 8) | NextHighPattern;

  0004d	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?HighPatternShiftReg@@3GA ; HighPatternShiftReg
  00054	c1 e0 08	 shl	 eax, 8
  00057	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?NextHighPattern@@3EA ; NextHighPattern
  0005e	0b c1		 or	 eax, ecx
  00060	66 89 05 00 00
	00 00		 mov	 WORD PTR ?HighPatternShiftReg@@3GA, ax ; HighPatternShiftReg

; 194  :         PaletteLatchOld = PaletteLatchNew;

  00067	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PaletteLatchNew@@3EA ; PaletteLatchNew
  0006e	88 05 00 00 00
	00		 mov	 BYTE PTR ?PaletteLatchOld@@3EA, al ; PaletteLatchOld

; 195  :         PaletteLatchNew = NextAtrbByte << 2;

  00074	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?NextAtrbByte@@3EA ; NextAtrbByte
  0007b	c1 e0 02	 shl	 eax, 2
  0007e	88 05 00 00 00
	00		 mov	 BYTE PTR ?PaletteLatchNew@@3EA, al ; PaletteLatchNew

; 196  :                 
; 197  :         uint16 NametableAddress = 0x2000 | (Ppu->VRamIO.VRamAdrs & 0x0FFF);

  00084	48 8b 44 24 50	 mov	 rax, QWORD PTR Ppu$[rsp]
  00089	0f b7 80 74 01
	00 00		 movzx	 eax, WORD PTR [rax+372]
  00090	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00095	0f ba e8 0d	 bts	 eax, 13
  00099	66 89 44 24 24	 mov	 WORD PTR NametableAddress$2[rsp], ax

; 198  :         NextNametableAdrs = readPpu8(NametableAddress, Ppu) << 4;

  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR Ppu$[rsp]
  000a3	0f b7 4c 24 24	 movzx	 ecx, WORD PTR NametableAddress$2[rsp]
  000a8	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  000ad	0f b6 c0	 movzx	 eax, al
  000b0	c1 e0 04	 shl	 eax, 4
  000b3	66 89 05 00 00
	00 00		 mov	 WORD PTR ?NextNametableAdrs@@3GA, ax ; NextNametableAdrs

; 199  :         NextNametableAdrs += (Ppu->Registers->Ctrl1 & (1 << 4)) ? 0x1000 : 0;        

  000ba	48 8b 44 24 50	 mov	 rax, QWORD PTR Ppu$[rsp]
  000bf	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000c3	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000c6	83 e0 10	 and	 eax, 16
  000c9	85 c0		 test	 eax, eax
  000cb	74 0a		 je	 SHORT $LN7@loadFuture
  000cd	c7 44 24 2c 00
	10 00 00	 mov	 DWORD PTR tv133[rsp], 4096 ; 00001000H
  000d5	eb 08		 jmp	 SHORT $LN8@loadFuture
$LN7@loadFuture:
  000d7	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN8@loadFuture:
  000df	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  000e6	03 44 24 2c	 add	 eax, DWORD PTR tv133[rsp]
  000ea	66 89 05 00 00
	00 00		 mov	 WORD PTR ?NextNametableAdrs@@3GA, ax ; NextNametableAdrs
$LN2@loadFuture:

; 200  :     }
; 201  :     if(Cycle == 2)

  000f1	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  000f6	83 f8 02	 cmp	 eax, 2
  000f9	0f 85 9a 00 00
	00		 jne	 $LN3@loadFuture

; 202  :     {
; 203  :         uint16 AtrbAddress = 0x23C0 | (Ppu->VRamIO.VRamAdrs & 0x0C00) |
; 204  :             ((Ppu->VRamIO.VRamAdrs >> 4) & 0x38) | ((Ppu->VRamIO.VRamAdrs >> 2) & 0x07);   

  000ff	48 8b 44 24 50	 mov	 rax, QWORD PTR Ppu$[rsp]
  00104	0f b7 80 74 01
	00 00		 movzx	 eax, WORD PTR [rax+372]
  0010b	25 00 0c 00 00	 and	 eax, 3072		; 00000c00H
  00110	0d c0 23 00 00	 or	 eax, 9152		; 000023c0H
  00115	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0011a	0f b7 89 74 01
	00 00		 movzx	 ecx, WORD PTR [rcx+372]
  00121	c1 f9 04	 sar	 ecx, 4
  00124	83 e1 38	 and	 ecx, 56			; 00000038H
  00127	0b c1		 or	 eax, ecx
  00129	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0012e	0f b7 89 74 01
	00 00		 movzx	 ecx, WORD PTR [rcx+372]
  00135	c1 f9 02	 sar	 ecx, 2
  00138	83 e1 07	 and	 ecx, 7
  0013b	0b c1		 or	 eax, ecx
  0013d	66 89 44 24 28	 mov	 WORD PTR AtrbAddress$3[rsp], ax

; 205  :         uint8 Atrb = readPpu8(AtrbAddress, Ppu);

  00142	48 8b 54 24 50	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00147	0f b7 4c 24 28	 movzx	 ecx, WORD PTR AtrbAddress$3[rsp]
  0014c	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00151	88 44 24 21	 mov	 BYTE PTR Atrb$1[rsp], al

; 206  :         int quadrantSelect = ((Ppu->VRamIO.VRamAdrs & 2) >> 1) | ((Ppu->VRamIO.VRamAdrs & 0x40) >> 5);

  00155	48 8b 44 24 50	 mov	 rax, QWORD PTR Ppu$[rsp]
  0015a	0f b7 80 74 01
	00 00		 movzx	 eax, WORD PTR [rax+372]
  00161	83 e0 02	 and	 eax, 2
  00164	d1 f8		 sar	 eax, 1
  00166	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0016b	0f b7 89 74 01
	00 00		 movzx	 ecx, WORD PTR [rcx+372]
  00172	83 e1 40	 and	 ecx, 64			; 00000040H
  00175	c1 f9 05	 sar	 ecx, 5
  00178	0b c1		 or	 eax, ecx
  0017a	89 44 24 30	 mov	 DWORD PTR quadrantSelect$4[rsp], eax

; 207  :         
; 208  :         NextAtrbByte = ((0xFF & Atrb) >> (quadrantSelect*2)) & 3;       

  0017e	0f b6 44 24 21	 movzx	 eax, BYTE PTR Atrb$1[rsp]
  00183	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00188	8b 4c 24 30	 mov	 ecx, DWORD PTR quadrantSelect$4[rsp]
  0018c	d1 e1		 shl	 ecx, 1
  0018e	d3 f8		 sar	 eax, cl
  00190	83 e0 03	 and	 eax, 3
  00193	88 05 00 00 00
	00		 mov	 BYTE PTR ?NextAtrbByte@@3EA, al ; NextAtrbByte
$LN3@loadFuture:

; 209  :     }   
; 210  :     if(Cycle == 4)

  00199	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  0019e	83 f8 04	 cmp	 eax, 4
  001a1	75 3c		 jne	 SHORT $LN4@loadFuture

; 211  :     {
; 212  :         NextNametableAdrs = NextNametableAdrs + ((Ppu->VRamIO.VRamAdrs & 0x7000) >> 12);

  001a3	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  001aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Ppu$[rsp]
  001af	0f b7 89 74 01
	00 00		 movzx	 ecx, WORD PTR [rcx+372]
  001b6	81 e1 00 70 00
	00		 and	 ecx, 28672		; 00007000H
  001bc	c1 f9 0c	 sar	 ecx, 12
  001bf	03 c1		 add	 eax, ecx
  001c1	66 89 05 00 00
	00 00		 mov	 WORD PTR ?NextNametableAdrs@@3GA, ax ; NextNametableAdrs

; 213  :         NextLowPattern = readPpu8(NextNametableAdrs, Ppu);

  001c8	48 8b 54 24 50	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001cd	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  001d4	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  001d9	88 05 00 00 00
	00		 mov	 BYTE PTR ?NextLowPattern@@3EA, al ; NextLowPattern
$LN4@loadFuture:

; 214  :     }
; 215  :     if(Cycle == 6)

  001df	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  001e4	83 f8 06	 cmp	 eax, 6
  001e7	75 1d		 jne	 SHORT $LN5@loadFuture

; 216  :     {
; 217  :         NextHighPattern = readPpu8(NextNametableAdrs+8, Ppu);

  001e9	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  001f0	83 c0 08	 add	 eax, 8
  001f3	48 8b 54 24 50	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001f8	0f b7 c8	 movzx	 ecx, ax
  001fb	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00200	88 05 00 00 00
	00		 mov	 BYTE PTR ?NextHighPattern@@3EA, al ; NextHighPattern
$LN5@loadFuture:

; 218  :     }           
; 219  : }

  00206	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020a	c3		 ret	 0
?loadFutureData@@YAXPEAUppu@@@Z ENDP			; loadFutureData
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Byte$ = 48
Address$ = 56
Ppu$ = 64
?writePpu8@@YAXEGPEAUppu@@@Z PROC			; writePpu8

; 182  : {    

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 183  :     Address = ppuMemoryMirror(Address);

  00012	0f b7 4c 24 38	 movzx	 ecx, WORD PTR Address$[rsp]
  00017	e8 00 00 00 00	 call	 ?ppuMemoryMirror@@YAGG@Z ; ppuMemoryMirror
  0001c	66 89 44 24 38	 mov	 WORD PTR Address$[rsp], ax

; 184  :     write8(Byte, Address, Ppu->MemoryBase);

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00026	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00029	0f b7 54 24 38	 movzx	 edx, WORD PTR Address$[rsp]
  0002e	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00033	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8

; 185  : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
?writePpu8@@YAXEGPEAUppu@@@Z ENDP			; writePpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Result$ = 32
Address$ = 64
Ppu$ = 72
?readPpu8@@YAEGPEAUppu@@@Z PROC				; readPpu8

; 175  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 176  :     Address = ppuMemoryMirror(Address);

  0000e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00013	e8 00 00 00 00	 call	 ?ppuMemoryMirror@@YAGG@Z ; ppuMemoryMirror
  00018	66 89 44 24 40	 mov	 WORD PTR Address$[rsp], ax

; 177  :          
; 178  :     uint8 Result = read8(Address, Ppu->MemoryBase);

  0001d	48 8b 44 24 48	 mov	 rax, QWORD PTR Ppu$[rsp]
  00022	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00025	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0002a	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  0002f	88 44 24 20	 mov	 BYTE PTR Result$[rsp], al

; 179  :     return(Result);

  00033	0f b6 44 24 20	 movzx	 eax, BYTE PTR Result$[rsp]

; 180  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
?readPpu8@@YAEGPEAUppu@@@Z ENDP				; readPpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Address$ = 32
TestAddress$ = 36
tv140 = 40
InAddress$ = 64
?ppuMemoryMirror@@YAGG@Z PROC				; ppuMemoryMirror

; 99   : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 100  :     uint16 Address = InAddress;

  00009	0f b7 44 24 40	 movzx	 eax, WORD PTR InAddress$[rsp]
  0000e	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 101  :     if(Address >= 0x4000) // Over half of the memory map is mirrored

  00013	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00018	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0001d	7c 1a		 jl	 SHORT $LN4@ppuMemoryM

; 102  :         Address = Address % 0x4000; 

  0001f	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00024	99		 cdq
  00025	81 e2 ff 3f 00
	00		 and	 edx, 16383		; 00003fffH
  0002b	03 c2		 add	 eax, edx
  0002d	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  00032	2b c2		 sub	 eax, edx
  00034	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN4@ppuMemoryM:

; 103  : 
; 104  :     if(0x3F20 <= Address && Address < 0x4000)

  00039	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0003e	3d 20 3f 00 00	 cmp	 eax, 16160		; 00003f20H
  00043	7c 26		 jl	 SHORT $LN5@ppuMemoryM
  00045	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0004a	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0004f	7d 1a		 jge	 SHORT $LN5@ppuMemoryM

; 105  :         Address = (Address % (0x3F20 - 0x3F00)) + 0x3F00;

  00051	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00056	99		 cdq
  00057	83 e2 1f	 and	 edx, 31
  0005a	03 c2		 add	 eax, edx
  0005c	83 e0 1f	 and	 eax, 31
  0005f	2b c2		 sub	 eax, edx
  00061	05 00 3f 00 00	 add	 eax, 16128		; 00003f00H
  00066	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN5@ppuMemoryM:

; 106  :         
; 107  :     if(0x3F00 <= Address && Address < 0x3F20) // Palette

  0006b	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00070	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  00075	0f 8c 96 00 00
	00		 jl	 $LN6@ppuMemoryM
  0007b	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00080	3d 20 3f 00 00	 cmp	 eax, 16160		; 00003f20H
  00085	0f 8d 86 00 00
	00		 jge	 $LN6@ppuMemoryM

; 108  :     {
; 109  :         if(Address == 0x3F10)

  0008b	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00090	3d 10 3f 00 00	 cmp	 eax, 16144		; 00003f10H
  00095	75 0a		 jne	 SHORT $LN7@ppuMemoryM

; 110  :             Address = 0x3F00;

  00097	b8 00 3f 00 00	 mov	 eax, 16128		; 00003f00H
  0009c	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN7@ppuMemoryM:

; 111  :         if(Address == 0x3F14)

  000a1	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000a6	3d 14 3f 00 00	 cmp	 eax, 16148		; 00003f14H
  000ab	75 0a		 jne	 SHORT $LN8@ppuMemoryM

; 112  :             Address = 0x3F04;

  000ad	b8 04 3f 00 00	 mov	 eax, 16132		; 00003f04H
  000b2	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN8@ppuMemoryM:

; 113  :         if(Address == 0x3F18)

  000b7	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000bc	3d 18 3f 00 00	 cmp	 eax, 16152		; 00003f18H
  000c1	75 0a		 jne	 SHORT $LN9@ppuMemoryM

; 114  :             Address = 0x3F08;

  000c3	b8 08 3f 00 00	 mov	 eax, 16136		; 00003f08H
  000c8	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN9@ppuMemoryM:

; 115  :         if(Address == 0x3F1C)

  000cd	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000d2	3d 1c 3f 00 00	 cmp	 eax, 16156		; 00003f1cH
  000d7	75 0a		 jne	 SHORT $LN10@ppuMemoryM

; 116  :             Address = 0x3F0C;

  000d9	b8 0c 3f 00 00	 mov	 eax, 16140		; 00003f0cH
  000de	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN10@ppuMemoryM:

; 117  :         if(Address == 0x3F04 || Address == 0x3F08 || Address == 0x3F0C)

  000e3	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000e8	3d 04 3f 00 00	 cmp	 eax, 16132		; 00003f04H
  000ed	74 18		 je	 SHORT $LN12@ppuMemoryM
  000ef	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000f4	3d 08 3f 00 00	 cmp	 eax, 16136		; 00003f08H
  000f9	74 0c		 je	 SHORT $LN12@ppuMemoryM
  000fb	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00100	3d 0c 3f 00 00	 cmp	 eax, 16140		; 00003f0cH
  00105	75 0a		 jne	 SHORT $LN11@ppuMemoryM
$LN12@ppuMemoryM:

; 118  :             Address = 0x3F00;

  00107	b8 00 3f 00 00	 mov	 eax, 16128		; 00003f00H
  0010c	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN11@ppuMemoryM:
$LN6@ppuMemoryM:

; 119  :     }
; 120  :    
; 121  :     // NOTE: Nametable Mirroring. Controlled by Cartridge
; 122  :     if(0x3000 <= Address && Address < 0x3F00) // This first as it maps to the nametable range

  00111	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00116	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  0011b	7c 25		 jl	 SHORT $LN13@ppuMemoryM
  0011d	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00122	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  00127	7d 19		 jge	 SHORT $LN13@ppuMemoryM

; 123  :         Address = (Address % 0x0F00) + 0x2000;

  00129	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0012e	99		 cdq
  0012f	b9 00 0f 00 00	 mov	 ecx, 3840		; 00000f00H
  00134	f7 f9		 idiv	 ecx
  00136	8b c2		 mov	 eax, edx
  00138	05 00 20 00 00	 add	 eax, 8192		; 00002000H
  0013d	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN13@ppuMemoryM:

; 124  :     
; 125  :     if(Address >= 0x2000 && Address < 0x3000) 

  00142	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00147	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0014c	0f 8c df 00 00
	00		 jl	 $LN14@ppuMemoryM
  00152	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00157	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  0015c	0f 8d cf 00 00
	00		 jge	 $LN14@ppuMemoryM

; 126  :     {
; 127  :         switch(GlobalMirrorType)

  00162	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalMirrorType@@3EA
  00169	88 44 24 28	 mov	 BYTE PTR tv140[rsp], al
  0016d	80 7c 24 28 00	 cmp	 BYTE PTR tv140[rsp], 0
  00172	74 1e		 je	 SHORT $LN15@ppuMemoryM
  00174	80 7c 24 28 01	 cmp	 BYTE PTR tv140[rsp], 1
  00179	74 38		 je	 SHORT $LN16@ppuMemoryM
  0017b	80 7c 24 28 02	 cmp	 BYTE PTR tv140[rsp], 2
  00180	74 5a		 je	 SHORT $LN18@ppuMemoryM
  00182	80 7c 24 28 03	 cmp	 BYTE PTR tv140[rsp], 3
  00187	0f 84 90 00 00
	00		 je	 $LN22@ppuMemoryM
  0018d	e9 8d 00 00 00	 jmp	 $LN23@ppuMemoryM
$LN15@ppuMemoryM:

; 128  :         {
; 129  :             case SINGLE_SCREEN_MIRROR:
; 130  :             {
; 131  :                 Address = (Address % 0x0400) + 0x2000;

  00192	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00197	99		 cdq
  00198	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  0019e	03 c2		 add	 eax, edx
  001a0	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  001a5	2b c2		 sub	 eax, edx
  001a7	05 00 20 00 00	 add	 eax, 8192		; 00002000H
  001ac	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 132  :                 break;

  001b1	eb 7e		 jmp	 SHORT $LN2@ppuMemoryM
$LN16@ppuMemoryM:

; 133  :             }
; 134  :             case VERTICAL_MIRROR:
; 135  :             {
; 136  :                 if(Address >= 0x2800 && Address < 0x3000)

  001b3	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001b8	3d 00 28 00 00	 cmp	 eax, 10240		; 00002800H
  001bd	7c 1b		 jl	 SHORT $LN17@ppuMemoryM
  001bf	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001c4	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  001c9	7d 0f		 jge	 SHORT $LN17@ppuMemoryM

; 137  :                     Address -= 0x0800;

  001cb	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001d0	2d 00 08 00 00	 sub	 eax, 2048		; 00000800H
  001d5	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN17@ppuMemoryM:

; 138  :                 break;

  001da	eb 55		 jmp	 SHORT $LN2@ppuMemoryM
$LN18@ppuMemoryM:

; 139  :             }
; 140  :             case HORIZONTAL_MIRROR:
; 141  :             {
; 142  :                 if( (Address >= 0x2400 && Address < 0x2800) ||

  001dc	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001e1	3d 00 24 00 00	 cmp	 eax, 9216		; 00002400H
  001e6	7c 0c		 jl	 SHORT $LN21@ppuMemoryM
  001e8	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001ed	3d 00 28 00 00	 cmp	 eax, 10240		; 00002800H
  001f2	7c 18		 jl	 SHORT $LN20@ppuMemoryM
$LN21@ppuMemoryM:
  001f4	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001f9	3d 00 2c 00 00	 cmp	 eax, 11264		; 00002c00H
  001fe	7c 1b		 jl	 SHORT $LN19@ppuMemoryM
  00200	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00205	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  0020a	7d 0f		 jge	 SHORT $LN19@ppuMemoryM
$LN20@ppuMemoryM:

; 143  :                     (Address >= 0x2C00 && Address < 0x3000) )
; 144  :                     Address -= 0x0400; 

  0020c	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00211	2d 00 04 00 00	 sub	 eax, 1024		; 00000400H
  00216	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN19@ppuMemoryM:

; 145  :                 break;

  0021b	eb 14		 jmp	 SHORT $LN2@ppuMemoryM
$LN22@ppuMemoryM:

; 146  :             }
; 147  :             case FOUR_SCREEN_MIRROR:
; 148  :             {
; 149  :                 break;

  0021d	eb 12		 jmp	 SHORT $LN2@ppuMemoryM
$LN23@ppuMemoryM:

; 150  :             }
; 151  :             default:
; 152  :             {
; 153  :                 Assert(0);

  0021f	33 c0		 xor	 eax, eax
  00221	83 f8 01	 cmp	 eax, 1
  00224	74 0b		 je	 SHORT $LN24@ppuMemoryM
  00226	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN24@ppuMemoryM:
$LN2@ppuMemoryM:
$LN14@ppuMemoryM:

; 154  :                 break;
; 155  :             }
; 156  :         }
; 157  :     }
; 158  : 
; 159  : #if 1
; 160  :     // Debug tests, first is doing mirror again to see if it changes,
; 161  :     // if so then need to reorder mirror
; 162  :     uint16 TestAddress = Address;

  00231	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00236	66 89 44 24 24	 mov	 WORD PTR TestAddress$[rsp], ax

; 163  :     if(InAddress != Address)

  0023b	0f b7 44 24 40	 movzx	 eax, WORD PTR InAddress$[rsp]
  00240	0f b7 4c 24 20	 movzx	 ecx, WORD PTR Address$[rsp]
  00245	3b c1		 cmp	 eax, ecx
  00247	74 0f		 je	 SHORT $LN25@ppuMemoryM

; 164  :         TestAddress = ppuMemoryMirror(Address); 

  00249	0f b7 4c 24 20	 movzx	 ecx, WORD PTR Address$[rsp]
  0024e	e8 00 00 00 00	 call	 ?ppuMemoryMirror@@YAGG@Z ; ppuMemoryMirror
  00253	66 89 44 24 24	 mov	 WORD PTR TestAddress$[rsp], ax
$LN25@ppuMemoryM:

; 165  :     Assert(TestAddress == Address);

  00258	0f b7 44 24 24	 movzx	 eax, WORD PTR TestAddress$[rsp]
  0025d	0f b7 4c 24 20	 movzx	 ecx, WORD PTR Address$[rsp]
  00262	3b c1		 cmp	 eax, ecx
  00264	74 0b		 je	 SHORT $LN26@ppuMemoryM
  00266	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN26@ppuMemoryM:

; 166  :     Assert(Address < 0x4000);

  00271	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00276	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0027b	7c 0b		 jl	 SHORT $LN27@ppuMemoryM
  0027d	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN27@ppuMemoryM:

; 167  :     Assert( !(Address >= 0x3F20 && Address < 0x4000) );

  00288	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0028d	3d 20 3f 00 00	 cmp	 eax, 16160		; 00003f20H
  00292	7c 17		 jl	 SHORT $LN28@ppuMemoryM
  00294	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00299	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0029e	7d 0b		 jge	 SHORT $LN28@ppuMemoryM
  002a0	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN28@ppuMemoryM:

; 168  :     Assert( !(Address >= 0x3000 && Address < 0x3F00) );

  002ab	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  002b0	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  002b5	7c 17		 jl	 SHORT $LN29@ppuMemoryM
  002b7	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  002bc	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  002c1	7d 0b		 jge	 SHORT $LN29@ppuMemoryM
  002c3	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN29@ppuMemoryM:

; 169  : #endif
; 170  : 
; 171  :     return Address;

  002ce	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]

; 172  : }

  002d3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002d7	c3		 ret	 0
?ppuMemoryMirror@@YAGG@Z ENDP				; ppuMemoryMirror
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
;	COMDAT ?drawPixel@@YAXPEAUppu@@GGPEAE@Z
_TEXT	SEGMENT
CurrentPixel$ = 0
Ppu$ = 32
X$ = 40
Y$ = 48
Colour$ = 56
?drawPixel@@YAXPEAUppu@@GGPEAE@Z PROC			; drawPixel, COMDAT

; 92   : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	48 83 ec 18	 sub	 rsp, 24

; 93   :     uint32 *CurrentPixel = (Ppu->BasePixel + (Y * PIXEL_WIDTH)) + X;

  00019	0f b7 44 24 30	 movzx	 eax, WORD PTR Y$[rsp]
  0001e	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  00024	48 98		 cdqe
  00026	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0002b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0002f	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00033	0f b7 4c 24 28	 movzx	 ecx, WORD PTR X$[rsp]
  00038	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0003c	48 89 04 24	 mov	 QWORD PTR CurrentPixel$[rsp], rax

; 94   :     *CurrentPixel  = ((Colour[0] << 16) | (Colour[1] << 8) | Colour[2]);

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	48 6b c0 00	 imul	 rax, rax, 0
  00049	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Colour$[rsp]
  0004e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00052	c1 e0 10	 shl	 eax, 16
  00055	b9 01 00 00 00	 mov	 ecx, 1
  0005a	48 6b c9 01	 imul	 rcx, rcx, 1
  0005e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Colour$[rsp]
  00063	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00067	c1 e1 08	 shl	 ecx, 8
  0006a	0b c1		 or	 eax, ecx
  0006c	b9 01 00 00 00	 mov	 ecx, 1
  00071	48 6b c9 02	 imul	 rcx, rcx, 2
  00075	48 8b 54 24 38	 mov	 rdx, QWORD PTR Colour$[rsp]
  0007a	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007e	0b c1		 or	 eax, ecx
  00080	48 8b 0c 24	 mov	 rcx, QWORD PTR CurrentPixel$[rsp]
  00084	89 01		 mov	 DWORD PTR [rcx], eax

; 95   : }

  00086	48 83 c4 18	 add	 rsp, 24
  0008a	c3		 ret	 0
?drawPixel@@YAXPEAUppu@@GGPEAE@Z ENDP			; drawPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\palette.cpp
_TEXT	SEGMENT
Entry$ = 8
Colour$ = 16
?getPaletteValue@@YAXEPEAE@Z PROC			; getPaletteValue

; 31   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 32   :     Colour[0] = Palette[Entry][0];

  00009	0f b6 44 24 08	 movzx	 eax, BYTE PTR Entry$[rsp]
  0000e	48 6b c0 03	 imul	 rax, rax, 3
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Palette@@3PAY02EA ; Palette
  00019	48 03 c8	 add	 rcx, rax
  0001c	48 8b c1	 mov	 rax, rcx
  0001f	b9 01 00 00 00	 mov	 ecx, 1
  00024	48 6b c9 00	 imul	 rcx, rcx, 0
  00028	ba 01 00 00 00	 mov	 edx, 1
  0002d	48 6b d2 00	 imul	 rdx, rdx, 0
  00031	4c 8b 44 24 10	 mov	 r8, QWORD PTR Colour$[rsp]
  00036	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0003a	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al

; 33   :     Colour[1] = Palette[Entry][1];

  0003e	0f b6 44 24 08	 movzx	 eax, BYTE PTR Entry$[rsp]
  00043	48 6b c0 03	 imul	 rax, rax, 3
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Palette@@3PAY02EA ; Palette
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	48 6b c9 01	 imul	 rcx, rcx, 1
  0005d	ba 01 00 00 00	 mov	 edx, 1
  00062	48 6b d2 01	 imul	 rdx, rdx, 1
  00066	4c 8b 44 24 10	 mov	 r8, QWORD PTR Colour$[rsp]
  0006b	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0006f	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al

; 34   :     Colour[2]  = Palette[Entry][2];

  00073	0f b6 44 24 08	 movzx	 eax, BYTE PTR Entry$[rsp]
  00078	48 6b c0 03	 imul	 rax, rax, 3
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Palette@@3PAY02EA ; Palette
  00083	48 03 c8	 add	 rcx, rax
  00086	48 8b c1	 mov	 rax, rcx
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	48 6b c9 02	 imul	 rcx, rcx, 2
  00092	ba 01 00 00 00	 mov	 edx, 1
  00097	48 6b d2 02	 imul	 rdx, rdx, 2
  0009b	4c 8b 44 24 10	 mov	 r8, QWORD PTR Colour$[rsp]
  000a0	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  000a4	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al

; 35   : }

  000a8	c3		 ret	 0
?getPaletteValue@@YAXEPEAE@Z ENDP			; getPaletteValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
BytesRead$1 = 64
FileData$ = 72
FileHandle$ = 80
Filesize$2 = 88
Filename$ = 112
Size$ = 120
?LoadFile@@YAPEAXPEADPEAI@Z PROC			; LoadFile

; 302  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 303  :     void *FileData = 0;

  0000e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR FileData$[rsp], 0

; 304  :     
; 305  :     HANDLE FileHandle = CreateFileA(Filename, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);

  00017	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00020	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00028	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  00030	45 33 c9	 xor	 r9d, r9d
  00033	41 b8 01 00 00
	00		 mov	 r8d, 1
  00039	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0003e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Filename$[rsp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00049	48 89 44 24 50	 mov	 QWORD PTR FileHandle$[rsp], rax

; 306  :     if(FileHandle != INVALID_HANDLE_VALUE)

  0004e	48 83 7c 24 50
	ff		 cmp	 QWORD PTR FileHandle$[rsp], -1
  00054	0f 84 8b 00 00
	00		 je	 $LN2@LoadFile

; 307  :     {
; 308  :         LARGE_INTEGER Filesize;
; 309  :         if(GetFileSizeEx(FileHandle, &Filesize))

  0005a	48 8d 54 24 58	 lea	 rdx, QWORD PTR Filesize$2[rsp]
  0005f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  0006a	85 c0		 test	 eax, eax
  0006c	74 77		 je	 SHORT $LN4@LoadFile

; 310  :         {
; 311  :             FileData = VirtualAlloc(0, Filesize.LowPart, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  0006e	8b 44 24 58	 mov	 eax, DWORD PTR Filesize$2[rsp]
  00072	41 b9 04 00 00
	00		 mov	 r9d, 4
  00078	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0007e	8b d0		 mov	 edx, eax
  00080	33 c9		 xor	 ecx, ecx
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00088	48 89 44 24 48	 mov	 QWORD PTR FileData$[rsp], rax

; 312  :             if(FileData)

  0008d	48 83 7c 24 48
	00		 cmp	 QWORD PTR FileData$[rsp], 0
  00093	74 50		 je	 SHORT $LN6@LoadFile

; 313  :             {
; 314  :                 DWORD BytesRead;
; 315  :                 if(ReadFile(FileHandle, FileData, Filesize.LowPart, &BytesRead, 0) &&

  00095	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009e	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  000a3	44 8b 44 24 58	 mov	 r8d, DWORD PTR Filesize$2[rsp]
  000a8	48 8b 54 24 48	 mov	 rdx, QWORD PTR FileData$[rsp]
  000ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  000b8	85 c0		 test	 eax, eax
  000ba	74 17		 je	 SHORT $LN8@LoadFile
  000bc	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  000c0	39 44 24 58	 cmp	 DWORD PTR Filesize$2[rsp], eax
  000c4	75 0d		 jne	 SHORT $LN8@LoadFile

; 316  :                    (Filesize.LowPart == BytesRead))
; 317  :                 {
; 318  :                     *Size = (uint32)BytesRead;

  000c6	48 8b 44 24 78	 mov	 rax, QWORD PTR Size$[rsp]
  000cb	8b 4c 24 40	 mov	 ecx, DWORD PTR BytesRead$1[rsp]
  000cf	89 08		 mov	 DWORD PTR [rax], ecx

; 319  :                     // It worked!
; 320  :                 }
; 321  :                 else

  000d1	eb 12		 jmp	 SHORT $LN9@LoadFile
$LN8@LoadFile:

; 322  :                 {
; 323  :                     Assert(0);

  000d3	33 c0		 xor	 eax, eax
  000d5	83 f8 01	 cmp	 eax, 1
  000d8	74 0b		 je	 SHORT $LN10@LoadFile
  000da	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN10@LoadFile:
$LN9@LoadFile:
$LN6@LoadFile:
$LN4@LoadFile:
$LN2@LoadFile:

; 324  :                 }
; 325  :             }
; 326  :             else
; 327  :             {
; 328  :             }   
; 329  :         }
; 330  :         else
; 331  :         {
; 332  :         }
; 333  :     }
; 334  :     else
; 335  :     {
; 336  : //        Assert(0);
; 337  :     }
; 338  :     return(FileData);

  000e5	48 8b 44 24 48	 mov	 rax, QWORD PTR FileData$[rsp]

; 339  : }

  000ea	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000ee	c3		 ret	 0
?LoadFile@@YAPEAXPEADPEAI@Z ENDP			; LoadFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
tv64 = 32
IsDown$1 = 36
NameSize$2 = 40
tv146 = 44
tv67 = 48
tv70 = 52
tv73 = 56
tv79 = 60
tv83 = 64
tv87 = 68
tv91 = 72
tv95 = 76
tv131 = 80
tv135 = 84
tv139 = 88
tv75 = 96
WasDown$3 = 104
AltPressed$4 = 108
FileOpened$5 = 112
Result$ = 120
newRom$6 = 128
tempFileName$7 = 288
__$ArrayPad$ = 544
WindowHandle$ = 576
Message$ = 584
wParam$ = 592
lParam$ = 600
?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC		; WinInputCallback

; 134  : {

$LN60:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec 30 02
	00 00		 sub	 rsp, 560		; 00000230H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 135  :     LRESULT Result = 0;

  0002d	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 136  :     
; 137  :     switch(Message) 

  00036	8b 84 24 48 02
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003d	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00041	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  00046	77 21		 ja	 SHORT $LN57@WinInputCa
  00048	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  0004d	74 67		 je	 SHORT $LN10@WinInputCa
  0004f	83 7c 24 20 01	 cmp	 DWORD PTR tv64[rsp], 1
  00054	74 56		 je	 SHORT $LN8@WinInputCa
  00056	83 7c 24 20 02	 cmp	 DWORD PTR tv64[rsp], 2
  0005b	74 68		 je	 SHORT $LN11@WinInputCa
  0005d	83 7c 24 20 05	 cmp	 DWORD PTR tv64[rsp], 5
  00062	74 4d		 je	 SHORT $LN9@WinInputCa
  00064	e9 92 04 00 00	 jmp	 $LN33@WinInputCa
$LN57@WinInputCa:
  00069	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 256 ; 00000100H
  00071	0f 82 84 04 00
	00		 jb	 $LN33@WinInputCa
  00077	81 7c 24 20 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  0007f	76 49		 jbe	 SHORT $LN12@WinInputCa
  00081	81 7c 24 20 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  00089	0f 86 6c 04 00
	00		 jbe	 $LN33@WinInputCa
  0008f	81 7c 24 20 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  00097	76 31		 jbe	 SHORT $LN12@WinInputCa
  00099	81 7c 24 20 11
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 273 ; 00000111H
  000a1	0f 84 c5 02 00
	00		 je	 $LN26@WinInputCa
  000a7	e9 4f 04 00 00	 jmp	 $LN33@WinInputCa
$LN8@WinInputCa:

; 138  :     { 
; 139  :         case WM_CREATE:
; 140  :         {
; 141  :             // Initialize the window. 
; 142  :             break; 

  000ac	e9 74 04 00 00	 jmp	 $LN2@WinInputCa
$LN9@WinInputCa:

; 143  :         }
; 144  :         
; 145  :         case WM_SIZE:
; 146  :         {
; 147  :             // Set the size and position of the window. 
; 148  :             break;

  000b1	e9 6f 04 00 00	 jmp	 $LN2@WinInputCa
$LN10@WinInputCa:

; 149  :         }
; 150  :         case WM_CLOSE:
; 151  :         {
; 152  :             GlobalRunning = false;

  000b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0

; 153  :             break;

  000c0	e9 60 04 00 00	 jmp	 $LN2@WinInputCa
$LN11@WinInputCa:

; 154  :         }
; 155  :         case WM_DESTROY:
; 156  :         {
; 157  :             break;

  000c5	e9 5b 04 00 00	 jmp	 $LN2@WinInputCa
$LN12@WinInputCa:

; 158  :         }
; 159  :         case WM_SYSKEYDOWN:
; 160  :         case WM_SYSKEYUP:
; 161  :         case WM_KEYDOWN:
; 162  :         case WM_KEYUP:
; 163  :         {
; 164  :             bool32 IsDown = ((lParam & (1<<31)) == 0);

  000ca	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  000d2	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  000d8	48 85 c0	 test	 rax, rax
  000db	75 0a		 jne	 SHORT $LN35@WinInputCa
  000dd	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  000e5	eb 08		 jmp	 SHORT $LN36@WinInputCa
$LN35@WinInputCa:
  000e7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN36@WinInputCa:
  000ef	8b 44 24 30	 mov	 eax, DWORD PTR tv67[rsp]
  000f3	89 44 24 24	 mov	 DWORD PTR IsDown$1[rsp], eax

; 165  :             bool32 WasDown = ((lParam & (1<<30)) != 0);

  000f7	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  000ff	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  00105	48 85 c0	 test	 rax, rax
  00108	74 0a		 je	 SHORT $LN37@WinInputCa
  0010a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00112	eb 08		 jmp	 SHORT $LN38@WinInputCa
$LN37@WinInputCa:
  00114	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN38@WinInputCa:
  0011c	8b 44 24 34	 mov	 eax, DWORD PTR tv70[rsp]
  00120	89 44 24 68	 mov	 DWORD PTR WasDown$3[rsp], eax

; 166  : 
; 167  :             // NOTE: Alt only on SYSDOWN messages
; 168  :             bool32 AltPressed = ((lParam & (1<<29)) != 0);

  00124	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  0012c	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00132	48 85 c0	 test	 rax, rax
  00135	74 0a		 je	 SHORT $LN39@WinInputCa
  00137	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  0013f	eb 08		 jmp	 SHORT $LN40@WinInputCa
$LN39@WinInputCa:
  00141	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN40@WinInputCa:
  00149	8b 44 24 38	 mov	 eax, DWORD PTR tv73[rsp]
  0014d	89 44 24 6c	 mov	 DWORD PTR AltPressed$4[rsp], eax

; 169  :             
; 170  :             if(IsDown != WasDown)

  00151	8b 44 24 68	 mov	 eax, DWORD PTR WasDown$3[rsp]
  00155	39 44 24 24	 cmp	 DWORD PTR IsDown$1[rsp], eax
  00159	0f 84 08 02 00
	00		 je	 $LN13@WinInputCa

; 171  :             {  
; 172  :                 switch(wParam)

  0015f	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR wParam$[rsp]
  00167	48 89 44 24 60	 mov	 QWORD PTR tv75[rsp], rax
  0016c	48 8b 44 24 60	 mov	 rax, QWORD PTR tv75[rsp]
  00171	48 83 e8 0d	 sub	 rax, 13
  00175	48 89 44 24 60	 mov	 QWORD PTR tv75[rsp], rax
  0017a	48 83 7c 24 60
	66		 cmp	 QWORD PTR tv75[rsp], 102 ; 00000066H
  00180	0f 87 e1 01 00
	00		 ja	 $LN4@WinInputCa
  00186	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__ImageBase
  0018d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv75[rsp]
  00192	0f b6 8c 08 00
	00 00 00	 movzx	 ecx, BYTE PTR $LN58@WinInputCa[rax+rcx]
  0019a	8b 8c 88 00 00
	00 00		 mov	 ecx, DWORD PTR $LN59@WinInputCa[rax+rcx*4]
  001a1	48 03 c8	 add	 rcx, rax
  001a4	ff e1		 jmp	 rcx
$LN14@WinInputCa:

; 173  :                 {
; 174  :                     case VK_UP:
; 175  :                     {
; 176  :                         WinInput.buttons[input::B_UP] = IsDown ? 1 : 0;

  001a6	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  001ab	74 0a		 je	 SHORT $LN41@WinInputCa
  001ad	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  001b5	eb 08		 jmp	 SHORT $LN42@WinInputCa
$LN41@WinInputCa:
  001b7	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN42@WinInputCa:
  001bf	b8 04 00 00 00	 mov	 eax, 4
  001c4	48 6b c0 04	 imul	 rax, rax, 4
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  001cf	8b 54 24 3c	 mov	 edx, DWORD PTR tv79[rsp]
  001d3	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 177  :                         break;

  001d6	e9 8c 01 00 00	 jmp	 $LN4@WinInputCa
$LN15@WinInputCa:

; 178  :                     }
; 179  :                     case VK_DOWN:
; 180  :                     {
; 181  :                         WinInput.buttons[input::B_DOWN] = IsDown ? 1 : 0;

  001db	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  001e0	74 0a		 je	 SHORT $LN43@WinInputCa
  001e2	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  001ea	eb 08		 jmp	 SHORT $LN44@WinInputCa
$LN43@WinInputCa:
  001ec	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN44@WinInputCa:
  001f4	b8 04 00 00 00	 mov	 eax, 4
  001f9	48 6b c0 05	 imul	 rax, rax, 5
  001fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  00204	8b 54 24 40	 mov	 edx, DWORD PTR tv83[rsp]
  00208	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 182  :                         break;

  0020b	e9 57 01 00 00	 jmp	 $LN4@WinInputCa
$LN16@WinInputCa:

; 183  :                     }
; 184  :                     case VK_LEFT:
; 185  :                     {
; 186  :                         WinInput.buttons[input::B_LEFT] = IsDown ? 1 : 0;

  00210	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  00215	74 0a		 je	 SHORT $LN45@WinInputCa
  00217	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv87[rsp], 1
  0021f	eb 08		 jmp	 SHORT $LN46@WinInputCa
$LN45@WinInputCa:
  00221	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN46@WinInputCa:
  00229	b8 04 00 00 00	 mov	 eax, 4
  0022e	48 6b c0 06	 imul	 rax, rax, 6
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  00239	8b 54 24 44	 mov	 edx, DWORD PTR tv87[rsp]
  0023d	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 187  :                         break;

  00240	e9 22 01 00 00	 jmp	 $LN4@WinInputCa
$LN17@WinInputCa:

; 188  :                     }
; 189  :                     case VK_RIGHT:
; 190  :                     {
; 191  :                         WinInput.buttons[input::B_RIGHT] = IsDown ? 1 : 0;

  00245	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  0024a	74 0a		 je	 SHORT $LN47@WinInputCa
  0024c	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
  00254	eb 08		 jmp	 SHORT $LN48@WinInputCa
$LN47@WinInputCa:
  00256	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN48@WinInputCa:
  0025e	b8 04 00 00 00	 mov	 eax, 4
  00263	48 6b c0 07	 imul	 rax, rax, 7
  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  0026e	8b 54 24 48	 mov	 edx, DWORD PTR tv91[rsp]
  00272	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 192  :                         break;

  00275	e9 ed 00 00 00	 jmp	 $LN4@WinInputCa
$LN18@WinInputCa:

; 193  :                     }
; 194  :                     case 'Z':
; 195  :                     {
; 196  :                         WinInput.buttons[input::B_A] = IsDown ? 1 : 0;

  0027a	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  0027f	74 0a		 je	 SHORT $LN49@WinInputCa
  00281	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
  00289	eb 08		 jmp	 SHORT $LN50@WinInputCa
$LN49@WinInputCa:
  0028b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
$LN50@WinInputCa:
  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	48 6b c0 00	 imul	 rax, rax, 0
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  002a3	8b 54 24 4c	 mov	 edx, DWORD PTR tv95[rsp]
  002a7	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 197  :                         break;

  002aa	e9 b8 00 00 00	 jmp	 $LN4@WinInputCa
$LN19@WinInputCa:

; 198  :                     }
; 199  :                     case 'X':
; 200  :                     {
; 201  :                         WinInput.buttons[input::B_B] = IsDown ? 1 : 0;

  002af	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  002b4	74 0a		 je	 SHORT $LN51@WinInputCa
  002b6	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  002be	eb 08		 jmp	 SHORT $LN52@WinInputCa
$LN51@WinInputCa:
  002c0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN52@WinInputCa:
  002c8	b8 04 00 00 00	 mov	 eax, 4
  002cd	48 6b c0 01	 imul	 rax, rax, 1
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  002d8	8b 54 24 50	 mov	 edx, DWORD PTR tv131[rsp]
  002dc	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 202  :                         break;

  002df	e9 83 00 00 00	 jmp	 $LN4@WinInputCa
$LN20@WinInputCa:

; 203  :                     }
; 204  :                     case VK_RETURN:
; 205  :                     {
; 206  :                         WinInput.buttons[input::B_START] = IsDown ? 1 : 0;

  002e4	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  002e9	74 0a		 je	 SHORT $LN53@WinInputCa
  002eb	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  002f3	eb 08		 jmp	 SHORT $LN54@WinInputCa
$LN53@WinInputCa:
  002f5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN54@WinInputCa:
  002fd	b8 04 00 00 00	 mov	 eax, 4
  00302	48 6b c0 03	 imul	 rax, rax, 3
  00306	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  0030d	8b 54 24 54	 mov	 edx, DWORD PTR tv135[rsp]
  00311	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 207  :                         break;

  00314	eb 51		 jmp	 SHORT $LN4@WinInputCa
$LN21@WinInputCa:

; 208  :                     }
; 209  :                     case VK_SHIFT:
; 210  :                     {
; 211  :                         WinInput.buttons[input::B_SELECT] = IsDown ? 1 : 0;

  00316	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  0031b	74 0a		 je	 SHORT $LN55@WinInputCa
  0031d	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv139[rsp], 1
  00325	eb 08		 jmp	 SHORT $LN56@WinInputCa
$LN55@WinInputCa:
  00327	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
$LN56@WinInputCa:
  0032f	b8 04 00 00 00	 mov	 eax, 4
  00334	48 6b c0 02	 imul	 rax, rax, 2
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  0033f	8b 54 24 58	 mov	 edx, DWORD PTR tv139[rsp]
  00343	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 212  :                         break;

  00346	eb 1f		 jmp	 SHORT $LN4@WinInputCa

; 213  :                     }
; 214  :                     case VK_SPACE:
; 215  :                     {                        
; 216  :                         break;

  00348	eb 1d		 jmp	 SHORT $LN4@WinInputCa
$LN23@WinInputCa:

; 217  :                     }
; 218  :                     case VK_ESCAPE:
; 219  :                     {
; 220  :                         GlobalRunning = false;

  0034a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0

; 221  :                         break;

  00354	eb 11		 jmp	 SHORT $LN4@WinInputCa
$LN24@WinInputCa:

; 222  :                     }
; 223  :                     case VK_F4:
; 224  :                     {
; 225  :                         if(AltPressed)

  00356	83 7c 24 6c 00	 cmp	 DWORD PTR AltPressed$4[rsp], 0
  0035b	74 0a		 je	 SHORT $LN25@WinInputCa

; 226  :                         {
; 227  :                             GlobalRunning = false;

  0035d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0
$LN25@WinInputCa:
$LN4@WinInputCa:
$LN13@WinInputCa:

; 228  :                         }
; 229  :                         break;
; 230  :                     }
; 231  :                 }
; 232  :             }
; 233  :             break;

  00367	e9 b9 01 00 00	 jmp	 $LN2@WinInputCa
$LN26@WinInputCa:

; 234  :         }
; 235  :         
; 236  :         case WM_COMMAND:
; 237  :         {
; 238  :             switch(LOWORD(wParam))

  0036c	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR wParam$[rsp]
  00374	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0037a	0f b7 c0	 movzx	 eax, ax
  0037d	89 44 24 2c	 mov	 DWORD PTR tv146[rsp], eax
  00381	81 7c 24 2c e9
	03 00 00	 cmp	 DWORD PTR tv146[rsp], 1001 ; 000003e9H
  00389	74 21		 je	 SHORT $LN27@WinInputCa
  0038b	81 7c 24 2c ea
	03 00 00	 cmp	 DWORD PTR tv146[rsp], 1002 ; 000003eaH
  00393	0f 84 36 01 00
	00		 je	 $LN31@WinInputCa
  00399	81 7c 24 2c eb
	03 00 00	 cmp	 DWORD PTR tv146[rsp], 1003 ; 000003ebH
  003a1	0f 84 48 01 00
	00		 je	 $LN32@WinInputCa
  003a7	e9 4d 01 00 00	 jmp	 $LN6@WinInputCa
$LN27@WinInputCa:

; 239  :             {
; 240  :                 case ID_OPEN_ROM_ITEM:
; 241  :                 {
; 242  :                     char tempFileName[256];
; 243  :                     
; 244  :                     OPENFILENAMEA newRom = {};

  003ac	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR newRom$6[rsp]
  003b4	48 8b f8	 mov	 rdi, rax
  003b7	33 c0		 xor	 eax, eax
  003b9	b9 98 00 00 00	 mov	 ecx, 152		; 00000098H
  003be	f3 aa		 rep stosb

; 245  :                     newRom.lStructSize = sizeof(OPENFILENAME);

  003c0	c7 84 24 80 00
	00 00 98 00 00
	00		 mov	 DWORD PTR newRom$6[rsp], 152 ; 00000098H

; 246  :                     newRom.hwndOwner = WindowHandle;

  003cb	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR WindowHandle$[rsp]
  003d3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR newRom$6[rsp+8], rax

; 247  :                     newRom.lpstrFile = tempFileName;

  003db	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR tempFileName$7[rsp]
  003e3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR newRom$6[rsp+48], rax

; 248  :                     newRom.lpstrFile[0] = '\0';

  003eb	b8 01 00 00 00	 mov	 eax, 1
  003f0	48 6b c0 00	 imul	 rax, rax, 0
  003f4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR newRom$6[rsp+48]
  003fc	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 249  :                     newRom.nMaxFile = sizeof(tempFileName);

  00400	c7 84 24 b8 00
	00 00 00 01 00
	00		 mov	 DWORD PTR newRom$6[rsp+56], 256 ; 00000100H

; 250  :                     newRom.lpstrFilter = ".nes\0*.nes\0";

  0040b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG87676
  00412	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR newRom$6[rsp+24], rax

; 251  :                     newRom.nFilterIndex =1;

  0041a	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR newRom$6[rsp+44], 1

; 252  :                     newRom.lpstrFileTitle = NULL ;

  00425	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newRom$6[rsp+64], 0

; 253  :                     newRom.nMaxFileTitle = 0 ;

  00431	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newRom$6[rsp+72], 0

; 254  :                     newRom.lpstrInitialDir=NULL ;

  0043c	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newRom$6[rsp+80], 0

; 255  :                     newRom.Flags = OFN_PATHMUSTEXIST|OFN_FILEMUSTEXIST ;

  00448	c7 84 24 e0 00
	00 00 00 18 00
	00		 mov	 DWORD PTR newRom$6[rsp+96], 6144 ; 00001800H

; 256  : 
; 257  :                     bool32 FileOpened = GetOpenFileName(&newRom); 

  00453	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR newRom$6[rsp]
  0045b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetOpenFileNameA
  00461	89 44 24 70	 mov	 DWORD PTR FileOpened$5[rsp], eax

; 258  :                     
; 259  :                     if(FileOpened) // If exists then restart emulator with new file 

  00465	83 7c 24 70 00	 cmp	 DWORD PTR FileOpened$5[rsp], 0
  0046a	74 61		 je	 SHORT $LN28@WinInputCa

; 260  :                     {
; 261  :                         ZeroMemory(&RomFileName, sizeof(RomFileName));

  0046c	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00472	33 d2		 xor	 edx, edx
  00474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?RomFileName@@3PADA
  0047b	e8 00 00 00 00	 call	 memset

; 262  :                         uint8 NameSize = strlen(tempFileName);

  00480	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR tempFileName$7[rsp]
  00488	e8 00 00 00 00	 call	 strlen
  0048d	88 44 24 28	 mov	 BYTE PTR NameSize$2[rsp], al

; 263  :                         cpyMemory((uint8 *)RomFileName, (uint8 *)tempFileName, NameSize);

  00491	0f b6 44 24 28	 movzx	 eax, BYTE PTR NameSize$2[rsp]
  00496	44 0f b7 c0	 movzx	 r8d, ax
  0049a	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR tempFileName$7[rsp]
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?RomFileName@@3PADA
  004a9	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 264  :                         
; 265  :                         if(PowerOn)

  004ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  004b5	74 0c		 je	 SHORT $LN29@WinInputCa

; 266  :                         {
; 267  :                             ResetHit = true;

  004b7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ResetHit@@3HA, 1

; 268  :                         }
; 269  :                         else

  004c1	eb 0a		 jmp	 SHORT $LN30@WinInputCa
$LN29@WinInputCa:

; 270  :                         {
; 271  :                             PowerHit = true;

  004c3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PowerHit@@3HA, 1
$LN30@WinInputCa:
$LN28@WinInputCa:

; 272  :                         }
; 273  :                     }
; 274  :                     
; 275  :                     break;

  004cd	eb 2a		 jmp	 SHORT $LN6@WinInputCa
$LN31@WinInputCa:

; 276  :                 }
; 277  :                 case ID_CLOSE_ROM_ITEM:
; 278  :                 {
; 279  :                     ZeroMemory(&RomFileName, sizeof(RomFileName));

  004cf	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  004d5	33 d2		 xor	 edx, edx
  004d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?RomFileName@@3PADA
  004de	e8 00 00 00 00	 call	 memset

; 280  :                     PowerHit = true;

  004e3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PowerHit@@3HA, 1

; 281  :                     break;

  004ed	eb 0a		 jmp	 SHORT $LN6@WinInputCa
$LN32@WinInputCa:

; 282  :                 }
; 283  :                 case ID_QUIT_ITEM:
; 284  :                 {
; 285  :                     GlobalRunning = false;

  004ef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0
$LN6@WinInputCa:

; 286  :                     break;
; 287  :                 }
; 288  :             }
; 289  :             break;

  004f9	eb 2a		 jmp	 SHORT $LN2@WinInputCa
$LN33@WinInputCa:

; 290  :         }
; 291  :                 
; 292  :         default:
; 293  :         {
; 294  :             Result = DefWindowProc(WindowHandle, Message, wParam, lParam);

  004fb	4c 8b 8c 24 58
	02 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  00503	4c 8b 84 24 50
	02 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  0050b	8b 94 24 48 02
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00512	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR WindowHandle$[rsp]
  0051a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  00520	48 89 44 24 78	 mov	 QWORD PTR Result$[rsp], rax
$LN2@WinInputCa:

; 295  :             break;
; 296  :         }
; 297  :     }
; 298  :     return Result;

  00525	48 8b 44 24 78	 mov	 rax, QWORD PTR Result$[rsp]

; 299  : }

  0052a	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00532	48 33 cc	 xor	 rcx, rsp
  00535	e8 00 00 00 00	 call	 __security_check_cookie
  0053a	48 81 c4 30 02
	00 00		 add	 rsp, 560		; 00000230H
  00541	5f		 pop	 rdi
  00542	c3		 ret	 0
  00543	90		 npad	 1
$LN59@WinInputCa:
  00544	00 00 00 00	 DD	 $LN20@WinInputCa
  00548	00 00 00 00	 DD	 $LN21@WinInputCa
  0054c	00 00 00 00	 DD	 $LN23@WinInputCa
  00550	00 00 00 00	 DD	 $LN16@WinInputCa
  00554	00 00 00 00	 DD	 $LN14@WinInputCa
  00558	00 00 00 00	 DD	 $LN17@WinInputCa
  0055c	00 00 00 00	 DD	 $LN15@WinInputCa
  00560	00 00 00 00	 DD	 $LN19@WinInputCa
  00564	00 00 00 00	 DD	 $LN18@WinInputCa
  00568	00 00 00 00	 DD	 $LN24@WinInputCa
  0056c	00 00 00 00	 DD	 $LN4@WinInputCa
$LN58@WinInputCa:
  00570	00		 DB	 0
  00571	0a		 DB	 10
  00572	0a		 DB	 10
  00573	01		 DB	 1
  00574	0a		 DB	 10
  00575	0a		 DB	 10
  00576	0a		 DB	 10
  00577	0a		 DB	 10
  00578	0a		 DB	 10
  00579	0a		 DB	 10
  0057a	0a		 DB	 10
  0057b	0a		 DB	 10
  0057c	0a		 DB	 10
  0057d	0a		 DB	 10
  0057e	02		 DB	 2
  0057f	0a		 DB	 10
  00580	0a		 DB	 10
  00581	0a		 DB	 10
  00582	0a		 DB	 10
  00583	0a		 DB	 10
  00584	0a		 DB	 10
  00585	0a		 DB	 10
  00586	0a		 DB	 10
  00587	0a		 DB	 10
  00588	03		 DB	 3
  00589	04		 DB	 4
  0058a	05		 DB	 5
  0058b	06		 DB	 6
  0058c	0a		 DB	 10
  0058d	0a		 DB	 10
  0058e	0a		 DB	 10
  0058f	0a		 DB	 10
  00590	0a		 DB	 10
  00591	0a		 DB	 10
  00592	0a		 DB	 10
  00593	0a		 DB	 10
  00594	0a		 DB	 10
  00595	0a		 DB	 10
  00596	0a		 DB	 10
  00597	0a		 DB	 10
  00598	0a		 DB	 10
  00599	0a		 DB	 10
  0059a	0a		 DB	 10
  0059b	0a		 DB	 10
  0059c	0a		 DB	 10
  0059d	0a		 DB	 10
  0059e	0a		 DB	 10
  0059f	0a		 DB	 10
  005a0	0a		 DB	 10
  005a1	0a		 DB	 10
  005a2	0a		 DB	 10
  005a3	0a		 DB	 10
  005a4	0a		 DB	 10
  005a5	0a		 DB	 10
  005a6	0a		 DB	 10
  005a7	0a		 DB	 10
  005a8	0a		 DB	 10
  005a9	0a		 DB	 10
  005aa	0a		 DB	 10
  005ab	0a		 DB	 10
  005ac	0a		 DB	 10
  005ad	0a		 DB	 10
  005ae	0a		 DB	 10
  005af	0a		 DB	 10
  005b0	0a		 DB	 10
  005b1	0a		 DB	 10
  005b2	0a		 DB	 10
  005b3	0a		 DB	 10
  005b4	0a		 DB	 10
  005b5	0a		 DB	 10
  005b6	0a		 DB	 10
  005b7	0a		 DB	 10
  005b8	0a		 DB	 10
  005b9	0a		 DB	 10
  005ba	0a		 DB	 10
  005bb	07		 DB	 7
  005bc	0a		 DB	 10
  005bd	08		 DB	 8
  005be	0a		 DB	 10
  005bf	0a		 DB	 10
  005c0	0a		 DB	 10
  005c1	0a		 DB	 10
  005c2	0a		 DB	 10
  005c3	0a		 DB	 10
  005c4	0a		 DB	 10
  005c5	0a		 DB	 10
  005c6	0a		 DB	 10
  005c7	0a		 DB	 10
  005c8	0a		 DB	 10
  005c9	0a		 DB	 10
  005ca	0a		 DB	 10
  005cb	0a		 DB	 10
  005cc	0a		 DB	 10
  005cd	0a		 DB	 10
  005ce	0a		 DB	 10
  005cf	0a		 DB	 10
  005d0	0a		 DB	 10
  005d1	0a		 DB	 10
  005d2	0a		 DB	 10
  005d3	0a		 DB	 10
  005d4	0a		 DB	 10
  005d5	0a		 DB	 10
  005d6	09		 DB	 9
?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP		; WinInputCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Value$ = 0
NewAddress$ = 8
Address$ = 32
MemoryOffset$ = 40
?read8@@YAEG_K@Z PROC					; read8

; 111  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 112  :     uint8 *NewAddress = (uint8 *)(Address + MemoryOffset);

  0000e	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00013	48 03 44 24 28	 add	 rax, QWORD PTR MemoryOffset$[rsp]
  00018	48 89 44 24 08	 mov	 QWORD PTR NewAddress$[rsp], rax

; 113  :     uint8 Value = *NewAddress;

  0001d	48 8b 44 24 08	 mov	 rax, QWORD PTR NewAddress$[rsp]
  00022	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00025	88 04 24	 mov	 BYTE PTR Value$[rsp], al

; 114  :     return(Value);

  00028	0f b6 04 24	 movzx	 eax, BYTE PTR Value$[rsp]

; 115  : }

  0002c	48 83 c4 18	 add	 rsp, 24
  00030	c3		 ret	 0
?read8@@YAEG_K@Z ENDP					; read8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
NewAddress$ = 0
Byte$ = 32
Address$ = 40
MemoryOffset$ = 48
?write8@@YAXEG_K@Z PROC					; write8

; 105  : {   

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 18	 sub	 rsp, 24

; 106  :     uint8 *NewAddress = (uint8 *)(Address + MemoryOffset);

  00012	0f b7 44 24 28	 movzx	 eax, WORD PTR Address$[rsp]
  00017	48 03 44 24 30	 add	 rax, QWORD PTR MemoryOffset$[rsp]
  0001c	48 89 04 24	 mov	 QWORD PTR NewAddress$[rsp], rax

; 107  :     *NewAddress = Byte;

  00020	48 8b 04 24	 mov	 rax, QWORD PTR NewAddress$[rsp]
  00024	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00029	88 08		 mov	 BYTE PTR [rax], cl

; 108  : }

  0002b	48 83 c4 18	 add	 rsp, 24
  0002f	c3		 ret	 0
?write8@@YAXEG_K@Z ENDP					; write8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Byte$1 = 0
Dest$ = 32
Src$ = 40
Size$ = 48
?cpyMemory@@YAXPEAE0G@Z PROC				; cpyMemory

; 98   : {

  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 18	 sub	 rsp, 24

; 99   :     // NOTE: Very basic copy. Not bounds protection
; 100  :     for(uint16 Byte = 0; Byte < Size; ++Byte)

  00014	33 c0		 xor	 eax, eax
  00016	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
  0001a	eb 0b		 jmp	 SHORT $LN4@cpyMemory
$LN2@cpyMemory:
  0001c	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  00020	66 ff c0	 inc	 ax
  00023	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
$LN4@cpyMemory:
  00027	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  0002b	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Size$[rsp]
  00030	3b c1		 cmp	 eax, ecx
  00032	7d 1c		 jge	 SHORT $LN3@cpyMemory

; 101  :         Dest[Byte] = Src[Byte];

  00034	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  00038	0f b7 0c 24	 movzx	 ecx, WORD PTR Byte$1[rsp]
  0003c	48 8b 54 24 20	 mov	 rdx, QWORD PTR Dest$[rsp]
  00041	4c 8b 44 24 28	 mov	 r8, QWORD PTR Src$[rsp]
  00046	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  0004b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004e	eb cc		 jmp	 SHORT $LN2@cpyMemory
$LN3@cpyMemory:

; 102  : }

  00050	48 83 c4 18	 add	 rsp, 24
  00054	c3		 ret	 0
?cpyMemory@@YAXPEAE0G@Z ENDP				; cpyMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MSElapsed$ = 32
Counter$ = 40
CounterElapsed$ = 48
PerfCountFrequency$ = 80
?getMilliSeconds@@YAM_K@Z PROC				; getMilliSeconds

; 87   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 88   :     LARGE_INTEGER Counter;
; 89   :     QueryPerformanceCounter(&Counter);

  00009	48 8d 4c 24 28	 lea	 rcx, QWORD PTR Counter$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 90   :     
; 91   :     uint64 CounterElapsed = Counter.QuadPart;

  00014	48 8b 44 24 28	 mov	 rax, QWORD PTR Counter$[rsp]
  00019	48 89 44 24 30	 mov	 QWORD PTR CounterElapsed$[rsp], rax

; 92   :     real32 MSElapsed = ((1000.0f * (real32)CounterElapsed) / (real32)PerfCountFrequency);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR CounterElapsed$[rsp]
  00023	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00028	48 85 c0	 test	 rax, rax
  0002b	7d 08		 jge	 SHORT $LN4@getMilliSe
  0002d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@5f800000
$LN4@getMilliSe:
  00035	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@447a0000
  0003d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00041	0f 28 c1	 movaps	 xmm0, xmm1
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR PerfCountFrequency$[rsp]
  00049	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  0004e	48 85 c0	 test	 rax, rax
  00051	7d 08		 jge	 SHORT $LN3@getMilliSe
  00053	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@5f800000
$LN3@getMilliSe:
  0005b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0005f	f3 0f 11 44 24
	20		 movss	 DWORD PTR MSElapsed$[rsp], xmm0

; 93   : 
; 94   :     return(MSElapsed);

  00065	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR MSElapsed$[rsp]

; 95   : }

  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
?getMilliSeconds@@YAM_K@Z ENDP				; getMilliSeconds
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
i$1 = 96
ResScale$ = 97
WindowHeight$ = 100
WindowWidth$ = 104
RenderScaleHeight$ = 108
RenderScaleWidth$ = 112
InitialWindowPosY$ = 116
InitialWindowPosX$ = 120
TickCycles$2 = 124
Window$3 = 128
CpuMemorySize$4 = 136
CpuCyclesElapsed$5 = 140
CurrentSecs$6 = 144
PrevSecs$7 = 148
SubMenu$8 = 152
PpuMemorySize$9 = 160
CpuClockRateHz$10 = 164
ElapsedSecs$11 = 168
CpuMemoryBase$12 = 176
WindowMenu$13 = 184
Memory$14 = 192
PpuMemoryBase$15 = 200
DeviceContext$16 = 208
PerfCountFrequency$ = 216
CpuCyclesPerMS$17 = 224
WinPerfCountFrequency$ = 232
PpuRegisterLocation$18 = 240
tv280 = 248
WindowClass$ = 256
Message$19 = 336
ScreenBackBuffer$ = 384
Nes$20 = 464
__$ArrayPad$ = 1040
WindowInstance$ = 1072
PrevWindowInstance$ = 1080
CommandLine$ = 1088
CommandShow$ = 1096
WinMain	PROC

; 745  : {

$LN21:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 20 04
	00 00		 sub	 rsp, 1056		; 00000420H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 10
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 746  :     LARGE_INTEGER WinPerfCountFrequency;
; 747  :     QueryPerformanceFrequency(&WinPerfCountFrequency); 

  0002e	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR WinPerfCountFrequency$[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 748  :     uint64 PerfCountFrequency = WinPerfCountFrequency.QuadPart;            

  0003c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR WinPerfCountFrequency$[rsp]
  00044	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR PerfCountFrequency$[rsp], rax

; 749  : 
; 750  :     /**************************************/
; 751  :     /* NOTE : Screen back buffer creation */
; 752  :     
; 753  :     uint16 RenderScaleWidth = 256, RenderScaleHeight = 240;

  0004c	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00051	66 89 44 24 70	 mov	 WORD PTR RenderScaleWidth$[rsp], ax
  00056	b8 f0 00 00 00	 mov	 eax, 240		; 000000f0H
  0005b	66 89 44 24 6c	 mov	 WORD PTR RenderScaleHeight$[rsp], ax

; 754  :     uint8 ResScale = 5;

  00060	c6 44 24 61 05	 mov	 BYTE PTR ResScale$[rsp], 5

; 755  :     uint16 WindowWidth = RenderScaleWidth * ResScale, WindowHeight = RenderScaleHeight * ResScale;

  00065	0f b7 44 24 70	 movzx	 eax, WORD PTR RenderScaleWidth$[rsp]
  0006a	0f b6 4c 24 61	 movzx	 ecx, BYTE PTR ResScale$[rsp]
  0006f	0f af c1	 imul	 eax, ecx
  00072	66 89 44 24 68	 mov	 WORD PTR WindowWidth$[rsp], ax
  00077	0f b7 44 24 6c	 movzx	 eax, WORD PTR RenderScaleHeight$[rsp]
  0007c	0f b6 4c 24 61	 movzx	 ecx, BYTE PTR ResScale$[rsp]
  00081	0f af c1	 imul	 eax, ecx
  00084	66 89 44 24 64	 mov	 WORD PTR WindowHeight$[rsp], ax

; 756  :     screen_buffer ScreenBackBuffer = {};

  00089	48 8d 84 24 80
	01 00 00	 lea	 rax, QWORD PTR ScreenBackBuffer$[rsp]
  00091	48 8b f8	 mov	 rdi, rax
  00094	33 c0		 xor	 eax, eax
  00096	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0009b	f3 aa		 rep stosb

; 757  :     createBackBuffer(&ScreenBackBuffer, RenderScaleWidth, RenderScaleHeight);

  0009d	44 0f b7 44 24
	6c		 movzx	 r8d, WORD PTR RenderScaleHeight$[rsp]
  000a3	0f b7 54 24 70	 movzx	 edx, WORD PTR RenderScaleWidth$[rsp]
  000a8	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR ScreenBackBuffer$[rsp]
  000b0	e8 00 00 00 00	 call	 ?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z ; createBackBuffer

; 758  : 
; 759  :     /**************************/
; 760  :     /* NOTE : Window creation */
; 761  : 
; 762  :     WNDCLASSA WindowClass = {};

  000b5	48 8d 84 24 00
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  000bd	48 8b f8	 mov	 rdi, rax
  000c0	33 c0		 xor	 eax, eax
  000c2	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000c7	f3 aa		 rep stosb

; 763  :     WindowClass.style = CS_HREDRAW | CS_VREDRAW;

  000c9	c7 84 24 00 01
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 764  :     WindowClass.lpfnWndProc = WinInputCallback;

  000d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z ; WinInputCallback
  000db	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 765  :     WindowClass.hInstance = WindowInstance;

  000e3	48 8b 84 24 30
	04 00 00	 mov	 rax, QWORD PTR WindowInstance$[rsp]
  000eb	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 766  :     WindowClass.lpszClassName = "NesEmu";

  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG89380
  000fa	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 767  : 
; 768  :     uint16 InitialWindowPosX = 0;

  00102	33 c0		 xor	 eax, eax
  00104	66 89 44 24 78	 mov	 WORD PTR InitialWindowPosX$[rsp], ax

; 769  :     uint16 InitialWindowPosY = 0;

  00109	33 c0		 xor	 eax, eax
  0010b	66 89 44 24 74	 mov	 WORD PTR InitialWindowPosY$[rsp], ax

; 770  :     
; 771  :     if(RegisterClassA(&WindowClass))

  00110	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  0011e	0f b7 c0	 movzx	 eax, ax
  00121	85 c0		 test	 eax, eax
  00123	0f 84 2d 05 00
	00		 je	 $LN9@WinMain

; 772  :     {        
; 773  :         HWND Window = CreateWindowExA(0, WindowClass.lpszClassName, "NesEmu", WS_OVERLAPPEDWINDOW|WS_VISIBLE,

  00129	0f b7 44 24 64	 movzx	 eax, WORD PTR WindowHeight$[rsp]
  0012e	0f b7 4c 24 68	 movzx	 ecx, WORD PTR WindowWidth$[rsp]
  00133	0f b7 54 24 74	 movzx	 edx, WORD PTR InitialWindowPosY$[rsp]
  00138	0f b7 7c 24 78	 movzx	 edi, WORD PTR InitialWindowPosX$[rsp]
  0013d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  00146	4c 8b 84 24 30
	04 00 00	 mov	 r8, QWORD PTR WindowInstance$[rsp]
  0014e	4c 89 44 24 50	 mov	 QWORD PTR [rsp+80], r8
  00153	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  0015c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00165	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00169	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  0016d	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  00171	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  00175	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  0017b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG89383
  00182	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0018a	33 c9		 xor	 ecx, ecx
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00192	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR Window$3[rsp], rax

; 774  :                                       InitialWindowPosX, InitialWindowPosY, WindowWidth, WindowHeight,
; 775  :                                       0, 0, WindowInstance, 0);
; 776  : 
; 777  :         if(Window) // If window was created successfully

  0019a	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR Window$3[rsp], 0
  001a3	0f 84 99 04 00
	00		 je	 $LN11@WinMain

; 778  :         {
; 779  :             HMENU WindowMenu = CreateMenu();

  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateMenu
  001af	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR WindowMenu$13[rsp], rax

; 780  :             HMENU SubMenu = CreatePopupMenu();

  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreatePopupMenu
  001bd	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR SubMenu$8[rsp], rax

; 781  :             
; 782  :             AppendMenu(SubMenu, MF_STRING, ID_OPEN_ROM_ITEM, "&Open Rom");

  001c5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG89386
  001cc	41 b8 e9 03 00
	00		 mov	 r8d, 1001		; 000003e9H
  001d2	33 d2		 xor	 edx, edx
  001d4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SubMenu$8[rsp]
  001dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 783  :             AppendMenu(SubMenu, MF_STRING, ID_CLOSE_ROM_ITEM, "&Close Rom");

  001e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG89387
  001e9	41 b8 ea 03 00
	00		 mov	 r8d, 1002		; 000003eaH
  001ef	33 d2		 xor	 edx, edx
  001f1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SubMenu$8[rsp]
  001f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 784  :             AppendMenu(SubMenu, MF_STRING, ID_QUIT_ITEM, "&Quit");

  001ff	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG89388
  00206	41 b8 eb 03 00
	00		 mov	 r8d, 1003		; 000003ebH
  0020c	33 d2		 xor	 edx, edx
  0020e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SubMenu$8[rsp]
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 785  :             AppendMenu(WindowMenu, MF_STRING | MF_POPUP, (uint64)SubMenu, "&File");

  0021c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG89389
  00223	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR SubMenu$8[rsp]
  0022b	ba 10 00 00 00	 mov	 edx, 16
  00230	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR WindowMenu$13[rsp]
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 786  : 
; 787  :             SetMenu(Window, WindowMenu);

  0023e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR WindowMenu$13[rsp]
  00246	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetMenu

; 788  : 
; 789  :             /**************************************************************************/
; 790  :             /* NOTE : creation and initialization of Emulators Cpu, Ppu, and Cartridge structures */
; 791  : 
; 792  : 
; 793  :             // Memory allocation for the Cpu and Ppu.
; 794  :             uint32 CpuMemorySize = Kilobytes(64);

  00254	c7 84 24 88 00
	00 00 00 00 01
	00		 mov	 DWORD PTR CpuMemorySize$4[rsp], 65536 ; 00010000H

; 795  :             uint32 PpuMemorySize = Kilobytes(64);

  0025f	c7 84 24 a0 00
	00 00 00 00 01
	00		 mov	 DWORD PTR PpuMemorySize$9[rsp], 65536 ; 00010000H

; 796  : 
; 797  :             uint8 * Memory = (uint8 *)VirtualAlloc(0, (size_t)(CpuMemorySize + PpuMemorySize), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);

  0026a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR PpuMemorySize$9[rsp]
  00271	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR CpuMemorySize$4[rsp]
  00278	03 c8		 add	 ecx, eax
  0027a	8b c1		 mov	 eax, ecx
  0027c	8b c0		 mov	 eax, eax
  0027e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00284	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0028a	8b d0		 mov	 edx, eax
  0028c	33 c9		 xor	 ecx, ecx
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00294	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR Memory$14[rsp], rax

; 798  : 
; 799  :             uint64 CpuMemoryBase = (uint64)Memory;

  0029c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR Memory$14[rsp]
  002a4	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR CpuMemoryBase$12[rsp], rax

; 800  :             uint64 PpuMemoryBase = (uint64)Memory + CpuMemorySize;

  002ac	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR CpuMemorySize$4[rsp]
  002b3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR Memory$14[rsp]
  002bb	48 03 c8	 add	 rcx, rax
  002be	48 8b c1	 mov	 rax, rcx
  002c1	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR PpuMemoryBase$15[rsp], rax

; 801  :             GlobalCpuMemoryBase = CpuMemoryBase;

  002c9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR CpuMemoryBase$12[rsp]
  002d1	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?GlobalCpuMemoryBase@@3_KA, rax

; 802  :             GlobalPpuMemoryBase = PpuMemoryBase;

  002d8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR PpuMemoryBase$15[rsp]
  002e0	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?GlobalPpuMemoryBase@@3_KA, rax

; 803  : 
; 804  :             uint64 PpuRegisterLocation = CpuMemoryBase + PPU_REG_ADRS;

  002e7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR CpuMemoryBase$12[rsp]
  002ef	48 05 00 20 00
	00		 add	 rax, 8192		; 00002000H
  002f5	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR PpuRegisterLocation$18[rsp], rax

; 805  :             
; 806  :             nes Nes = {};

  002fd	48 8d 84 24 d0
	01 00 00	 lea	 rax, QWORD PTR Nes$20[rsp]
  00305	48 8b f8	 mov	 rdi, rax
  00308	33 c0		 xor	 eax, eax
  0030a	b9 40 02 00 00	 mov	 ecx, 576		; 00000240H
  0030f	f3 aa		 rep stosb

; 807  :             initCpu(&Nes.Cpu, CpuMemoryBase);

  00311	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR CpuMemoryBase$12[rsp]
  00319	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp]
  00321	e8 00 00 00 00	 call	 ?initCpu@@YAXPEAUcpu@@_K@Z ; initCpu

; 808  :             initPpu(&Nes.Ppu, PpuMemoryBase, (uint32 *)ScreenBackBuffer.Memory, (ppu_registers *)PpuRegisterLocation);

  00326	4c 8b 8c 24 f0
	00 00 00	 mov	 r9, QWORD PTR PpuRegisterLocation$18[rsp]
  0032e	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR ScreenBackBuffer$[rsp+48]
  00336	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR PpuMemoryBase$15[rsp]
  0033e	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp+112]
  00346	e8 00 00 00 00	 call	 ?initPpu@@YAXPEAUppu@@_KPEAIPEAUppu_registers@@@Z ; initPpu

; 809  :             Nes.Cpu.PpuVramIO = &Nes.Ppu.VRamIO;

  0034b	48 8d 84 24 b4
	03 00 00	 lea	 rax, QWORD PTR Nes$20[rsp+484]
  00353	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR Nes$20[rsp+104], rax

; 810  :             
; 811  :             loadCartridge(&Nes, "Mario Bros.nes");

  0035b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG89390
  00362	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp]
  0036a	e8 00 00 00 00	 call	 ?loadCartridge@@YAXPEAUnes@@PEAD@Z ; loadCartridge

; 812  : 
; 813  :             // NOTE: Load the program counter with the reset vector
; 814  :             Nes.Cpu.PrgCounter = readCpu16(RESET_VEC, &Nes.Cpu);

  0036f	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR Nes$20[rsp]
  00377	66 b9 fc ff	 mov	 cx, 65532		; 0000fffcH
  0037b	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  00380	66 89 84 24 d6
	01 00 00	 mov	 WORD PTR Nes$20[rsp+6], ax

; 815  : 
; 816  : 
; 817  :             /*****************/
; 818  :             /* NOTE : Timing */
; 819  :             
; 820  :             real32 CpuClockRateHz = 1789772.727272728;

  00388	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49da7a66
  00390	f3 0f 11 84 24
	a4 00 00 00	 movss	 DWORD PTR CpuClockRateHz$10[rsp], xmm0

; 821  :             real32 CpuCyclesPerMS = CpuClockRateHz / 1000.0;

  00399	f3 0f 5a 84 24
	a4 00 00 00	 cvtss2sd xmm0, DWORD PTR CpuClockRateHz$10[rsp]
  003a2	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  003aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003ae	f3 0f 11 84 24
	e0 00 00 00	 movss	 DWORD PTR CpuCyclesPerMS$17[rsp], xmm0

; 822  :             
; 823  :             uint32 CpuCyclesElapsed = 0;

  003b7	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR CpuCyclesElapsed$5[rsp], 0

; 824  :             uint32 TickCycles = 0;

  003c2	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR TickCycles$2[rsp], 0

; 825  :             
; 826  :             real32 ElapsedSecs = 0;

  003ca	0f 57 c0	 xorps	 xmm0, xmm0
  003cd	f3 0f 11 84 24
	a8 00 00 00	 movss	 DWORD PTR ElapsedSecs$11[rsp], xmm0

; 827  :             real32 CurrentSecs, PrevSecs = getMilliSeconds(PerfCountFrequency) / 1000.0f;

  003d6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR PerfCountFrequency$[rsp]
  003de	e8 00 00 00 00	 call	 ?getMilliSeconds@@YAM_K@Z ; getMilliSeconds
  003e3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  003eb	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR PrevSecs$7[rsp], xmm0

; 828  : 
; 829  :             /********************/
; 830  :             /* NOTE : Main Loop */
; 831  :             
; 832  :             GlobalRunning = true; 

  003f4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 1
$LN2@WinMain:

; 833  :             while(GlobalRunning)

  003fe	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?GlobalRunning@@3HA, 0
  00405	0f 84 35 02 00
	00		 je	 $LN3@WinMain

; 834  :             {
; 835  :                 MSG Message = {}; 

  0040b	48 8d 84 24 50
	01 00 00	 lea	 rax, QWORD PTR Message$19[rsp]
  00413	48 8b f8	 mov	 rdi, rax
  00416	33 c0		 xor	 eax, eax
  00418	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0041d	f3 aa		 rep stosb
$LN4@WinMain:

; 836  :                 while (PeekMessage(&Message, Window, 0, 0, PM_REMOVE))

  0041f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00427	45 33 c9	 xor	 r9d, r9d
  0042a	45 33 c0	 xor	 r8d, r8d
  0042d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR Window$3[rsp]
  00435	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR Message$19[rsp]
  0043d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00443	85 c0		 test	 eax, eax
  00445	74 1e		 je	 SHORT $LN5@WinMain

; 837  :                 {
; 838  :                     TranslateMessage(&Message);

  00447	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR Message$19[rsp]
  0044f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 839  :                     DispatchMessage(&Message);

  00455	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR Message$19[rsp]
  0045d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 840  :                 }

  00463	eb ba		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 841  : 
; 842  :                 if(PowerHit)

  00465	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerHit@@3HA, 0
  0046c	74 17		 je	 SHORT $LN13@WinMain

; 843  :                 {
; 844  :                     PowerHit = false;

  0046e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PowerHit@@3HA, 0

; 845  :                     power(&Nes);

  00478	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp]
  00480	e8 00 00 00 00	 call	 ?power@@YAXPEAUnes@@@Z	; power
$LN13@WinMain:

; 846  :                 }
; 847  :                 
; 848  :                 if(ResetHit)

  00485	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ResetHit@@3HA, 0
  0048c	74 2b		 je	 SHORT $LN14@WinMain

; 849  :                 {
; 850  :                     ResetHit = false;

  0048e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ResetHit@@3HA, 0

; 851  :                     loadCartridge(&Nes, RomFileName);

  00498	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?RomFileName@@3PADA
  0049f	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp]
  004a7	e8 00 00 00 00	 call	 ?loadCartridge@@YAXPEAUnes@@PEAD@Z ; loadCartridge

; 852  :                     reset(&Nes);

  004ac	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp]
  004b4	e8 00 00 00 00	 call	 ?reset@@YAXPEAUnes@@@Z	; reset
$LN14@WinMain:

; 853  :                 }
; 854  : 
; 855  :                 if(Nes.Cpu.MapperWrite)

  004b9	83 bc 24 e4 01
	00 00 00	 cmp	 DWORD PTR Nes$20[rsp+20], 0
  004c1	74 45		 je	 SHORT $LN15@WinMain

; 856  :                 {
; 857  :                     Nes.Cpu.MapperWrite = false;

  004c3	c7 84 24 e4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Nes$20[rsp+20], 0

; 858  :                     mapperUpdate[Nes.Cartridge.MapperNum](&Nes.Cartridge, &Nes.Cpu, &Nes.Ppu);

  004ce	0f b6 84 24 f9
	03 00 00	 movzx	 eax, BYTE PTR Nes$20[rsp+553]
  004d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mapperUpdate@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperUpdate
  004dd	48 89 8c 24 f8
	00 00 00	 mov	 QWORD PTR tv280[rsp], rcx
  004e5	4c 8d 84 24 40
	02 00 00	 lea	 r8, QWORD PTR Nes$20[rsp+112]
  004ed	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR Nes$20[rsp]
  004f5	48 8d 8c 24 c0
	03 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp+496]
  004fd	48 8b bc 24 f8
	00 00 00	 mov	 rdi, QWORD PTR tv280[rsp]
  00505	ff 14 c7	 call	 QWORD PTR [rdi+rax*8]
$LN15@WinMain:

; 859  :                 }
; 860  :                 
; 861  :                 if(PowerOn)

  00508	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  0050f	74 68		 je	 SHORT $LN16@WinMain

; 862  :                 {
; 863  :                     TickCycles = cpuTick(&Nes.Cpu, &WinInput);

  00511	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?WinInput@@3Uinput@@A
  00518	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$20[rsp]
  00520	e8 00 00 00 00	 call	 ?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z ; cpuTick
  00525	0f b6 c0	 movzx	 eax, al
  00528	89 44 24 7c	 mov	 DWORD PTR TickCycles$2[rsp], eax

; 864  :                     
; 865  :                     for(uint8 i = 0; i < (3*TickCycles); ++i)

  0052c	c6 44 24 60 00	 mov	 BYTE PTR i$1[rsp], 0
  00531	eb 0b		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:
  00533	0f b6 44 24 60	 movzx	 eax, BYTE PTR i$1[rsp]
  00538	fe c0		 inc	 al
  0053a	88 44 24 60	 mov	 BYTE PTR i$1[rsp], al
$LN8@WinMain:
  0053e	0f b6 44 24 60	 movzx	 eax, BYTE PTR i$1[rsp]
  00543	6b 4c 24 7c 03	 imul	 ecx, DWORD PTR TickCycles$2[rsp], 3
  00548	3b c1		 cmp	 eax, ecx
  0054a	73 17		 jae	 SHORT $LN7@WinMain

; 866  :                     {
; 867  :                         ppuTick(&ScreenBackBuffer, &Nes.Ppu);

  0054c	48 8d 94 24 40
	02 00 00	 lea	 rdx, QWORD PTR Nes$20[rsp+112]
  00554	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR ScreenBackBuffer$[rsp]
  0055c	e8 00 00 00 00	 call	 ?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z ; ppuTick

; 868  :                     }

  00561	eb d0		 jmp	 SHORT $LN6@WinMain
$LN7@WinMain:

; 869  : 
; 870  :                     CpuCyclesElapsed += TickCycles;

  00563	8b 44 24 7c	 mov	 eax, DWORD PTR TickCycles$2[rsp]
  00567	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR CpuCyclesElapsed$5[rsp]
  0056e	03 c8		 add	 ecx, eax
  00570	8b c1		 mov	 eax, ecx
  00572	89 84 24 8c 00
	00 00		 mov	 DWORD PTR CpuCyclesElapsed$5[rsp], eax
$LN16@WinMain:

; 871  :                 }
; 872  :                 
; 873  :                 if(DrawScreen) // NOTE: Gets called everytime the vblank happens in Ppu TODO: Should it be the end of vblank?

  00579	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DrawScreen@@3HA, 0
  00580	74 6e		 je	 SHORT $LN17@WinMain

; 874  :                 {
; 875  :                     DrawScreen = false; 

  00582	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?DrawScreen@@3HA, 0

; 876  :                     getWindowSize(Window, &WindowWidth, &WindowHeight);

  0058c	4c 8d 44 24 64	 lea	 r8, QWORD PTR WindowHeight$[rsp]
  00591	48 8d 54 24 68	 lea	 rdx, QWORD PTR WindowWidth$[rsp]
  00596	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  0059e	e8 00 00 00 00	 call	 ?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z ; getWindowSize

; 877  :                 
; 878  :                     // NOTE: Drawing the backbuffer to the window 
; 879  :                     HDC DeviceContext = GetDC(Window);

  005a3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  005ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  005b1	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR DeviceContext$16[rsp], rax

; 880  :                     drawScreenBuffer(&ScreenBackBuffer, DeviceContext,

  005b9	44 0f b7 4c 24
	64		 movzx	 r9d, WORD PTR WindowHeight$[rsp]
  005bf	44 0f b7 44 24
	68		 movzx	 r8d, WORD PTR WindowWidth$[rsp]
  005c5	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$16[rsp]
  005cd	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR ScreenBackBuffer$[rsp]
  005d5	e8 00 00 00 00	 call	 ?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z ; drawScreenBuffer

; 881  :                                      WindowWidth, WindowHeight);
; 882  :                     ReleaseDC(Window, DeviceContext);

  005da	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$16[rsp]
  005e2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  005ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC
$LN17@WinMain:

; 883  :                 }
; 884  :            
; 885  :                 CurrentSecs = getMilliSeconds(PerfCountFrequency) / 1000.0f;

  005f0	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR PerfCountFrequency$[rsp]
  005f8	e8 00 00 00 00	 call	 ?getMilliSeconds@@YAM_K@Z ; getMilliSeconds
  005fd	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00605	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR CurrentSecs$6[rsp], xmm0

; 886  :                 ElapsedSecs = CurrentSecs - PrevSecs;

  0060e	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR CurrentSecs$6[rsp]
  00617	f3 0f 5c 84 24
	94 00 00 00	 subss	 xmm0, DWORD PTR PrevSecs$7[rsp]
  00620	f3 0f 11 84 24
	a8 00 00 00	 movss	 DWORD PTR ElapsedSecs$11[rsp], xmm0

; 887  :                 PrevSecs = CurrentSecs;

  00629	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR CurrentSecs$6[rsp]
  00632	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR PrevSecs$7[rsp], xmm0

; 888  :             }

  0063b	e9 be fd ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:

; 889  : 
; 890  :         }
; 891  :         else

  00640	eb 12		 jmp	 SHORT $LN12@WinMain
$LN11@WinMain:

; 892  :         {
; 893  :             // NOTE: Window failed to create
; 894  :             // TODO: Handle this in a better way
; 895  :             Assert(0);

  00642	33 c0		 xor	 eax, eax
  00644	83 f8 01	 cmp	 eax, 1
  00647	74 0b		 je	 SHORT $LN18@WinMain
  00649	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN18@WinMain:
$LN12@WinMain:

; 896  :         }
; 897  :     }
; 898  :     else

  00654	eb 12		 jmp	 SHORT $LN10@WinMain
$LN9@WinMain:

; 899  :     {
; 900  :         // NOTE: Failed to register window
; 901  :         // TODO: Handle this in a better way
; 902  :         Assert(0);

  00656	33 c0		 xor	 eax, eax
  00658	83 f8 01	 cmp	 eax, 1
  0065b	74 0b		 je	 SHORT $LN19@WinMain
  0065d	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN19@WinMain:
$LN10@WinMain:

; 903  :     }
; 904  :     return(0);

  00668	33 c0		 xor	 eax, eax

; 905  : } 

  0066a	48 8b 8c 24 10
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00672	48 33 cc	 xor	 rcx, rsp
  00675	e8 00 00 00 00	 call	 __security_check_cookie
  0067a	48 81 c4 20 04
	00 00		 add	 rsp, 1056		; 00000420H
  00681	5f		 pop	 rdi
  00682	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
