; Listing generated by Microsoft (R) Optimizing Compiler Version 19.10.25019.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?adc@@YAEGPEAUcpu@@E@Z				; adc
PUBLIC	?AND@@YAEGPEAUcpu@@E@Z				; AND
PUBLIC	?IOReadFromCpu@@3HA				; IOReadFromCpu
PUBLIC	?IOWriteFromCpu@@3HA				; IOWriteFromCpu
PUBLIC	?ScrollAdrsChange@@3HA				; ScrollAdrsChange
PUBLIC	?VRamAdrsChange@@3HA				; VRamAdrsChange
PUBLIC	?ResetScrollIOAdrs@@3HA				; ResetScrollIOAdrs
PUBLIC	?asl@@YAEGPEAUcpu@@E@Z				; asl
PUBLIC	?ResetVRamIOAdrs@@3HA				; ResetVRamIOAdrs
PUBLIC	?bcc@@YAEGPEAUcpu@@E@Z				; bcc
PUBLIC	?bcs@@YAEGPEAUcpu@@E@Z				; bcs
PUBLIC	?beq@@YAEGPEAUcpu@@E@Z				; beq
PUBLIC	?bit@@YAEGPEAUcpu@@E@Z				; bit
PUBLIC	?bmi@@YAEGPEAUcpu@@E@Z				; bmi
PUBLIC	?bne@@YAEGPEAUcpu@@E@Z				; bne
PUBLIC	?bpl@@YAEGPEAUcpu@@E@Z				; bpl
PUBLIC	?brk@@YAEGPEAUcpu@@E@Z				; brk
PUBLIC	?bvc@@YAEGPEAUcpu@@E@Z				; bvc
PUBLIC	?bvs@@YAEGPEAUcpu@@E@Z				; bvs
PUBLIC	?clc@@YAEGPEAUcpu@@E@Z				; clc
PUBLIC	?cld@@YAEGPEAUcpu@@E@Z				; cld
PUBLIC	?cli@@YAEGPEAUcpu@@E@Z				; cli
PUBLIC	?clv@@YAEGPEAUcpu@@E@Z				; clv
PUBLIC	?cmp@@YAEGPEAUcpu@@E@Z				; cmp
PUBLIC	?cpx@@YAEGPEAUcpu@@E@Z				; cpx
PUBLIC	?cpy@@YAEGPEAUcpu@@E@Z				; cpy
PUBLIC	?dec@@YAEGPEAUcpu@@E@Z				; dec
PUBLIC	?TriggerNmi@@3HA				; TriggerNmi
PUBLIC	?NmiTriggered@@3HA				; NmiTriggered
PUBLIC	?IrqTriggered@@3HA				; IrqTriggered
PUBLIC	?OamDataChange@@3HA				; OamDataChange
PUBLIC	?dex@@YAEGPEAUcpu@@E@Z				; dex
PUBLIC	?dey@@YAEGPEAUcpu@@E@Z				; dey
PUBLIC	?eor@@YAEGPEAUcpu@@E@Z				; eor
PUBLIC	?inc@@YAEGPEAUcpu@@E@Z				; inc
PUBLIC	?inx@@YAEGPEAUcpu@@E@Z				; inx
PUBLIC	?iny@@YAEGPEAUcpu@@E@Z				; iny
PUBLIC	?jmp@@YAEGPEAUcpu@@E@Z				; jmp
PUBLIC	?jsr@@YAEGPEAUcpu@@E@Z				; jsr
PUBLIC	?lda@@YAEGPEAUcpu@@E@Z				; lda
PUBLIC	?ldx@@YAEGPEAUcpu@@E@Z				; ldx
PUBLIC	?ldy@@YAEGPEAUcpu@@E@Z				; ldy
PUBLIC	?lsr@@YAEGPEAUcpu@@E@Z				; lsr
PUBLIC	?nop@@YAEGPEAUcpu@@E@Z				; nop
PUBLIC	?ora@@YAEGPEAUcpu@@E@Z				; ora
PUBLIC	?pha@@YAEGPEAUcpu@@E@Z				; pha
PUBLIC	?php@@YAEGPEAUcpu@@E@Z				; php
PUBLIC	?pla@@YAEGPEAUcpu@@E@Z				; pla
PUBLIC	?plp@@YAEGPEAUcpu@@E@Z				; plp
PUBLIC	?rol@@YAEGPEAUcpu@@E@Z				; rol
PUBLIC	?ror@@YAEGPEAUcpu@@E@Z				; ror
PUBLIC	?rti@@YAEGPEAUcpu@@E@Z				; rti
PUBLIC	?rts@@YAEGPEAUcpu@@E@Z				; rts
PUBLIC	?sbc@@YAEGPEAUcpu@@E@Z				; sbc
PUBLIC	?sec@@YAEGPEAUcpu@@E@Z				; sec
PUBLIC	?sed@@YAEGPEAUcpu@@E@Z				; sed
PUBLIC	?sei@@YAEGPEAUcpu@@E@Z				; sei
PUBLIC	?sta@@YAEGPEAUcpu@@E@Z				; sta
PUBLIC	?stx@@YAEGPEAUcpu@@E@Z				; stx
PUBLIC	?sty@@YAEGPEAUcpu@@E@Z				; sty
PUBLIC	?tax@@YAEGPEAUcpu@@E@Z				; tax
PUBLIC	?tay@@YAEGPEAUcpu@@E@Z				; tay
PUBLIC	?tsx@@YAEGPEAUcpu@@E@Z				; tsx
PUBLIC	?txa@@YAEGPEAUcpu@@E@Z				; txa
PUBLIC	?tya@@YAEGPEAUcpu@@E@Z				; tya
PUBLIC	?txs@@YAEGPEAUcpu@@E@Z				; txs
PUBLIC	?ahx@@YAEGPEAUcpu@@E@Z				; ahx
PUBLIC	?alr@@YAEGPEAUcpu@@E@Z				; alr
PUBLIC	?anc@@YAEGPEAUcpu@@E@Z				; anc
PUBLIC	?arr@@YAEGPEAUcpu@@E@Z				; arr
PUBLIC	?axs@@YAEGPEAUcpu@@E@Z				; axs
PUBLIC	?dcp@@YAEGPEAUcpu@@E@Z				; dcp
PUBLIC	?isc@@YAEGPEAUcpu@@E@Z				; isc
PUBLIC	?kil@@YAEGPEAUcpu@@E@Z				; kil
PUBLIC	?las@@YAEGPEAUcpu@@E@Z				; las
PUBLIC	?lax@@YAEGPEAUcpu@@E@Z				; lax
PUBLIC	?rla@@YAEGPEAUcpu@@E@Z				; rla
PUBLIC	?rra@@YAEGPEAUcpu@@E@Z				; rra
PUBLIC	?sax@@YAEGPEAUcpu@@E@Z				; sax
PUBLIC	?shx@@YAEGPEAUcpu@@E@Z				; shx
PUBLIC	?shy@@YAEGPEAUcpu@@E@Z				; shy
PUBLIC	?slo@@YAEGPEAUcpu@@E@Z				; slo
PUBLIC	?sre@@YAEGPEAUcpu@@E@Z				; sre
PUBLIC	?tas@@YAEGPEAUcpu@@E@Z				; tas
PUBLIC	?Palette@@3PAY02EA				; Palette
PUBLIC	?xaa@@YAEGPEAUcpu@@E@Z				; xaa
PUBLIC	?instrOps@@3PAP6AEGPEAUcpu@@E@ZA		; instrOps
PUBLIC	?LowPatternShiftReg@@3GA			; LowPatternShiftReg
PUBLIC	?HighPatternShiftReg@@3GA			; HighPatternShiftReg
PUBLIC	?PaletteLatchOld@@3EA				; PaletteLatchOld
PUBLIC	?PaletteLatchNew@@3EA				; PaletteLatchNew
PUBLIC	?NextLowPattern@@3EA				; NextLowPattern
PUBLIC	?NextHighPattern@@3EA				; NextHighPattern
PUBLIC	?NextAtrbByte@@3EA				; NextAtrbByte
PUBLIC	?NextNametableAdrs@@3GA				; NextNametableAdrs
PUBLIC	?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; nromInit
PUBLIC	?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mmc1Init
PUBLIC	?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; unromInit
PUBLIC	?mapperInit@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperInit
PUBLIC	?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; nromUpdate
PUBLIC	?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mmc1Update
PUBLIC	?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; unromUpdate
PUBLIC	?mapperUpdate@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperUpdate
_BSS	SEGMENT
?IOReadFromCpu@@3HA DD 01H DUP (?)			; IOReadFromCpu
?IOWriteFromCpu@@3HA DD 01H DUP (?)			; IOWriteFromCpu
?ScrollAdrsChange@@3HA DD 01H DUP (?)			; ScrollAdrsChange
?VRamAdrsChange@@3HA DD 01H DUP (?)			; VRamAdrsChange
?ResetScrollIOAdrs@@3HA DD 01H DUP (?)			; ResetScrollIOAdrs
?ResetVRamIOAdrs@@3HA DD 01H DUP (?)			; ResetVRamIOAdrs
?DrawScreen@@3HA DD 01H DUP (?)				; DrawScreen
?WinInput@@3Uinput@@A DB 020H DUP (?)			; WinInput
?GlobalMirrorType@@3EA DB 01H DUP (?)			; GlobalMirrorType
	ALIGN	4

?MapperExtWrite@@3HA DD 01H DUP (?)			; MapperExtWrite
?PowerHit@@3HA DD 01H DUP (?)				; PowerHit
?ResetHit@@3HA DD 01H DUP (?)				; ResetHit
	ALIGN	8

?OamData@@3PEAEEA DQ 01H DUP (?)			; OamData
?TriggerNmi@@3HA DD 01H DUP (?)				; TriggerNmi
?NmiTriggered@@3HA DD 01H DUP (?)			; NmiTriggered
?IrqTriggered@@3HA DD 01H DUP (?)			; IrqTriggered
?OamDataChange@@3HA DD 01H DUP (?)			; OamDataChange
?GlobalCpuMemoryBase@@3_KA DQ 01H DUP (?)		; GlobalCpuMemoryBase
?GlobalPpuMemoryBase@@3_KA DQ 01H DUP (?)		; GlobalPpuMemoryBase
?LowPatternShiftReg@@3GA DW 01H DUP (?)			; LowPatternShiftReg
	ALIGN	4

?HighPatternShiftReg@@3GA DW 01H DUP (?)		; HighPatternShiftReg
	ALIGN	4

?PaletteLatchOld@@3EA DB 01H DUP (?)			; PaletteLatchOld
	ALIGN	4

?PaletteLatchNew@@3EA DB 01H DUP (?)			; PaletteLatchNew
	ALIGN	4

?NextLowPattern@@3EA DB 01H DUP (?)			; NextLowPattern
	ALIGN	4

?NextHighPattern@@3EA DB 01H DUP (?)			; NextHighPattern
	ALIGN	4

?NextAtrbByte@@3EA DB 01H DUP (?)			; NextAtrbByte
	ALIGN	4

?NextNametableAdrs@@3GA DW 01H DUP (?)			; NextNametableAdrs
_BSS	ENDS
_DATA	SEGMENT
?instCycles@@3PAEA DB 07H				; instCycles
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	06H
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	06H
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	06H
	DB	06H
	DB	00H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	02H
	DB	02H
	DB	02H
	DB	05H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	02H
	DB	06H
	DB	02H
	DB	06H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	06H
	DB	00H
	DB	06H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	05H
	DB	02H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	02H
	DB	06H
	DB	02H
	DB	06H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	05H
	DB	00H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	04H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	06H
	DB	02H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
	DB	02H
	DB	06H
	DB	02H
	DB	08H
	DB	03H
	DB	03H
	DB	05H
	DB	05H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	05H
	DB	00H
	DB	08H
	DB	04H
	DB	04H
	DB	06H
	DB	06H
	DB	02H
	DB	04H
	DB	02H
	DB	07H
	DB	04H
	DB	04H
	DB	07H
	DB	07H
?instBoundaryCheck@@3PAEA DB 00H			; instBoundaryCheck
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
?PowerOn@@3HA DD 01H					; PowerOn
	ORG $+12
?Palette@@3PAY02EA DB 075H				; Palette
	DB	075H
	DB	075H
	DB	027H
	DB	01bH
	DB	08fH
	DB	00H
	DB	00H
	DB	0abH
	DB	047H
	DB	00H
	DB	09fH
	DB	08fH
	DB	00H
	DB	077H
	DB	0abH
	DB	00H
	DB	013H
	DB	0a7H
	DB	00H
	DB	00H
	DB	07fH
	DB	0bH
	DB	00H
	DB	043H
	DB	02fH
	DB	00H
	DB	00H
	DB	047H
	DB	00H
	DB	00H
	DB	051H
	DB	00H
	DB	00H
	DB	03fH
	DB	017H
	DB	01bH
	DB	03fH
	DB	05fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0bcH
	DB	0bcH
	DB	0bcH
	DB	00H
	DB	073H
	DB	0efH
	DB	023H
	DB	03bH
	DB	0efH
	DB	083H
	DB	00H
	DB	0f3H
	DB	0bfH
	DB	00H
	DB	0bfH
	DB	0e7H
	DB	00H
	DB	05bH
	DB	0dbH
	DB	02bH
	DB	00H
	DB	0cbH
	DB	04fH
	DB	0fH
	DB	08bH
	DB	073H
	DB	00H
	DB	00H
	DB	097H
	DB	00H
	DB	00H
	DB	0abH
	DB	00H
	DB	00H
	DB	093H
	DB	03bH
	DB	00H
	DB	083H
	DB	08bH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	03fH
	DB	0bfH
	DB	0ffH
	DB	05fH
	DB	097H
	DB	0ffH
	DB	0a7H
	DB	08bH
	DB	0fdH
	DB	0f7H
	DB	07bH
	DB	0ffH
	DB	0ffH
	DB	077H
	DB	0b7H
	DB	0ffH
	DB	077H
	DB	063H
	DB	0ffH
	DB	09bH
	DB	03bH
	DB	0f3H
	DB	0bfH
	DB	03fH
	DB	083H
	DB	0d3H
	DB	013H
	DB	04fH
	DB	0dfH
	DB	04bH
	DB	058H
	DB	0f8H
	DB	098H
	DB	00H
	DB	0ebH
	DB	0dbH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0abH
	DB	0e7H
	DB	0ffH
	DB	0c7H
	DB	0d7H
	DB	0ffH
	DB	0d7H
	DB	0cbH
	DB	0ffH
	DB	0ffH
	DB	0c7H
	DB	0ffH
	DB	0ffH
	DB	0c7H
	DB	0dbH
	DB	0ffH
	DB	0bfH
	DB	0b3H
	DB	0ffH
	DB	0dbH
	DB	0abH
	DB	0ffH
	DB	0e7H
	DB	0a3H
	DB	0e3H
	DB	0ffH
	DB	0a3H
	DB	0abH
	DB	0f3H
	DB	0bfH
	DB	0b3H
	DB	0ffH
	DB	0cfH
	DB	09fH
	DB	0ffH
	DB	0f3H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?instrOps@@3PAP6AEGPEAUcpu@@E@ZA DQ FLAT:?brk@@YAEGPEAUcpu@@E@Z ; instrOps
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?php@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?anc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bpl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?clc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ora@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?asl@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?slo@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?jsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bit@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?plp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?anc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bit@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bmi@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?AND@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rol@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rti@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?pha@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?alr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?jmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bvc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cli@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?eor@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lsr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sre@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rts@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?pla@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?arr@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?jmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bvs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sei@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?adc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ror@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?rra@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sty@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?stx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dey@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?txa@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?xaa@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sty@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?stx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bcc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ahx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sty@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?stx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tya@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?txs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tas@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?shy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sta@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?shx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ahx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tay@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bcs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?clv@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?tsx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?las@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lda@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?ldx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?lax@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?iny@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dex@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?axs@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpy@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?bne@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cld@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cmp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dec@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?dcp@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?cpx@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?beq@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?kil@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sed@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?nop@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?sbc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?inc@@YAEGPEAUcpu@@E@Z
	DQ	FLAT:?isc@@YAEGPEAUcpu@@E@Z
?mapperInit@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA DQ FLAT:?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mapperInit
	DQ	FLAT:?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
	DQ	FLAT:?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
?mapperUpdate@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA DQ FLAT:?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ; mapperUpdate
	DQ	FLAT:?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
	DQ	FLAT:?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
?instAddressMode@@3PAEA DB 09H				; instAddressMode
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	06H
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	09H
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	09H
	DB	0bH
	DB	09H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	01H
	DB	02H
	DB	0dH
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	02H
	DB	0bH
	DB	02H
	DB	0bH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	09H
	DB	02H
	DB	09H
	DB	02H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0aH
	DB	0cH
	DB	09H
	DB	0cH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	09H
	DB	08H
	DB	09H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
?instLength@@3PAEA DB 02H				; instLength
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
	DB	02H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	01H
	DB	03H
	DB	01H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
?instName@@3PAPEADA DQ FLAT:$SG89858			; instName
	DQ	FLAT:$SG89859
	DQ	FLAT:$SG89860
	DQ	FLAT:$SG89861
	DQ	FLAT:$SG89862
	DQ	FLAT:$SG89863
	DQ	FLAT:$SG89864
	DQ	FLAT:$SG89865
	DQ	FLAT:$SG89866
	DQ	FLAT:$SG89867
	DQ	FLAT:$SG89868
	DQ	FLAT:$SG89869
	DQ	FLAT:$SG89870
	DQ	FLAT:$SG89871
	DQ	FLAT:$SG89872
	DQ	FLAT:$SG89873
	DQ	FLAT:$SG89874
	DQ	FLAT:$SG89875
	DQ	FLAT:$SG89876
	DQ	FLAT:$SG89877
	DQ	FLAT:$SG89878
	DQ	FLAT:$SG89879
	DQ	FLAT:$SG89880
	DQ	FLAT:$SG89881
	DQ	FLAT:$SG89882
	DQ	FLAT:$SG89883
	DQ	FLAT:$SG89884
	DQ	FLAT:$SG89885
	DQ	FLAT:$SG89886
	DQ	FLAT:$SG89887
	DQ	FLAT:$SG89888
	DQ	FLAT:$SG89889
	DQ	FLAT:$SG89890
	DQ	FLAT:$SG89891
	DQ	FLAT:$SG89892
	DQ	FLAT:$SG89893
	DQ	FLAT:$SG89894
	DQ	FLAT:$SG89895
	DQ	FLAT:$SG89896
	DQ	FLAT:$SG89897
	DQ	FLAT:$SG89898
	DQ	FLAT:$SG89899
	DQ	FLAT:$SG89900
	DQ	FLAT:$SG89901
	DQ	FLAT:$SG89902
	DQ	FLAT:$SG89903
	DQ	FLAT:$SG89904
	DQ	FLAT:$SG89905
	DQ	FLAT:$SG89906
	DQ	FLAT:$SG89907
	DQ	FLAT:$SG89908
	DQ	FLAT:$SG89909
	DQ	FLAT:$SG89910
	DQ	FLAT:$SG89911
	DQ	FLAT:$SG89912
	DQ	FLAT:$SG89913
	DQ	FLAT:$SG89914
	DQ	FLAT:$SG89915
	DQ	FLAT:$SG89916
	DQ	FLAT:$SG89917
	DQ	FLAT:$SG89918
	DQ	FLAT:$SG89919
	DQ	FLAT:$SG89920
	DQ	FLAT:$SG89921
	DQ	FLAT:$SG89922
	DQ	FLAT:$SG89923
	DQ	FLAT:$SG89924
	DQ	FLAT:$SG89925
	DQ	FLAT:$SG89926
	DQ	FLAT:$SG89927
	DQ	FLAT:$SG89928
	DQ	FLAT:$SG89929
	DQ	FLAT:$SG89930
	DQ	FLAT:$SG89931
	DQ	FLAT:$SG89932
	DQ	FLAT:$SG89933
	DQ	FLAT:$SG89934
	DQ	FLAT:$SG89935
	DQ	FLAT:$SG89936
	DQ	FLAT:$SG89937
	DQ	FLAT:$SG89938
	DQ	FLAT:$SG89939
	DQ	FLAT:$SG89940
	DQ	FLAT:$SG89941
	DQ	FLAT:$SG89942
	DQ	FLAT:$SG89943
	DQ	FLAT:$SG89944
	DQ	FLAT:$SG89945
	DQ	FLAT:$SG89946
	DQ	FLAT:$SG89947
	DQ	FLAT:$SG89948
	DQ	FLAT:$SG89949
	DQ	FLAT:$SG89950
	DQ	FLAT:$SG89951
	DQ	FLAT:$SG89952
	DQ	FLAT:$SG89953
	DQ	FLAT:$SG89954
	DQ	FLAT:$SG89955
	DQ	FLAT:$SG89956
	DQ	FLAT:$SG89957
	DQ	FLAT:$SG89958
	DQ	FLAT:$SG89959
	DQ	FLAT:$SG89960
	DQ	FLAT:$SG89961
	DQ	FLAT:$SG89962
	DQ	FLAT:$SG89963
	DQ	FLAT:$SG89964
	DQ	FLAT:$SG89965
	DQ	FLAT:$SG89966
	DQ	FLAT:$SG89967
	DQ	FLAT:$SG89968
	DQ	FLAT:$SG89969
	DQ	FLAT:$SG89970
	DQ	FLAT:$SG89971
	DQ	FLAT:$SG89972
	DQ	FLAT:$SG89973
	DQ	FLAT:$SG89974
	DQ	FLAT:$SG89975
	DQ	FLAT:$SG89976
	DQ	FLAT:$SG89977
	DQ	FLAT:$SG89978
	DQ	FLAT:$SG89979
	DQ	FLAT:$SG89980
	DQ	FLAT:$SG89981
	DQ	FLAT:$SG89982
	DQ	FLAT:$SG89983
	DQ	FLAT:$SG89984
	DQ	FLAT:$SG89985
	DQ	FLAT:$SG89986
	DQ	FLAT:$SG89987
	DQ	FLAT:$SG89988
	DQ	FLAT:$SG89989
	DQ	FLAT:$SG89990
	DQ	FLAT:$SG89991
	DQ	FLAT:$SG89992
	DQ	FLAT:$SG89993
	DQ	FLAT:$SG89994
	DQ	FLAT:$SG89995
	DQ	FLAT:$SG89996
	DQ	FLAT:$SG89997
	DQ	FLAT:$SG89998
	DQ	FLAT:$SG89999
	DQ	FLAT:$SG90000
	DQ	FLAT:$SG90001
	DQ	FLAT:$SG90002
	DQ	FLAT:$SG90003
	DQ	FLAT:$SG90004
	DQ	FLAT:$SG90005
	DQ	FLAT:$SG90006
	DQ	FLAT:$SG90007
	DQ	FLAT:$SG90008
	DQ	FLAT:$SG90009
	DQ	FLAT:$SG90010
	DQ	FLAT:$SG90011
	DQ	FLAT:$SG90012
	DQ	FLAT:$SG90013
	DQ	FLAT:$SG90014
	DQ	FLAT:$SG90015
	DQ	FLAT:$SG90016
	DQ	FLAT:$SG90017
	DQ	FLAT:$SG90018
	DQ	FLAT:$SG90019
	DQ	FLAT:$SG90020
	DQ	FLAT:$SG90021
	DQ	FLAT:$SG90022
	DQ	FLAT:$SG90023
	DQ	FLAT:$SG90024
	DQ	FLAT:$SG90025
	DQ	FLAT:$SG90026
	DQ	FLAT:$SG90027
	DQ	FLAT:$SG90028
	DQ	FLAT:$SG90029
	DQ	FLAT:$SG90030
	DQ	FLAT:$SG90031
	DQ	FLAT:$SG90032
	DQ	FLAT:$SG90033
	DQ	FLAT:$SG90034
	DQ	FLAT:$SG90035
	DQ	FLAT:$SG90036
	DQ	FLAT:$SG90037
	DQ	FLAT:$SG90038
	DQ	FLAT:$SG90039
	DQ	FLAT:$SG90040
	DQ	FLAT:$SG90041
	DQ	FLAT:$SG90042
	DQ	FLAT:$SG90043
	DQ	FLAT:$SG90044
	DQ	FLAT:$SG90045
	DQ	FLAT:$SG90046
	DQ	FLAT:$SG90047
	DQ	FLAT:$SG90048
	DQ	FLAT:$SG90049
	DQ	FLAT:$SG90050
	DQ	FLAT:$SG90051
	DQ	FLAT:$SG90052
	DQ	FLAT:$SG90053
	DQ	FLAT:$SG90054
	DQ	FLAT:$SG90055
	DQ	FLAT:$SG90056
	DQ	FLAT:$SG90057
	DQ	FLAT:$SG90058
	DQ	FLAT:$SG90059
	DQ	FLAT:$SG90060
	DQ	FLAT:$SG90061
	DQ	FLAT:$SG90062
	DQ	FLAT:$SG90063
	DQ	FLAT:$SG90064
	DQ	FLAT:$SG90065
	DQ	FLAT:$SG90066
	DQ	FLAT:$SG90067
	DQ	FLAT:$SG90068
	DQ	FLAT:$SG90069
	DQ	FLAT:$SG90070
	DQ	FLAT:$SG90071
	DQ	FLAT:$SG90072
	DQ	FLAT:$SG90073
	DQ	FLAT:$SG90074
	DQ	FLAT:$SG90075
	DQ	FLAT:$SG90076
	DQ	FLAT:$SG90077
	DQ	FLAT:$SG90078
	DQ	FLAT:$SG90079
	DQ	FLAT:$SG90080
	DQ	FLAT:$SG90081
	DQ	FLAT:$SG90082
	DQ	FLAT:$SG90083
	DQ	FLAT:$SG90084
	DQ	FLAT:$SG90085
	DQ	FLAT:$SG90086
	DQ	FLAT:$SG90087
	DQ	FLAT:$SG90088
	DQ	FLAT:$SG90089
	DQ	FLAT:$SG90090
	DQ	FLAT:$SG90091
	DQ	FLAT:$SG90092
	DQ	FLAT:$SG90093
	DQ	FLAT:$SG90094
	DQ	FLAT:$SG90095
	DQ	FLAT:$SG90096
	DQ	FLAT:$SG90097
	DQ	FLAT:$SG90098
	DQ	FLAT:$SG90099
	DQ	FLAT:$SG90100
	DQ	FLAT:$SG90101
	DQ	FLAT:$SG90102
	DQ	FLAT:$SG90103
	DQ	FLAT:$SG90104
	DQ	FLAT:$SG90105
	DQ	FLAT:$SG90106
	DQ	FLAT:$SG90107
	DQ	FLAT:$SG90108
	DQ	FLAT:$SG90109
	DQ	FLAT:$SG90110
	DQ	FLAT:$SG90111
	DQ	FLAT:$SG90112
	DQ	FLAT:$SG90113
_DATA	ENDS
CONST	SEGMENT
$SG90112 DB	'INC', 00H
$SG90113 DB	'ISC', 00H
$SG89233 DB	'.nes', 00H, '*.nes', 00H, 00H
$SG90692 DB	'NMI', 00H
$SG90695 DB	'IRQ', 00H
$SG89858 DB	'BRK', 00H
$SG89859 DB	'ORA', 00H
$SG89860 DB	'KIL', 00H
$SG89861 DB	'SLO', 00H
$SG89862 DB	'NOP', 00H
$SG89863 DB	'ORA', 00H
$SG89864 DB	'ASL', 00H
$SG89865 DB	'SLO', 00H
$SG89866 DB	'PHP', 00H
$SG89867 DB	'ORA', 00H
$SG89868 DB	'ASL', 00H
$SG89869 DB	'ANC', 00H
$SG89870 DB	'NOP', 00H
$SG89871 DB	'ORA', 00H
$SG89872 DB	'ASL', 00H
$SG89873 DB	'SLO', 00H
$SG89874 DB	'BPL', 00H
$SG89875 DB	'ORA', 00H
$SG89876 DB	'KIL', 00H
$SG89877 DB	'SLO', 00H
$SG89878 DB	'NOP', 00H
$SG89879 DB	'ORA', 00H
$SG89880 DB	'ASL', 00H
$SG89881 DB	'SLO', 00H
$SG89882 DB	'CLC', 00H
$SG89883 DB	'ORA', 00H
$SG89884 DB	'NOP', 00H
$SG89885 DB	'SLO', 00H
$SG89886 DB	'NOP', 00H
$SG89887 DB	'ORA', 00H
$SG89888 DB	'ASL', 00H
$SG89889 DB	'SLO', 00H
$SG89890 DB	'JSR', 00H
$SG89891 DB	'AND', 00H
$SG89892 DB	'KIL', 00H
$SG89893 DB	'RLA', 00H
$SG89894 DB	'BIT', 00H
$SG89895 DB	'AND', 00H
$SG89896 DB	'ROL', 00H
$SG89897 DB	'RLA', 00H
$SG89898 DB	'PLP', 00H
$SG89899 DB	'AND', 00H
$SG89900 DB	'ROL', 00H
$SG89901 DB	'ANC', 00H
$SG89902 DB	'BIT', 00H
$SG89903 DB	'AND', 00H
$SG89904 DB	'ROL', 00H
$SG89905 DB	'RLA', 00H
$SG89906 DB	'BMI', 00H
$SG89907 DB	'AND', 00H
$SG89908 DB	'KIL', 00H
$SG89909 DB	'RLA', 00H
$SG89910 DB	'NOP', 00H
$SG89911 DB	'AND', 00H
$SG89912 DB	'ROL', 00H
$SG89913 DB	'RLA', 00H
$SG89914 DB	'SEC', 00H
$SG89915 DB	'AND', 00H
$SG89916 DB	'NOP', 00H
$SG89917 DB	'RLA', 00H
$SG89918 DB	'NOP', 00H
$SG89919 DB	'AND', 00H
$SG89920 DB	'ROL', 00H
$SG90944 DB	'Donkey Kong', 00H
$SG89921 DB	'RLA', 00H
$SG89922 DB	'RTI', 00H
$SG90947 DB	'NesEmu', 00H
	ORG $+1
$SG89923 DB	'EOR', 00H
$SG89924 DB	'KIL', 00H
$SG89925 DB	'SRE', 00H
$SG90950 DB	'&Open Rom', 00H
	ORG $+2
$SG89926 DB	'NOP', 00H
$SG90951 DB	'&Close Rom', 00H
	ORG $+1
$SG89927 DB	'EOR', 00H
$SG90952 DB	'&Quit', 00H
	ORG $+2
$SG89928 DB	'LSR', 00H
$SG90953 DB	'&File', 00H
	ORG $+2
$SG89929 DB	'SRE', 00H
$SG90954 DB	'Cpu Base = %X , Ppu Base = %X', 0aH, 00H
	ORG $+1
$SG89930 DB	'PHA', 00H
$SG89931 DB	'EOR', 00H
$SG90955 DB	'Donkey Kong.nes', 00H
$SG89932 DB	'LSR', 00H
$SG89933 DB	'ALR', 00H
$SG89934 DB	'JMP', 00H
$SG89935 DB	'EOR', 00H
$SG89936 DB	'LSR', 00H
$SG89937 DB	'SRE', 00H
$SG89938 DB	'BVC', 00H
$SG89939 DB	'EOR', 00H
$SG89940 DB	'KIL', 00H
$SG89941 DB	'SRE', 00H
$SG89942 DB	'NOP', 00H
$SG89943 DB	'EOR', 00H
$SG89944 DB	'LSR', 00H
$SG89945 DB	'SRE', 00H
$SG89946 DB	'CLI', 00H
$SG89947 DB	'EOR', 00H
$SG89948 DB	'NOP', 00H
$SG89949 DB	'SRE', 00H
$SG89950 DB	'NOP', 00H
$SG89951 DB	'EOR', 00H
$SG89952 DB	'LSR', 00H
$SG89953 DB	'SRE', 00H
$SG89954 DB	'RTS', 00H
$SG89955 DB	'ADC', 00H
$SG89956 DB	'KIL', 00H
$SG89957 DB	'RRA', 00H
$SG89958 DB	'NOP', 00H
$SG89959 DB	'ADC', 00H
$SG89960 DB	'ROR', 00H
$SG89961 DB	'RRA', 00H
$SG89962 DB	'PLA', 00H
$SG89963 DB	'ADC', 00H
$SG89964 DB	'ROR', 00H
$SG89965 DB	'ARR', 00H
$SG89966 DB	'JMP', 00H
$SG89967 DB	'ADC', 00H
$SG89968 DB	'ROR', 00H
$SG89969 DB	'RRA', 00H
$SG89970 DB	'BVS', 00H
$SG89971 DB	'ADC', 00H
$SG89972 DB	'KIL', 00H
$SG89973 DB	'RRA', 00H
$SG89974 DB	'NOP', 00H
$SG89975 DB	'ADC', 00H
$SG89976 DB	'ROR', 00H
$SG89977 DB	'RRA', 00H
$SG89978 DB	'SEI', 00H
$SG89979 DB	'ADC', 00H
$SG89980 DB	'NOP', 00H
$SG89981 DB	'RRA', 00H
$SG89982 DB	'NOP', 00H
$SG89983 DB	'ADC', 00H
$SG89984 DB	'ROR', 00H
$SG89985 DB	'RRA', 00H
$SG89986 DB	'NOP', 00H
$SG89987 DB	'STA', 00H
$SG89988 DB	'NOP', 00H
$SG89989 DB	'SAX', 00H
$SG89990 DB	'STY', 00H
$SG89991 DB	'STA', 00H
$SG89992 DB	'STX', 00H
$SG89993 DB	'SAX', 00H
$SG89994 DB	'DEY', 00H
$SG89995 DB	'NOP', 00H
$SG89996 DB	'TXA', 00H
$SG89997 DB	'XAA', 00H
$SG89998 DB	'STY', 00H
$SG89999 DB	'STA', 00H
$SG90000 DB	'STX', 00H
$SG90001 DB	'SAX', 00H
$SG90002 DB	'BCC', 00H
$SG90003 DB	'STA', 00H
$SG90004 DB	'KIL', 00H
$SG90005 DB	'AHX', 00H
$SG90006 DB	'STY', 00H
$SG90007 DB	'STA', 00H
$SG90008 DB	'STX', 00H
$SG90009 DB	'SAX', 00H
$SG90010 DB	'TYA', 00H
$SG90011 DB	'STA', 00H
$SG90012 DB	'TXS', 00H
$SG90013 DB	'TAS', 00H
$SG90014 DB	'SHY', 00H
$SG90015 DB	'STA', 00H
$SG90016 DB	'SHX', 00H
$SG90017 DB	'AHX', 00H
$SG90018 DB	'LDY', 00H
$SG90019 DB	'LDA', 00H
$SG90020 DB	'LDX', 00H
$SG90021 DB	'LAX', 00H
$SG90022 DB	'LDY', 00H
$SG90023 DB	'LDA', 00H
$SG90024 DB	'LDX', 00H
$SG90025 DB	'LAX', 00H
$SG90026 DB	'TAY', 00H
$SG90027 DB	'LDA', 00H
$SG90028 DB	'TAX', 00H
$SG90029 DB	'LAX', 00H
$SG90030 DB	'LDY', 00H
$SG90031 DB	'LDA', 00H
$SG90032 DB	'LDX', 00H
$SG90033 DB	'LAX', 00H
$SG90034 DB	'BCS', 00H
$SG90035 DB	'LDA', 00H
$SG90036 DB	'KIL', 00H
$SG90037 DB	'LAX', 00H
$SG90038 DB	'LDY', 00H
$SG90039 DB	'LDA', 00H
$SG90040 DB	'LDX', 00H
$SG90041 DB	'LAX', 00H
$SG90042 DB	'CLV', 00H
$SG90043 DB	'LDA', 00H
$SG90044 DB	'TSX', 00H
$SG90045 DB	'LAS', 00H
$SG90046 DB	'LDY', 00H
$SG90047 DB	'LDA', 00H
$SG90048 DB	'LDX', 00H
$SG90049 DB	'LAX', 00H
$SG90050 DB	'CPY', 00H
$SG90051 DB	'CMP', 00H
$SG90052 DB	'NOP', 00H
$SG90053 DB	'DCP', 00H
$SG90054 DB	'CPY', 00H
$SG90055 DB	'CMP', 00H
$SG90056 DB	'DEC', 00H
$SG90057 DB	'DCP', 00H
$SG90058 DB	'INY', 00H
$SG90059 DB	'CMP', 00H
$SG90060 DB	'DEX', 00H
$SG90061 DB	'AXS', 00H
$SG90062 DB	'CPY', 00H
$SG90063 DB	'CMP', 00H
$SG90064 DB	'DEC', 00H
$SG90065 DB	'DCP', 00H
$SG90066 DB	'BNE', 00H
$SG90067 DB	'CMP', 00H
$SG90068 DB	'KIL', 00H
$SG90069 DB	'DCP', 00H
$SG90070 DB	'NOP', 00H
$SG90071 DB	'CMP', 00H
$SG90072 DB	'DEC', 00H
$SG90073 DB	'DCP', 00H
$SG90074 DB	'CLD', 00H
$SG90075 DB	'CMP', 00H
$SG90076 DB	'NOP', 00H
$SG90077 DB	'DCP', 00H
$SG90078 DB	'NOP', 00H
$SG90079 DB	'CMP', 00H
$SG90080 DB	'DEC', 00H
$SG90081 DB	'DCP', 00H
$SG90082 DB	'CPX', 00H
$SG90083 DB	'SBC', 00H
$SG90084 DB	'NOP', 00H
$SG90085 DB	'ISC', 00H
$SG90086 DB	'CPX', 00H
$SG90087 DB	'SBC', 00H
$SG90088 DB	'INC', 00H
$SG90089 DB	'ISC', 00H
$SG90090 DB	'INX', 00H
$SG90091 DB	'SBC', 00H
$SG90092 DB	'NOP', 00H
$SG90093 DB	'SBC', 00H
$SG90094 DB	'CPX', 00H
$SG90095 DB	'SBC', 00H
$SG90096 DB	'INC', 00H
$SG90097 DB	'ISC', 00H
$SG90098 DB	'BEQ', 00H
$SG90099 DB	'SBC', 00H
$SG90100 DB	'KIL', 00H
$SG90101 DB	'ISC', 00H
$SG90102 DB	'NOP', 00H
$SG90103 DB	'SBC', 00H
$SG90104 DB	'INC', 00H
$SG90105 DB	'ISC', 00H
$SG90106 DB	'SED', 00H
$SG90107 DB	'SBC', 00H
$SG90108 DB	'NOP', 00H
$SG90109 DB	'ISC', 00H
$SG90110 DB	'NOP', 00H
$SG90111 DB	'SBC', 00H
CONST	ENDS
PUBLIC	WinMain
PUBLIC	__local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z	; WinInputCallback
PUBLIC	?getPaletteValue@@YAXEPEAE@Z			; getPaletteValue
PUBLIC	?resetScrollHorz@@YAXPEAUvram_io@@@Z		; resetScrollHorz
PUBLIC	?resetScrollVert@@YAXPEAUvram_io@@@Z		; resetScrollVert
PUBLIC	?scrollIncHorz@@YAXPEAUvram_io@@@Z		; scrollIncHorz
PUBLIC	?scrollIncVert@@YAXPEAUvram_io@@@Z		; scrollIncVert
PUBLIC	?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z	; ppuTick
PUBLIC	?setCarry@@YAXPEAE@Z				; setCarry
PUBLIC	?clearCarry@@YAXPEAE@Z				; clearCarry
PUBLIC	?setInterrupt@@YAXPEAE@Z			; setInterrupt
PUBLIC	?clearInterrupt@@YAXPEAE@Z			; clearInterrupt
PUBLIC	?setDecimal@@YAXPEAE@Z				; setDecimal
PUBLIC	?clearDecimal@@YAXPEAE@Z			; clearDecimal
PUBLIC	?setBreak@@YAXPEAE@Z				; setBreak
PUBLIC	?clearBreak@@YAXPEAE@Z				; clearBreak
PUBLIC	?setBlank@@YAXPEAE@Z				; setBlank
PUBLIC	?setOverflow@@YAXPEAE@Z				; setOverflow
PUBLIC	?clearOverflow@@YAXPEAE@Z			; clearOverflow
PUBLIC	?setZero@@YAXEPEAE@Z				; setZero
PUBLIC	?setNegative@@YAXEPEAE@Z			; setNegative
PUBLIC	?isBitSet@@YAHEE@Z				; isBitSet
PUBLIC	?crossedPageCheck@@YAHGG@Z			; crossedPageCheck
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@408f400000000000
PUBLIC	__real@447a0000
PUBLIC	__real@49da7a66
PUBLIC	__real@5f800000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSizeEx:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_SetMenu:PROC
EXTRN	__imp_CreateMenu:PROC
EXTRN	__imp_CreatePopupMenu:PROC
EXTRN	__imp_AppendMenuA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_GetOpenFileNameA:PROC
EXTRN	__stdio_common_vsprintf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?GlobalRunning@@3HA DD 01H DUP (?)			; GlobalRunning
?RomFileName@@3PADA DB 0100H DUP (?)			; RomFileName
	ALIGN	8

?GlobalCpu@@3PEAUcpu@@EA DQ 01H DUP (?)			; GlobalCpu
?GlobalPpu@@3PEAUppu@@EA DQ 01H DUP (?)			; GlobalPpu
_BSS	ENDS
;	COMDAT ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
_BSS	SEGMENT
?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA DB 01H DUP (?) ; `mmc1Update'::`2'::PrgRomMode
_BSS	ENDS
;	COMDAT ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
_BSS	SEGMENT
?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA DB 01H DUP (?) ; `mmc1Update'::`2'::ChrRomMode
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN21
	DD	imagerel $LN21+1701
	DD	imagerel $unwind$WinMain
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$?getMilliSeconds@@YAM_K@Z DD imagerel ?getMilliSeconds@@YAM_K@Z
	DD	imagerel ?getMilliSeconds@@YAM_K@Z+112
	DD	imagerel $unwind$?getMilliSeconds@@YAM_K@Z
$pdata$?cpyMemory@@YAXPEAE0G@Z DD imagerel ?cpyMemory@@YAXPEAE0G@Z
	DD	imagerel ?cpyMemory@@YAXPEAE0G@Z+85
	DD	imagerel $unwind$?cpyMemory@@YAXPEAE0G@Z
$pdata$?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN60
	DD	imagerel $LN60+1495
	DD	imagerel $unwind$?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?LoadFile@@YAPEAXPEADPEAI@Z DD imagerel ?LoadFile@@YAPEAXPEADPEAI@Z
	DD	imagerel ?LoadFile@@YAPEAXPEADPEAI@Z+239
	DD	imagerel $unwind$?LoadFile@@YAPEAXPEADPEAI@Z
$pdata$?readPpuRegister@@YAEG@Z DD imagerel ?readPpuRegister@@YAEG@Z
	DD	imagerel ?readPpuRegister@@YAEG@Z+756
	DD	imagerel $unwind$?readPpuRegister@@YAEG@Z
$pdata$?writePpuRegister@@YAXEG@Z DD imagerel ?writePpuRegister@@YAXEG@Z
	DD	imagerel ?writePpuRegister@@YAXEG@Z+1884
	DD	imagerel $unwind$?writePpuRegister@@YAXEG@Z
$pdata$?write8@@YAXEG_K@Z DD imagerel ?write8@@YAXEG_K@Z
	DD	imagerel ?write8@@YAXEG_K@Z+48
	DD	imagerel $unwind$?write8@@YAXEG_K@Z
$pdata$?read8@@YAEG_K@Z DD imagerel ?read8@@YAEG_K@Z
	DD	imagerel ?read8@@YAEG_K@Z+49
	DD	imagerel $unwind$?read8@@YAEG_K@Z
$pdata$?ppuMemoryMirror@@YAGG@Z DD imagerel ?ppuMemoryMirror@@YAGG@Z
	DD	imagerel ?ppuMemoryMirror@@YAGG@Z+556
	DD	imagerel $unwind$?ppuMemoryMirror@@YAGG@Z
$pdata$?readCpu8@@YAEGPEAUcpu@@@Z DD imagerel ?readCpu8@@YAEGPEAUcpu@@@Z
	DD	imagerel ?readCpu8@@YAEGPEAUcpu@@@Z+400
	DD	imagerel $unwind$?readCpu8@@YAEGPEAUcpu@@@Z
$pdata$?readCpu16@@YAGGPEAUcpu@@@Z DD imagerel ?readCpu16@@YAGGPEAUcpu@@@Z
	DD	imagerel ?readCpu16@@YAGGPEAUcpu@@@Z+87
	DD	imagerel $unwind$?readCpu16@@YAGGPEAUcpu@@@Z
$pdata$?bugReadCpu16@@YAGGPEAUcpu@@@Z DD imagerel ?bugReadCpu16@@YAGGPEAUcpu@@@Z
	DD	imagerel ?bugReadCpu16@@YAGGPEAUcpu@@@Z+109
	DD	imagerel $unwind$?bugReadCpu16@@YAGGPEAUcpu@@@Z
$pdata$?writeCpu8@@YAXEGPEAUcpu@@@Z DD imagerel ?writeCpu8@@YAXEGPEAUcpu@@@Z
	DD	imagerel ?writeCpu8@@YAXEGPEAUcpu@@@Z+425
	DD	imagerel $unwind$?writeCpu8@@YAXEGPEAUcpu@@@Z
$pdata$?readPpu8@@YAEGPEAUppu@@@Z DD imagerel ?readPpu8@@YAEGPEAUppu@@@Z
	DD	imagerel ?readPpu8@@YAEGPEAUppu@@@Z+61
	DD	imagerel $unwind$?readPpu8@@YAEGPEAUppu@@@Z
$pdata$?writePpu8@@YAXEGPEAUppu@@@Z DD imagerel ?writePpu8@@YAXEGPEAUppu@@@Z
	DD	imagerel ?writePpu8@@YAXEGPEAUppu@@@Z+61
	DD	imagerel $unwind$?writePpu8@@YAXEGPEAUppu@@@Z
$pdata$?drawPixel@@YAXPEAUppu@@GGPEAE@Z DD imagerel ?drawPixel@@YAXPEAUppu@@GGPEAE@Z
	DD	imagerel ?drawPixel@@YAXPEAUppu@@GGPEAE@Z+139
	DD	imagerel $unwind$?drawPixel@@YAXPEAUppu@@GGPEAE@Z
$pdata$?scrollIncVert@@YAXPEAUvram_io@@@Z DD imagerel $LN9
	DD	imagerel $LN9+195
	DD	imagerel $unwind$?scrollIncVert@@YAXPEAUvram_io@@@Z
$pdata$?loadFutureData@@YAXPEAUppu@@@Z DD imagerel ?loadFutureData@@YAXPEAUppu@@@Z
	DD	imagerel ?loadFutureData@@YAXPEAUppu@@@Z+562
	DD	imagerel $unwind$?loadFutureData@@YAXPEAUppu@@@Z
$pdata$?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z DD imagerel ?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z
	DD	imagerel ?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z+68
	DD	imagerel $unwind$?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z
$pdata$?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z DD imagerel ?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z
	DD	imagerel ?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z+202
	DD	imagerel $unwind$?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z
$pdata$?spriteEvaluation@@YAXPEAUppu@@@Z DD imagerel ?spriteEvaluation@@YAXPEAUppu@@@Z
	DD	imagerel ?spriteEvaluation@@YAXPEAUppu@@@Z+463
	DD	imagerel $unwind$?spriteEvaluation@@YAXPEAUppu@@@Z
$pdata$?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z DD imagerel $LN59
	DD	imagerel $LN59+2430
	DD	imagerel $unwind$?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z
$pdata$?push@@YAXEPEAUcpu@@@Z DD imagerel ?push@@YAXEPEAUcpu@@@Z
	DD	imagerel ?push@@YAXEPEAUcpu@@@Z+68
	DD	imagerel $unwind$?push@@YAXEPEAUcpu@@@Z
$pdata$?pop@@YAEPEAUcpu@@@Z DD imagerel ?pop@@YAEPEAUcpu@@@Z
	DD	imagerel ?pop@@YAEPEAUcpu@@@Z+68
	DD	imagerel $unwind$?pop@@YAEPEAUcpu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?crossedPageCheck@@YAHGG@Z DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$?crossedPageCheck@@YAHGG@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?adc@@YAEGPEAUcpu@@E@Z DD imagerel $LN7
	DD	imagerel $LN7+281
	DD	imagerel $unwind$?adc@@YAEGPEAUcpu@@E@Z
$pdata$?AND@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?AND@@YAEGPEAUcpu@@E@Z
$pdata$?asl@@YAEGPEAUcpu@@E@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$?asl@@YAEGPEAUcpu@@E@Z
$pdata$?bcc@@YAEGPEAUcpu@@E@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$?bcc@@YAEGPEAUcpu@@E@Z
$pdata$?bcs@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bcs@@YAEGPEAUcpu@@E@Z
$pdata$?beq@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?beq@@YAEGPEAUcpu@@E@Z
$pdata$?bit@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$?bit@@YAEGPEAUcpu@@E@Z
$pdata$?bmi@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bmi@@YAEGPEAUcpu@@E@Z
$pdata$?bne@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bne@@YAEGPEAUcpu@@E@Z
$pdata$?bpl@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bpl@@YAEGPEAUcpu@@E@Z
$pdata$?brk@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+178
	DD	imagerel $unwind$?brk@@YAEGPEAUcpu@@E@Z
$pdata$?bvc@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bvc@@YAEGPEAUcpu@@E@Z
$pdata$?bvs@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$?bvs@@YAEGPEAUcpu@@E@Z
$pdata$?clc@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?clc@@YAEGPEAUcpu@@E@Z
$pdata$?cld@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?cld@@YAEGPEAUcpu@@E@Z
$pdata$?cli@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?cli@@YAEGPEAUcpu@@E@Z
$pdata$?clv@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?clv@@YAEGPEAUcpu@@E@Z
$pdata$?cmp@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$?cmp@@YAEGPEAUcpu@@E@Z
$pdata$?cpx@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+163
	DD	imagerel $unwind$?cpx@@YAEGPEAUcpu@@E@Z
$pdata$?cpy@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+163
	DD	imagerel $unwind$?cpy@@YAEGPEAUcpu@@E@Z
$pdata$?dec@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?dec@@YAEGPEAUcpu@@E@Z
$pdata$?dex@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?dex@@YAEGPEAUcpu@@E@Z
$pdata$?dey@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?dey@@YAEGPEAUcpu@@E@Z
$pdata$?eor@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?eor@@YAEGPEAUcpu@@E@Z
$pdata$?inc@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$?inc@@YAEGPEAUcpu@@E@Z
$pdata$?inx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?inx@@YAEGPEAUcpu@@E@Z
$pdata$?iny@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$?iny@@YAEGPEAUcpu@@E@Z
$pdata$?jsr@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$?jsr@@YAEGPEAUcpu@@E@Z
$pdata$?lda@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$?lda@@YAEGPEAUcpu@@E@Z
$pdata$?ldx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?ldx@@YAEGPEAUcpu@@E@Z
$pdata$?ldy@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?ldy@@YAEGPEAUcpu@@E@Z
$pdata$?lsr@@YAEGPEAUcpu@@E@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$?lsr@@YAEGPEAUcpu@@E@Z
$pdata$?ora@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+117
	DD	imagerel $unwind$?ora@@YAEGPEAUcpu@@E@Z
$pdata$?pha@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?pha@@YAEGPEAUcpu@@E@Z
$pdata$?php@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?php@@YAEGPEAUcpu@@E@Z
$pdata$?pla@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?pla@@YAEGPEAUcpu@@E@Z
$pdata$?plp@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?plp@@YAEGPEAUcpu@@E@Z
$pdata$?rol@@YAEGPEAUcpu@@E@Z DD imagerel $LN11
	DD	imagerel $LN11+328
	DD	imagerel $unwind$?rol@@YAEGPEAUcpu@@E@Z
$pdata$?ror@@YAEGPEAUcpu@@E@Z DD imagerel $LN11
	DD	imagerel $LN11+326
	DD	imagerel $unwind$?ror@@YAEGPEAUcpu@@E@Z
$pdata$?rti@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?rti@@YAEGPEAUcpu@@E@Z
$pdata$?rts@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?rts@@YAEGPEAUcpu@@E@Z
$pdata$?sbc@@YAEGPEAUcpu@@E@Z DD imagerel $LN7
	DD	imagerel $LN7+286
	DD	imagerel $unwind$?sbc@@YAEGPEAUcpu@@E@Z
$pdata$?sec@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?sec@@YAEGPEAUcpu@@E@Z
$pdata$?sed@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?sed@@YAEGPEAUcpu@@E@Z
$pdata$?sei@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?sei@@YAEGPEAUcpu@@E@Z
$pdata$?sta@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?sta@@YAEGPEAUcpu@@E@Z
$pdata$?stx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?stx@@YAEGPEAUcpu@@E@Z
$pdata$?sty@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?sty@@YAEGPEAUcpu@@E@Z
$pdata$?tax@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?tax@@YAEGPEAUcpu@@E@Z
$pdata$?tay@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?tay@@YAEGPEAUcpu@@E@Z
$pdata$?tsx@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?tsx@@YAEGPEAUcpu@@E@Z
$pdata$?txa@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?txa@@YAEGPEAUcpu@@E@Z
$pdata$?tya@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?tya@@YAEGPEAUcpu@@E@Z
$pdata$?alr@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?alr@@YAEGPEAUcpu@@E@Z
$pdata$?anc@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?anc@@YAEGPEAUcpu@@E@Z
$pdata$?arr@@YAEGPEAUcpu@@E@Z DD imagerel $LN9
	DD	imagerel $LN9+262
	DD	imagerel $unwind$?arr@@YAEGPEAUcpu@@E@Z
$pdata$?axs@@YAEGPEAUcpu@@E@Z DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$?axs@@YAEGPEAUcpu@@E@Z
$pdata$?dcp@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?dcp@@YAEGPEAUcpu@@E@Z
$pdata$?isc@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?isc@@YAEGPEAUcpu@@E@Z
$pdata$?lax@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?lax@@YAEGPEAUcpu@@E@Z
$pdata$?rla@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?rla@@YAEGPEAUcpu@@E@Z
$pdata$?rra@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?rra@@YAEGPEAUcpu@@E@Z
$pdata$?sax@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?sax@@YAEGPEAUcpu@@E@Z
$pdata$?shy@@YAEGPEAUcpu@@E@Z DD imagerel $LN4
	DD	imagerel $LN4+127
	DD	imagerel $unwind$?shy@@YAEGPEAUcpu@@E@Z
$pdata$?slo@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?slo@@YAEGPEAUcpu@@E@Z
$pdata$?sre@@YAEGPEAUcpu@@E@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?sre@@YAEGPEAUcpu@@E@Z
$pdata$?nmi_irq@@YAEGPEAUcpu@@E@Z DD imagerel ?nmi_irq@@YAEGPEAUcpu@@E@Z
	DD	imagerel ?nmi_irq@@YAEGPEAUcpu@@E@Z+211
	DD	imagerel $unwind$?nmi_irq@@YAEGPEAUcpu@@E@Z
$pdata$?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z DD imagerel ?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z
	DD	imagerel ?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z+1564
	DD	imagerel $unwind$?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z
$pdata$?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z DD imagerel ?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z
	DD	imagerel ?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z+108
	DD	imagerel $unwind$?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z
$pdata$?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z DD imagerel ?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z
	DD	imagerel ?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z+262
	DD	imagerel $unwind$?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z
$pdata$?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z DD imagerel ?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z
	DD	imagerel ?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z+165
	DD	imagerel $unwind$?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z
$pdata$?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN7
	DD	imagerel $LN7+241
	DD	imagerel $unwind$?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN37
	DD	imagerel $LN37+1147
	DD	imagerel $unwind$?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z
$pdata$?loadCartridge@@YAXPEAUnes@@PEAD@Z DD imagerel ?loadCartridge@@YAXPEAUnes@@PEAD@Z
	DD	imagerel ?loadCartridge@@YAXPEAUnes@@PEAD@Z+661
	DD	imagerel $unwind$?loadCartridge@@YAXPEAUnes@@PEAD@Z
$pdata$?power@@YAXPEAUnes@@@Z DD imagerel ?power@@YAXPEAUnes@@@Z
	DD	imagerel ?power@@YAXPEAUnes@@@Z+396
	DD	imagerel $unwind$?power@@YAXPEAUnes@@@Z
$pdata$?reset@@YAXPEAUnes@@@Z DD imagerel ?reset@@YAXPEAUnes@@@Z
	DD	imagerel ?reset@@YAXPEAUnes@@@Z+77
	DD	imagerel $unwind$?reset@@YAXPEAUnes@@@Z
pdata	ENDS
;	COMDAT __real@5f800000
CONST	SEGMENT
__real@5f800000 DD 05f800000r			; 1.84467e+19
CONST	ENDS
;	COMDAT __real@49da7a66
CONST	SEGMENT
__real@49da7a66 DD 049da7a66r			; 1.78977e+06
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?crossedPageCheck@@YAHGG@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	094011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0490H
$unwind$?getMilliSeconds@@YAM_K@Z DD 010901H
	DD	08209H
$unwind$?cpyMemory@@YAXPEAE0G@Z DD 011401H
	DD	02214H
$unwind$?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 032d19H
	DD	046011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$?LoadFile@@YAPEAXPEADPEAI@Z DD 010e01H
	DD	0c20eH
$unwind$?readPpuRegister@@YAEG@Z DD 010901H
	DD	0a209H
$unwind$?writePpuRegister@@YAXEG@Z DD 010d01H
	DD	0e20dH
$unwind$?write8@@YAXEG_K@Z DD 011201H
	DD	02212H
$unwind$?read8@@YAEG_K@Z DD 010e01H
	DD	0220eH
$unwind$?ppuMemoryMirror@@YAGG@Z DD 010901H
	DD	02209H
$unwind$?readCpu8@@YAEGPEAUcpu@@@Z DD 010e01H
	DD	0620eH
$unwind$?readCpu16@@YAGGPEAUcpu@@@Z DD 010e01H
	DD	0620eH
$unwind$?bugReadCpu16@@YAGGPEAUcpu@@@Z DD 010e01H
	DD	0620eH
$unwind$?writeCpu8@@YAXEGPEAUcpu@@@Z DD 011201H
	DD	06212H
$unwind$?readPpu8@@YAEGPEAUppu@@@Z DD 010e01H
	DD	0620eH
$unwind$?writePpu8@@YAXEGPEAUppu@@@Z DD 011201H
	DD	04212H
$unwind$?drawPixel@@YAXPEAUppu@@GGPEAE@Z DD 011901H
	DD	02219H
$unwind$?scrollIncVert@@YAXPEAUvram_io@@@Z DD 010901H
	DD	02209H
$unwind$?loadFutureData@@YAXPEAUppu@@@Z DD 010901H
	DD	06209H
$unwind$?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z DD 010901H
	DD	02209H
$unwind$?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z DD 011401H
	DD	02214H
$unwind$?spriteEvaluation@@YAXPEAUppu@@@Z DD 010901H
	DD	0a209H
$unwind$?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z DD 031201H
	DD	0140112H
	DD	0700bH
$unwind$?push@@YAXEPEAUcpu@@@Z DD 010d01H
	DD	0420dH
$unwind$?pop@@YAEPEAUcpu@@@Z DD 010901H
	DD	06209H
$unwind$?adc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?AND@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?asl@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bcc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bcs@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?beq@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bit@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bmi@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bne@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bpl@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?brk@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bvc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?bvs@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?clc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?cld@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?cli@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?clv@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?cmp@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?cpx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?cpy@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?dec@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?dex@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?dey@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?eor@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?inc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?inx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?iny@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?jsr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?lda@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ldx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ldy@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?lsr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ora@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?pha@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?php@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?pla@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?plp@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?rol@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?ror@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?rti@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?rts@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?sbc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?sec@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sed@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sei@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sta@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?stx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sty@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tax@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tay@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tsx@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?txa@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?tya@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?alr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?anc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?arr@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?axs@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?dcp@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?isc@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?lax@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?rla@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?rra@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sax@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?shy@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?slo@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?sre@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	04213H
$unwind$?nmi_irq@@YAEGPEAUcpu@@E@Z DD 011301H
	DD	06213H
$unwind$?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z DD 042519H
	DD	01f0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z DD 012219H
	DD	08213H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z DD 011401H
	DD	06214H
$unwind$?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z DD 011a01H
	DD	0e21aH
$unwind$?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	08213H
$unwind$?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	08213H
$unwind$?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	08213H
$unwind$?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	0e213H
$unwind$?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z DD 011301H
	DD	06213H
$unwind$?loadCartridge@@YAXPEAUnes@@PEAD@Z DD 010e01H
	DD	0a20eH
$unwind$?power@@YAXPEAUnes@@@Z DD 042019H
	DD	051010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0270H
$unwind$?reset@@YAXPEAUnes@@@Z DD 010901H
	DD	04209H
xdata	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Nes$ = 48
?reset@@YAXPEAUnes@@@Z PROC				; reset

; 669  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 670  :     Nes->Cpu.PrgCounter = readCpu16(RESET_VEC, &Nes->Cpu);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR Nes$[rsp]
  0000e	48 8b d0	 mov	 rdx, rax
  00011	66 b9 fc ff	 mov	 cx, 65532		; 0000fffcH
  00015	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Nes$[rsp]
  0001f	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 671  : 
; 672  :     // NOTE: The status after reset was taken from nesdev
; 673  :     Nes->Cpu.StackPtr -= 3;

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR Nes$[rsp]
  00028	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0002c	83 e8 03	 sub	 eax, 3
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR Nes$[rsp]
  00034	88 41 04	 mov	 BYTE PTR [rcx+4], al

; 674  :     setInterrupt(&Nes->Cpu.Flags);

  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR Nes$[rsp]
  0003c	48 83 c0 03	 add	 rax, 3
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 675  : 
; 676  :     /*
; 677  :     PpuReg->Ctrl1 = 0;
; 678  :     PpuReg->Ctrl2 = 0;
; 679  :     PpuReg->ScrollAddress = 0;
; 680  :     PpuReg->VRamAddress = 0;
; 681  : 
; 682  :     vram_io *PpuIO = &Nes->Ppu.VRamIO;
; 683  :     PpuIO->TempVRamAdrs = 0;
; 684  :     PpuIO->LatchWrite = 0;
; 685  :     PpuIO->FineX = 0;
; 686  :     */
; 687  :     }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
?reset@@YAXPEAUnes@@@Z ENDP				; reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
tv65 = 32
tv77 = 36
MemoryBase$1 = 40
BasePixel$2 = 48
$T3 = 64
$T4 = 176
__$ArrayPad$ = 624
Nes$ = 672
?power@@YAXPEAUnes@@@Z PROC				; power

; 645  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 646  :     PowerOn = !PowerOn;

  00020	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  00027	75 0a		 jne	 SHORT $LN5@power
  00029	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv65[rsp], 1
  00031	eb 08		 jmp	 SHORT $LN6@power
$LN5@power:
  00033	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv65[rsp], 0
$LN6@power:
  0003b	8b 44 24 20	 mov	 eax, DWORD PTR tv65[rsp]
  0003f	89 05 00 00 00
	00		 mov	 DWORD PTR ?PowerOn@@3HA, eax

; 647  : 
; 648  :     if(PowerOn)

  00045	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  0004c	74 64		 je	 SHORT $LN2@power

; 649  :     {
; 650  :         loadCartridge(Nes, RomFileName);

  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?RomFileName@@3PADA
  00055	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR Nes$[rsp]
  0005d	e8 00 00 00 00	 call	 ?loadCartridge@@YAXPEAUnes@@PEAD@Z ; loadCartridge

; 651  :         Nes->Cpu.PrgCounter = (read8(RESET_VEC+1, Nes->Cpu.MemoryBase) << 8) | read8(RESET_VEC, Nes->Cpu.MemoryBase);

  00062	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  0006a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0006e	66 b9 fd ff	 mov	 cx, 65533		; 0000fffdH
  00072	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00077	0f b6 c0	 movzx	 eax, al
  0007a	c1 e0 08	 shl	 eax, 8
  0007d	89 44 24 24	 mov	 DWORD PTR tv77[rsp], eax
  00081	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR Nes$[rsp]
  00089	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  0008d	66 b9 fc ff	 mov	 cx, 65532		; 0000fffcH
  00091	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00096	0f b6 c0	 movzx	 eax, al
  00099	8b 4c 24 24	 mov	 ecx, DWORD PTR tv77[rsp]
  0009d	0b c8		 or	 ecx, eax
  0009f	8b c1		 mov	 eax, ecx
  000a1	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR Nes$[rsp]
  000a9	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 652  :     }
; 653  :     else

  000ad	e9 c0 00 00 00	 jmp	 $LN3@power
$LN2@power:

; 654  :     {
; 655  :         uint64 MemoryBase = Nes->Cpu.MemoryBase;

  000b2	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  000ba	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000be	48 89 44 24 28	 mov	 QWORD PTR MemoryBase$1[rsp], rax

; 656  :         Nes->Cpu = {};

  000c3	48 8d 44 24 40	 lea	 rax, QWORD PTR $T3[rsp]
  000c8	48 8b f8	 mov	 rdi, rax
  000cb	33 c0		 xor	 eax, eax
  000cd	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  000d2	f3 aa		 rep stosb
  000d4	48 8d 44 24 40	 lea	 rax, QWORD PTR $T3[rsp]
  000d9	48 8b bc 24 a0
	02 00 00	 mov	 rdi, QWORD PTR Nes$[rsp]
  000e1	48 8b f0	 mov	 rsi, rax
  000e4	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  000e9	f3 a4		 rep movsb

; 657  :         Nes->Cpu.MemoryBase = MemoryBase;

  000eb	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  000f3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR MemoryBase$1[rsp]
  000f8	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 658  : 
; 659  :         MemoryBase = Nes->Ppu.MemoryBase;

  000fc	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  00104	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00108	48 89 44 24 28	 mov	 QWORD PTR MemoryBase$1[rsp], rax

; 660  :         uint32 *BasePixel = Nes->Ppu.BasePixel;

  0010d	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  00115	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00119	48 89 44 24 30	 mov	 QWORD PTR BasePixel$2[rsp], rax

; 661  :         Nes->Ppu = {};

  0011e	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  00126	48 8b f8	 mov	 rdi, rax
  00129	33 c0		 xor	 eax, eax
  0012b	b9 c0 01 00 00	 mov	 ecx, 448		; 000001c0H
  00130	f3 aa		 rep stosb
  00132	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  0013a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  00142	48 8d 78 68	 lea	 rdi, QWORD PTR [rax+104]
  00146	48 8b f1	 mov	 rsi, rcx
  00149	b9 c0 01 00 00	 mov	 ecx, 448		; 000001c0H
  0014e	f3 a4		 rep movsb

; 662  :         Nes->Ppu.MemoryBase = MemoryBase;

  00150	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  00158	48 8b 4c 24 28	 mov	 rcx, QWORD PTR MemoryBase$1[rsp]
  0015d	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 663  :         Nes->Ppu.BasePixel = BasePixel;

  00161	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR Nes$[rsp]
  00169	48 8b 4c 24 30	 mov	 rcx, QWORD PTR BasePixel$2[rsp]
  0016e	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN3@power:

; 664  :     }
; 665  : }

  00172	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017a	48 33 cc	 xor	 rcx, rsp
  0017d	e8 00 00 00 00	 call	 __security_check_cookie
  00182	48 81 c4 88 02
	00 00		 add	 rsp, 648		; 00000288H
  00189	5f		 pop	 rdi
  0018a	5e		 pop	 rsi
  0018b	c3		 ret	 0
?power@@YAXPEAUnes@@@Z ENDP				; power
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Flags6$1 = 32
Flags7$2 = 33
Cartridge$ = 40
RomData$3 = 48
Ppu$ = 56
Cpu$ = 64
tv182 = 72
Nes$ = 96
FileName$ = 104
?loadCartridge@@YAXPEAUnes@@PEAD@Z PROC			; loadCartridge

; 585  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 586  :     cartridge *Cartridge = &Nes->Cartridge;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR Nes$[rsp]
  00013	48 05 28 02 00
	00		 add	 rax, 552		; 00000228H
  00019	48 89 44 24 28	 mov	 QWORD PTR Cartridge$[rsp], rax

; 587  :     cpu *Cpu = &Nes->Cpu;

  0001e	48 8b 44 24 60	 mov	 rax, QWORD PTR Nes$[rsp]
  00023	48 89 44 24 40	 mov	 QWORD PTR Cpu$[rsp], rax

; 588  :     ppu *Ppu = &Nes->Ppu;

  00028	48 8b 44 24 60	 mov	 rax, QWORD PTR Nes$[rsp]
  0002d	48 83 c0 68	 add	 rax, 104		; 00000068H
  00031	48 89 44 24 38	 mov	 QWORD PTR Ppu$[rsp], rax

; 589  :         
; 590  :     // Reading rom file
; 591  :     Cartridge->FileName = FileName;

  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR FileName$[rsp]
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 592  :     Cartridge->FileSize;
; 593  :     Cartridge->Data = (uint8 *)LoadFile(FileName, &Cartridge->FileSize);

  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00048	48 83 c0 08	 add	 rax, 8
  0004c	48 8b d0	 mov	 rdx, rax
  0004f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR FileName$[rsp]
  00054	e8 00 00 00 00	 call	 ?LoadFile@@YAPEAXPEADPEAI@Z ; LoadFile
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0005e	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 594  : 
; 595  :     if(Cartridge->FileSize == 0)

  00062	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00067	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0006b	75 14		 jne	 SHORT $LN2@loadCartri

; 596  :     {
; 597  :         PowerOn = false;

  0006d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PowerOn@@3HA, 0

; 598  :         return;

  00077	e9 14 02 00 00	 jmp	 $LN1@loadCartri

; 599  :     }
; 600  :     else

  0007c	e9 0f 02 00 00	 jmp	 $LN3@loadCartri
$LN2@loadCartri:

; 601  :     {
; 602  :         PowerOn = true;

  00081	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PowerOn@@3HA, 1

; 603  :     
; 604  :         uint8 * RomData = Cartridge->Data;

  0008b	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00090	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00094	48 89 44 24 30	 mov	 QWORD PTR RomData$3[rsp], rax

; 605  :         
; 606  :         // NOTE: Check for correct header
; 607  :         if(RomData[0] != 'N' || RomData[1] != 'E' || RomData[2] != 'S' || RomData[3] != 0x1A)

  00099	b8 01 00 00 00	 mov	 eax, 1
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000a7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ab	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  000ae	75 45		 jne	 SHORT $LN5@loadCartri
  000b0	b8 01 00 00 00	 mov	 eax, 1
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000be	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000c2	83 f8 45	 cmp	 eax, 69			; 00000045H
  000c5	75 2e		 jne	 SHORT $LN5@loadCartri
  000c7	b8 01 00 00 00	 mov	 eax, 1
  000cc	48 6b c0 02	 imul	 rax, rax, 2
  000d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000d5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d9	83 f8 53	 cmp	 eax, 83			; 00000053H
  000dc	75 17		 jne	 SHORT $LN5@loadCartri
  000de	b8 01 00 00 00	 mov	 eax, 1
  000e3	48 6b c0 03	 imul	 rax, rax, 3
  000e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  000ec	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f0	83 f8 1a	 cmp	 eax, 26
  000f3	74 12		 je	 SHORT $LN4@loadCartri
$LN5@loadCartri:

; 608  :             Assert(0);   

  000f5	33 c0		 xor	 eax, eax
  000f7	83 f8 01	 cmp	 eax, 1
  000fa	74 0b		 je	 SHORT $LN6@loadCartri
  000fc	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN6@loadCartri:
$LN4@loadCartri:

; 609  : 
; 610  :         // NOTE: Read header
; 611  :         Cartridge->PrgBankCount = RomData[4];

  00107	b8 01 00 00 00	 mov	 eax, 1
  0010c	48 6b c0 04	 imul	 rax, rax, 4
  00110	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00115	48 8b 54 24 30	 mov	 rdx, QWORD PTR RomData$3[rsp]
  0011a	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0011e	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 612  :         Cartridge->ChrBankCount = RomData[5];

  00121	b8 01 00 00 00	 mov	 eax, 1
  00126	48 6b c0 05	 imul	 rax, rax, 5
  0012a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0012f	48 8b 54 24 30	 mov	 rdx, QWORD PTR RomData$3[rsp]
  00134	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00138	88 41 28	 mov	 BYTE PTR [rcx+40], al

; 613  :         uint8 Flags6            = RomData[6];        

  0013b	b8 01 00 00 00	 mov	 eax, 1
  00140	48 6b c0 06	 imul	 rax, rax, 6
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  00149	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0014d	88 44 24 20	 mov	 BYTE PTR Flags6$1[rsp], al

; 614  :         uint8 Flags7            = RomData[7];

  00151	b8 01 00 00 00	 mov	 eax, 1
  00156	48 6b c0 07	 imul	 rax, rax, 7
  0015a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR RomData$3[rsp]
  0015f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00163	88 44 24 21	 mov	 BYTE PTR Flags7$2[rsp], al

; 615  :         Cartridge->PrgRamSize   = RomData[8];

  00167	b8 01 00 00 00	 mov	 eax, 1
  0016c	48 6b c0 08	 imul	 rax, rax, 8
  00170	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00175	48 8b 54 24 30	 mov	 rdx, QWORD PTR RomData$3[rsp]
  0017a	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0017e	88 41 38	 mov	 BYTE PTR [rcx+56], al

; 616  :         
; 617  :         Cartridge->UseVertMirror       = Flags6 & (1);

  00181	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  00186	83 e0 01	 and	 eax, 1
  00189	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0018e	89 41 3c	 mov	 DWORD PTR [rcx+60], eax

; 618  :         Cartridge->HasBatteryRam       = Flags6 & (1 << 1);

  00191	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  00196	83 e0 02	 and	 eax, 2
  00199	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0019e	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 619  :         Cartridge->HasTrainer          = Flags6 & (1 << 2);

  001a1	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  001a6	83 e0 04	 and	 eax, 4
  001a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  001ae	89 41 44	 mov	 DWORD PTR [rcx+68], eax

; 620  :         Cartridge->UseFourScreenMirror = Flags6 & (1 << 3);

  001b1	0f b6 44 24 20	 movzx	 eax, BYTE PTR Flags6$1[rsp]
  001b6	83 e0 08	 and	 eax, 8
  001b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  001be	89 41 48	 mov	 DWORD PTR [rcx+72], eax

; 621  :         Cartridge->MapperNum           = (Flags7 & 0xF0) | (Flags6 >> 4);

  001c1	0f b6 44 24 21	 movzx	 eax, BYTE PTR Flags7$2[rsp]
  001c6	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  001cb	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Flags6$1[rsp]
  001d0	c1 f9 04	 sar	 ecx, 4
  001d3	0b c1		 or	 eax, ecx
  001d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  001da	88 41 39	 mov	 BYTE PTR [rcx+57], al

; 622  : 
; 623  :         if(Cartridge->UseFourScreenMirror)

  001dd	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  001e2	83 78 48 00	 cmp	 DWORD PTR [rax+72], 0
  001e6	74 09		 je	 SHORT $LN7@loadCartri

; 624  :             GlobalMirrorType = FOUR_SCREEN_MIRROR;

  001e8	c6 05 00 00 00
	00 03		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 3
  001ef	eb 1b		 jmp	 SHORT $LN8@loadCartri
$LN7@loadCartri:

; 625  :         else if(Cartridge->UseVertMirror)

  001f1	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  001f6	83 78 3c 00	 cmp	 DWORD PTR [rax+60], 0
  001fa	74 09		 je	 SHORT $LN9@loadCartri

; 626  :             GlobalMirrorType = VERTICAL_MIRROR;

  001fc	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 1

; 627  :         else

  00203	eb 07		 jmp	 SHORT $LN10@loadCartri
$LN9@loadCartri:

; 628  :             GlobalMirrorType = HORIZONTAL_MIRROR;      

  00205	c6 05 00 00 00
	00 02		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 2
$LN10@loadCartri:
$LN8@loadCartri:

; 629  :         
; 630  :         Cartridge->PrgData = RomData + 16; // PrgData starts after the header info(16 bytes)

  0020c	48 8b 44 24 30	 mov	 rax, QWORD PTR RomData$3[rsp]
  00211	48 83 c0 10	 add	 rax, 16
  00215	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0021a	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 631  : 
; 632  :         if(Cartridge->HasTrainer)

  0021e	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00223	83 78 44 00	 cmp	 DWORD PTR [rax+68], 0
  00227	74 18		 je	 SHORT $LN11@loadCartri

; 633  :         {
; 634  :             Cartridge->PrgData += 512; // Trainer size 512 bytes

  00229	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0022e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00232	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  00238	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0023d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN11@loadCartri:

; 635  :         }
; 636  : 
; 637  :         Cartridge->ChrData = Cartridge->PrgData + (Cartridge->PrgBankCount * Kilobytes(16));

  00241	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00246	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0024a	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00251	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00256	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0025a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0025f	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 638  : 
; 639  :         mapperInit[Cartridge->MapperNum](Cartridge, Cpu, Ppu);

  00263	48 8b 44 24 28	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00268	0f b6 40 39	 movzx	 eax, BYTE PTR [rax+57]
  0026c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mapperInit@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperInit
  00273	48 89 4c 24 48	 mov	 QWORD PTR tv182[rsp], rcx
  00278	4c 8b 44 24 38	 mov	 r8, QWORD PTR Ppu$[rsp]
  0027d	48 8b 54 24 40	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00282	48 8b 4c 24 28	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00287	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tv182[rsp]
  0028c	41 ff 14 c1	 call	 QWORD PTR [r9+rax*8]
$LN3@loadCartri:
$LN1@loadCartri:

; 640  :     }
; 641  : }

  00290	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00294	c3		 ret	 0
?loadCartridge@@YAXPEAUnes@@PEAD@Z ENDP			; loadCartridge
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
BankNumber$ = 32
MemPrgBank1$ = 36
BankToCpy$ = 40
Cartridge$ = 64
Cpu$ = 72
Ppu$ = 80
?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC ; unromUpdate

; 571  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 572  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 24	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 573  :     uint8 BankNumber = Cpu->MapperReg;

  0001d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  00026	88 44 24 20	 mov	 BYTE PTR BankNumber$[rsp], al

; 574  :     
; 575  :     uint8 * BankToCpy = Cartridge->PrgData + (BankNumber * Kilobytes(16));

  0002a	0f b6 44 24 20	 movzx	 eax, BYTE PTR BankNumber$[rsp]
  0002f	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0003b	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  0003f	48 89 44 24 28	 mov	 QWORD PTR BankToCpy$[rsp], rax

; 576  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy, Kilobytes(16));

  00044	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  00049	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0004e	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00052	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  00057	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy$[rsp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 577  : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
?unromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP ; unromUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
DataReg$1 = 32
Mirror$2 = 33
SizeToCpy$3 = 34
bit13Set$4 = 36
bit14Set$5 = 40
tv67 = 44
tv71 = 48
tv79 = 52
tv140 = 56
tv145 = 60
BankToCpy$6 = 64
PrgRomBank1$ = 72
PrgRomBank2$ = 76
IsClearBitSet$7 = 80
IsLargePrg$ = 84
IsLargeChr$ = 88
BankToCpy$8 = 96
BankToCpy$9 = 104
Cartridge$ = 128
Cpu$ = 136
Ppu$ = 144
?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC ; mmc1Update

; 465  : {

$LN37:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 466  :     uint16 PrgRomBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 48	 mov	 WORD PTR PrgRomBank1$[rsp], ax

; 467  :     uint16 PrgRomBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 4c	 mov	 WORD PTR PrgRomBank2$[rsp], ax

; 468  : 
; 469  :     bool32 IsLargePrg = (Cartridge->PrgBankCount > 16);

  00027	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002f	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00033	83 f8 10	 cmp	 eax, 16
  00036	7e 0a		 jle	 SHORT $LN27@mmc1Update
  00038	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00040	eb 08		 jmp	 SHORT $LN28@mmc1Update
$LN27@mmc1Update:
  00042	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN28@mmc1Update:
  0004a	8b 44 24 2c	 mov	 eax, DWORD PTR tv67[rsp]
  0004e	89 44 24 54	 mov	 DWORD PTR IsLargePrg$[rsp], eax

; 470  :     bool32 IsLargeChr = (Cartridge->ChrBankCount > 1);

  00052	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0005a	0f b6 40 28	 movzx	 eax, BYTE PTR [rax+40]
  0005e	83 f8 01	 cmp	 eax, 1
  00061	7e 0a		 jle	 SHORT $LN29@mmc1Update
  00063	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0006b	eb 08		 jmp	 SHORT $LN30@mmc1Update
$LN29@mmc1Update:
  0006d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN30@mmc1Update:
  00075	8b 44 24 30	 mov	 eax, DWORD PTR tv71[rsp]
  00079	89 44 24 58	 mov	 DWORD PTR IsLargeChr$[rsp], eax

; 471  : 
; 472  :     // TODO: Figure a way to deal with these static values
; 473  :     static uint8 PrgRomMode;
; 474  :     static uint8 ChrRomMode;
; 475  :     
; 476  :     if(Cpu->MapperWrite)

  0007d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00085	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  00089	0f 84 e7 03 00
	00		 je	 $LN2@mmc1Update

; 477  :     {
; 478  :         Cpu->MapperWrite = false;

  0008f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00097	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 479  :         
; 480  :         bool32 IsClearBitSet = (Cpu->MapperReg & (1 << 7)) != 0;

  0009e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  000a6	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  000aa	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000af	85 c0		 test	 eax, eax
  000b1	74 0a		 je	 SHORT $LN31@mmc1Update
  000b3	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  000bb	eb 08		 jmp	 SHORT $LN32@mmc1Update
$LN31@mmc1Update:
  000bd	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN32@mmc1Update:
  000c5	8b 44 24 34	 mov	 eax, DWORD PTR tv79[rsp]
  000c9	89 44 24 50	 mov	 DWORD PTR IsClearBitSet$7[rsp], eax

; 481  :         if(IsClearBitSet)

  000cd	83 7c 24 50 00	 cmp	 DWORD PTR IsClearBitSet$7[rsp], 0
  000d2	74 29		 je	 SHORT $LN3@mmc1Update

; 482  :         {
; 483  :             Cpu->MapperWriteCount = 0;

  000d4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  000dc	c6 40 18 00	 mov	 BYTE PTR [rax+24], 0

; 484  :             Cpu->MapperReg = 0;

  000e0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e8	c6 40 10 00	 mov	 BYTE PTR [rax+16], 0

; 485  :             Cartridge->MapperInternalReg = 0;

  000ec	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  000f4	c6 40 4c 00	 mov	 BYTE PTR [rax+76], 0

; 486  :         }
; 487  :         else

  000f8	e9 79 03 00 00	 jmp	 $LN4@mmc1Update
$LN3@mmc1Update:

; 488  :         {
; 489  :             ++Cpu->MapperWriteCount;

  000fd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00105	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00109	fe c0		 inc	 al
  0010b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00113	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 490  :             
; 491  :             Cartridge->MapperInternalReg = (Cartridge->MapperInternalReg << 1);

  00116	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0011e	0f b6 40 4c	 movzx	 eax, BYTE PTR [rax+76]
  00122	d1 e0		 shl	 eax, 1
  00124	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0012c	88 41 4c	 mov	 BYTE PTR [rcx+76], al

; 492  :             Cartridge->MapperInternalReg |= (Cpu->MapperReg & 1);

  0012f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00137	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  0013b	83 e0 01	 and	 eax, 1
  0013e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00146	0f b6 49 4c	 movzx	 ecx, BYTE PTR [rcx+76]
  0014a	0b c8		 or	 ecx, eax
  0014c	8b c1		 mov	 eax, ecx
  0014e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00156	88 41 4c	 mov	 BYTE PTR [rcx+76], al

; 493  :             
; 494  :             if(Cpu->MapperWriteCount == 5) // On 5th write

  00159	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00161	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00165	83 f8 05	 cmp	 eax, 5
  00168	0f 85 08 03 00
	00		 jne	 $LN5@mmc1Update

; 495  :             {
; 496  :                 uint8 DataReg = Cartridge->MapperInternalReg;

  0016e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00176	0f b6 40 4c	 movzx	 eax, BYTE PTR [rax+76]
  0017a	88 44 24 20	 mov	 BYTE PTR DataReg$1[rsp], al

; 497  :                 
; 498  :                 bool32 bit13Set = (Cpu->MapperWriteAddress & (1 << 13)) != 0;

  0017e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00186	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0018a	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0018f	85 c0		 test	 eax, eax
  00191	74 0a		 je	 SHORT $LN33@mmc1Update
  00193	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  0019b	eb 08		 jmp	 SHORT $LN34@mmc1Update
$LN33@mmc1Update:
  0019d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN34@mmc1Update:
  001a5	8b 44 24 38	 mov	 eax, DWORD PTR tv140[rsp]
  001a9	89 44 24 24	 mov	 DWORD PTR bit13Set$4[rsp], eax

; 499  :                 bool32 bit14Set = (Cpu->MapperWriteAddress & (1 << 14)) != 0;

  001ad	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  001b5	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  001b9	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  001be	85 c0		 test	 eax, eax
  001c0	74 0a		 je	 SHORT $LN35@mmc1Update
  001c2	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv145[rsp], 1
  001ca	eb 08		 jmp	 SHORT $LN36@mmc1Update
$LN35@mmc1Update:
  001cc	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
$LN36@mmc1Update:
  001d4	8b 44 24 3c	 mov	 eax, DWORD PTR tv145[rsp]
  001d8	89 44 24 28	 mov	 DWORD PTR bit14Set$5[rsp], eax

; 500  : 
; 501  :                 if(!bit13Set && !bit14Set)     // Control Reg

  001dc	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  001e1	75 7d		 jne	 SHORT $LN6@mmc1Update
  001e3	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  001e8	75 76		 jne	 SHORT $LN6@mmc1Update

; 502  :                 {
; 503  :                     uint8 Mirror = DataReg & 3;

  001ea	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  001ef	83 e0 03	 and	 eax, 3
  001f2	88 44 24 21	 mov	 BYTE PTR Mirror$2[rsp], al

; 504  :                     if(Mirror == 0)

  001f6	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  001fb	85 c0		 test	 eax, eax
  001fd	75 07		 jne	 SHORT $LN8@mmc1Update

; 505  :                         GlobalMirrorType = SINGLE_SCREEN_MIRROR;

  001ff	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 0
$LN8@mmc1Update:

; 506  :                     if(Mirror == 1)

  00206	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  0020b	83 f8 01	 cmp	 eax, 1
  0020e	75 07		 jne	 SHORT $LN9@mmc1Update

; 507  :                         GlobalMirrorType = SINGLE_SCREEN_MIRROR;

  00210	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 0
$LN9@mmc1Update:

; 508  :                     if(Mirror == 2)

  00217	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  0021c	83 f8 02	 cmp	 eax, 2
  0021f	75 07		 jne	 SHORT $LN10@mmc1Update

; 509  :                         GlobalMirrorType = VERTICAL_MIRROR;

  00221	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 1
$LN10@mmc1Update:

; 510  :                     if(Mirror == 3)

  00228	0f b6 44 24 21	 movzx	 eax, BYTE PTR Mirror$2[rsp]
  0022d	83 f8 03	 cmp	 eax, 3
  00230	75 07		 jne	 SHORT $LN11@mmc1Update

; 511  :                         GlobalMirrorType = HORIZONTAL_MIRROR;

  00232	c6 05 00 00 00
	00 02		 mov	 BYTE PTR ?GlobalMirrorType@@3EA, 2
$LN11@mmc1Update:

; 512  :                                         
; 513  :                     PrgRomMode = (DataReg & 12) >> 2;

  00239	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0023e	83 e0 0c	 and	 eax, 12
  00241	c1 f8 02	 sar	 eax, 2
  00244	88 05 00 00 00
	00		 mov	 BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA, al

; 514  :                     ChrRomMode = (DataReg & (1 << 4)) >> 4;

  0024a	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0024f	83 e0 10	 and	 eax, 16
  00252	c1 f8 04	 sar	 eax, 4
  00255	88 05 00 00 00
	00		 mov	 BYTE PTR ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA, al
  0025b	e9 f2 01 00 00	 jmp	 $LN7@mmc1Update
$LN6@mmc1Update:

; 515  :                 }
; 516  :                 else if(bit13Set && !bit14Set) // CHR Bank 0

  00260	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  00265	74 72		 je	 SHORT $LN12@mmc1Update
  00267	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  0026c	75 6b		 jne	 SHORT $LN12@mmc1Update

; 517  :                 {
; 518  :                     uint8 SizeToCpy = 0;

  0026e	c6 44 24 22 00	 mov	 BYTE PTR SizeToCpy$3[rsp], 0

; 519  :                     
; 520  :                     if(ChrRomMode == 1) // 8kb mode Low bit ignored

  00273	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	75 12		 jne	 SHORT $LN14@mmc1Update

; 521  :                     {
; 522  :                         DataReg = DataReg >> 1;

  0027f	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  00284	d1 f8		 sar	 eax, 1
  00286	88 44 24 20	 mov	 BYTE PTR DataReg$1[rsp], al

; 523  :                         SizeToCpy = Kilobytes(8);

  0028a	c6 44 24 22 00	 mov	 BYTE PTR SizeToCpy$3[rsp], 0

; 524  :                     }
; 525  :                     else

  0028f	eb 05		 jmp	 SHORT $LN15@mmc1Update
$LN14@mmc1Update:

; 526  :                     {
; 527  :                         SizeToCpy = Kilobytes(4);

  00291	c6 44 24 22 00	 mov	 BYTE PTR SizeToCpy$3[rsp], 0
$LN15@mmc1Update:

; 528  :                     }
; 529  :                     uint8 * BankToCpy = Cartridge->ChrData + (DataReg * SizeToCpy);              

  00296	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0029b	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR SizeToCpy$3[rsp]
  002a0	0f af c1	 imul	 eax, ecx
  002a3	48 98		 cdqe
  002a5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  002ad	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  002b1	48 89 44 24 60	 mov	 QWORD PTR BankToCpy$8[rsp], rax

; 530  :                     cpyMemory((uint8 *)Ppu->MemoryBase, BankToCpy, SizeToCpy);

  002b6	0f b6 44 24 22	 movzx	 eax, BYTE PTR SizeToCpy$3[rsp]
  002bb	44 0f b7 c0	 movzx	 r8d, ax
  002bf	48 8b 54 24 60	 mov	 rdx, QWORD PTR BankToCpy$8[rsp]
  002c4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  002cc	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002cf	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
  002d4	e9 79 01 00 00	 jmp	 $LN13@mmc1Update
$LN12@mmc1Update:

; 531  :                 }
; 532  :                 else if(!bit13Set && bit14Set) // CHR Bank 1

  002d9	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  002de	75 58		 jne	 SHORT $LN16@mmc1Update
  002e0	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  002e5	74 51		 je	 SHORT $LN16@mmc1Update

; 533  :                 {
; 534  :                     if(ChrRomMode == 1) // 4kb mode

  002e7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ChrRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  002ee	83 f8 01	 cmp	 eax, 1
  002f1	75 40		 jne	 SHORT $LN18@mmc1Update

; 535  :                     {
; 536  :                         uint8 * BankToCpy = Cartridge->ChrData + (DataReg * Kilobytes(4));              

  002f3	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  002f8	48 69 c0 00 10
	00 00		 imul	 rax, rax, 4096		; 00001000H
  002ff	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00307	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  0030b	48 89 44 24 68	 mov	 QWORD PTR BankToCpy$9[rsp], rax

; 537  :                         cpyMemory((uint8 *)Ppu->MemoryBase + 0x1000, BankToCpy, Kilobytes(4));

  00310	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00318	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0031b	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00321	66 41 b8 00 10	 mov	 r8w, 4096		; 00001000H
  00326	48 8b 54 24 68	 mov	 rdx, QWORD PTR BankToCpy$9[rsp]
  0032b	48 8b c8	 mov	 rcx, rax
  0032e	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
$LN18@mmc1Update:

; 538  :                     }
; 539  :                 }

  00333	e9 1a 01 00 00	 jmp	 $LN17@mmc1Update
$LN16@mmc1Update:

; 540  :                 else if(bit13Set && bit14Set) // PRG bank

  00338	83 7c 24 24 00	 cmp	 DWORD PTR bit13Set$4[rsp], 0
  0033d	0f 84 0f 01 00
	00		 je	 $LN19@mmc1Update
  00343	83 7c 24 28 00	 cmp	 DWORD PTR bit14Set$5[rsp], 0
  00348	0f 84 04 01 00
	00		 je	 $LN19@mmc1Update

; 541  :                 {
; 542  :                     uint8 * BankToCpy;
; 543  :                     if(PrgRomMode == 0 || PrgRomMode == 1) // 32kib Mode

  0034e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  00355	85 c0		 test	 eax, eax
  00357	74 0c		 je	 SHORT $LN22@mmc1Update
  00359	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  00360	83 f8 01	 cmp	 eax, 1
  00363	75 51		 jne	 SHORT $LN20@mmc1Update
$LN22@mmc1Update:

; 544  :                     {
; 545  :                         DataReg = DataReg >> 1;

  00365	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  0036a	d1 f8		 sar	 eax, 1
  0036c	88 44 24 20	 mov	 BYTE PTR DataReg$1[rsp], al

; 546  :                         BankToCpy = Cartridge->PrgData + (DataReg * Kilobytes(32));              

  00370	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  00375	48 69 c0 00 80
	00 00		 imul	 rax, rax, 32768		; 00008000H
  0037c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00384	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00388	48 89 44 24 40	 mov	 QWORD PTR BankToCpy$6[rsp], rax

; 547  :                         cpyMemory((uint8 *)Cpu->MemoryBase + 0x8000, BankToCpy, Kilobytes(32));

  0038d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00395	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00399	48 05 00 80 00
	00		 add	 rax, 32768		; 00008000H
  0039f	66 41 b8 00 80	 mov	 r8w, 32768		; 00008000H
  003a4	48 8b 54 24 40	 mov	 rdx, QWORD PTR BankToCpy$6[rsp]
  003a9	48 8b c8	 mov	 rcx, rax
  003ac	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
  003b1	e9 9c 00 00 00	 jmp	 $LN21@mmc1Update
$LN20@mmc1Update:

; 548  :                     }
; 549  :                     else if(PrgRomMode == 2) // 16kb low bank

  003b6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  003bd	83 f8 02	 cmp	 eax, 2
  003c0	75 43		 jne	 SHORT $LN23@mmc1Update

; 550  :                     {
; 551  :                         BankToCpy = Cartridge->PrgData + (DataReg * Kilobytes(32));              

  003c2	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  003c7	48 69 c0 00 80
	00 00		 imul	 rax, rax, 32768		; 00008000H
  003ce	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  003d6	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  003da	48 89 44 24 40	 mov	 QWORD PTR BankToCpy$6[rsp], rax

; 552  :                         cpyMemory((uint8 *)Cpu->MemoryBase + 0x8000, BankToCpy, Kilobytes(16));

  003df	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  003e7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003eb	48 05 00 80 00
	00		 add	 rax, 32768		; 00008000H
  003f1	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  003f6	48 8b 54 24 40	 mov	 rdx, QWORD PTR BankToCpy$6[rsp]
  003fb	48 8b c8	 mov	 rcx, rax
  003fe	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
  00403	eb 4d		 jmp	 SHORT $LN24@mmc1Update
$LN23@mmc1Update:

; 553  :                         
; 554  :                     }
; 555  :                     else if(PrgRomMode == 3) // 16kb high bank

  00405	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PrgRomMode@?1??mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z@4EA
  0040c	83 f8 03	 cmp	 eax, 3
  0040f	75 41		 jne	 SHORT $LN25@mmc1Update

; 556  :                     {
; 557  :                         BankToCpy = Cartridge->PrgData + (DataReg * Kilobytes(32));              

  00411	0f b6 44 24 20	 movzx	 eax, BYTE PTR DataReg$1[rsp]
  00416	48 69 c0 00 80
	00 00		 imul	 rax, rax, 32768		; 00008000H
  0041d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  00425	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00429	48 89 44 24 40	 mov	 QWORD PTR BankToCpy$6[rsp], rax

; 558  :                         cpyMemory((uint8 *)Cpu->MemoryBase + 0xC000, BankToCpy, Kilobytes(16));

  0042e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00436	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0043a	48 05 00 c0 00
	00		 add	 rax, 49152		; 0000c000H
  00440	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  00445	48 8b 54 24 40	 mov	 rdx, QWORD PTR BankToCpy$6[rsp]
  0044a	48 8b c8	 mov	 rcx, rax
  0044d	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
$LN25@mmc1Update:
$LN24@mmc1Update:
$LN21@mmc1Update:
$LN19@mmc1Update:
$LN17@mmc1Update:
$LN13@mmc1Update:
$LN7@mmc1Update:

; 559  :                     }
; 560  :                 }
; 561  :                 
; 562  :                 Cpu->MapperWriteCount = 0;

  00452	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  0045a	c6 40 18 00	 mov	 BYTE PTR [rax+24], 0

; 563  :                 Cpu->MapperReg = 0;

  0045e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00466	c6 40 10 00	 mov	 BYTE PTR [rax+16], 0

; 564  :                 Cartridge->MapperInternalReg = 0;

  0046a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00472	c6 40 4c 00	 mov	 BYTE PTR [rax+76], 0
$LN5@mmc1Update:
$LN4@mmc1Update:
$LN2@mmc1Update:

; 565  :             }
; 566  :         }
; 567  :     }
; 568  : }

  00476	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0047a	c3		 ret	 0
?mmc1Update@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP ; mmc1Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Cartridge$ = 8
Cpu$ = 16
Ppu$ = 24
?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC ; nromUpdate

; 460  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 461  :     Assert(0);

  0000f	33 c0		 xor	 eax, eax
  00011	83 f8 01	 cmp	 eax, 1
  00014	74 0b		 je	 SHORT $LN2@nromUpdate
  00016	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN2@nromUpdate:

; 462  : }

  00021	c3		 ret	 0
?nromUpdate@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP ; nromUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemPrgBank1$ = 32
MemPrgBank2$ = 36
BankToCpy1$ = 40
BankToCpy2$ = 48
Cartridge$ = 80
Cpu$ = 88
Ppu$ = 96
?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC	; unromInit

; 441  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 442  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 20	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 443  :     uint16 MemPrgBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 24	 mov	 WORD PTR MemPrgBank2$[rsp], ax

; 444  : 
; 445  :     uint8 * BankToCpy1 = Cartridge->PrgData;

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00030	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 446  :     uint8 * BankToCpy2 = Cartridge->PrgData + ((Cartridge->PrgBankCount - 1) * Kilobytes(16));

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003a	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0003e	ff c8		 dec	 eax
  00040	48 98		 cdqe
  00042	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00049	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0004e	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00052	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax

; 447  :            
; 448  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy1, Kilobytes(16));

  00057	0f b7 44 24 20	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  0005c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00061	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00065	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0006a	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy1$[rsp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 449  :     cpyMemory((uint8 *)MemPrgBank2 + Cpu->MemoryBase, BankToCpy2, Kilobytes(16));

  00077	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank2$[rsp]
  0007c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00081	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00085	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0008a	48 8b 54 24 30	 mov	 rdx, QWORD PTR BankToCpy2$[rsp]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 450  : }

  00097	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009b	c3		 ret	 0
?unromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP	; unromInit
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemPrgBank1$ = 32
MemPrgBank2$ = 36
BankToCpy1$ = 40
BankToCpy2$ = 48
Cartridge$ = 80
Cpu$ = 88
Ppu$ = 96
?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC	; mmc1Init

; 429  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 430  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 20	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 431  :     uint16 MemPrgBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 24	 mov	 WORD PTR MemPrgBank2$[rsp], ax

; 432  : 
; 433  :     uint8 * BankToCpy1 = Cartridge->PrgData;

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00030	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 434  :     uint8 * BankToCpy2 = Cartridge->PrgData + ((Cartridge->PrgBankCount - 1) * Kilobytes(16));

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003a	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0003e	ff c8		 dec	 eax
  00040	48 98		 cdqe
  00042	48 69 c0 00 40
	00 00		 imul	 rax, rax, 16384		; 00004000H
  00049	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cartridge$[rsp]
  0004e	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00052	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax

; 435  :            
; 436  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy1, Kilobytes(16));

  00057	0f b7 44 24 20	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  0005c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00061	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00065	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0006a	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy1$[rsp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 437  :     cpyMemory((uint8 *)MemPrgBank2 + Cpu->MemoryBase, BankToCpy2, Kilobytes(16));

  00077	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank2$[rsp]
  0007c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00081	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00085	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  0008a	48 8b 54 24 30	 mov	 rdx, QWORD PTR BankToCpy2$[rsp]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 438  :  }

  00097	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009b	c3		 ret	 0
?mmc1Init@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP	; mmc1Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemPrgBank1$ = 32
MemPrgBank2$ = 36
BankToCpy1$ = 40
BankToCpy2$ = 48
Cartridge$ = 80
Cpu$ = 88
Ppu$ = 96
?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z PROC	; nromInit

; 400  : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 401  :     uint16 MemPrgBank1 = 0x8000;

  00013	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00018	66 89 44 24 20	 mov	 WORD PTR MemPrgBank1$[rsp], ax

; 402  :     uint16 MemPrgBank2 = 0xC000;

  0001d	b8 00 c0 00 00	 mov	 eax, 49152		; 0000c000H
  00022	66 89 44 24 24	 mov	 WORD PTR MemPrgBank2$[rsp], ax

; 403  : 
; 404  :     uint8 * BankToCpy1;
; 405  :     uint8 * BankToCpy2;
; 406  :         
; 407  :     if(Cartridge->PrgBankCount == 1)

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0002c	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00030	83 f8 01	 cmp	 eax, 1
  00033	75 1e		 jne	 SHORT $LN2@nromInit

; 408  :     {
; 409  :         BankToCpy1 = Cartridge->PrgData;

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  0003a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003e	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 410  :         BankToCpy2 = Cartridge->PrgData;

  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00048	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004c	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax
  00051	eb 30		 jmp	 SHORT $LN3@nromInit
$LN2@nromInit:

; 411  :     }
; 412  :     else if(Cartridge->PrgBankCount == 2)

  00053	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00058	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0005c	83 f8 02	 cmp	 eax, 2
  0005f	75 22		 jne	 SHORT $LN4@nromInit

; 413  :     {
; 414  :         BankToCpy1 = Cartridge->PrgData;

  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00066	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0006a	48 89 44 24 28	 mov	 QWORD PTR BankToCpy1$[rsp], rax

; 415  :         BankToCpy2 = Cartridge->PrgData + Kilobytes(16);

  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  00074	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00078	48 05 00 40 00
	00		 add	 rax, 16384		; 00004000H
  0007e	48 89 44 24 30	 mov	 QWORD PTR BankToCpy2$[rsp], rax
$LN4@nromInit:
$LN3@nromInit:

; 416  :     }
; 417  :         
; 418  :     cpyMemory((uint8 *)MemPrgBank1 + Cpu->MemoryBase, BankToCpy1, Kilobytes(16));

  00083	0f b7 44 24 20	 movzx	 eax, WORD PTR MemPrgBank1$[rsp]
  00088	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0008d	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00091	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  00096	48 8b 54 24 28	 mov	 rdx, QWORD PTR BankToCpy1$[rsp]
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 419  :     cpyMemory((uint8 *)MemPrgBank2 + Cpu->MemoryBase, BankToCpy2, Kilobytes(16));

  000a3	0f b7 44 24 24	 movzx	 eax, WORD PTR MemPrgBank2$[rsp]
  000a8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000ad	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  000b1	66 41 b8 00 40	 mov	 r8w, 16384		; 00004000H
  000b6	48 8b 54 24 30	 mov	 rdx, QWORD PTR BankToCpy2$[rsp]
  000bb	48 8b c8	 mov	 rcx, rax
  000be	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 420  : 
; 421  :     // Map CHR Data to Ppu
; 422  :     if(Cartridge->ChrBankCount == 1)

  000c3	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  000c8	0f b6 40 28	 movzx	 eax, BYTE PTR [rax+40]
  000cc	83 f8 01	 cmp	 eax, 1
  000cf	75 1b		 jne	 SHORT $LN5@nromInit

; 423  :     {
; 424  :         cpyMemory((uint8 *)Ppu->MemoryBase, Cartridge->ChrData, Kilobytes(8));

  000d1	66 41 b8 00 20	 mov	 r8w, 8192		; 00002000H
  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR Cartridge$[rsp]
  000db	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  000df	48 8b 44 24 60	 mov	 rax, QWORD PTR Ppu$[rsp]
  000e4	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000e7	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory
$LN5@nromInit:

; 425  :     }
; 426  : }

  000ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f0	c3		 ret	 0
?nromInit@@YAXPEAUcartridge@@PEAUcpu@@PEAUppu@@@Z ENDP	; nromInit
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Ppu$ = 8
MemoryBase$ = 16
BasePixel$ = 24
?initPpu@@YAXPEAUppu@@_KPEAI@Z PROC			; initPpu

; 390  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 391  :     OamData = Ppu->Oam;

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR Ppu$[rsp]
  00014	48 83 c0 60	 add	 rax, 96			; 00000060H
  00018	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?OamData@@3PEAEEA, rax

; 392  : 
; 393  :     Ppu->MemoryBase = MemoryBase;

  0001f	48 8b 44 24 08	 mov	 rax, QWORD PTR Ppu$[rsp]
  00024	48 8b 4c 24 10	 mov	 rcx, QWORD PTR MemoryBase$[rsp]
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx

; 394  :     Ppu->BasePixel = BasePixel;

  0002c	48 8b 44 24 08	 mov	 rax, QWORD PTR Ppu$[rsp]
  00031	48 8b 4c 24 18	 mov	 rcx, QWORD PTR BasePixel$[rsp]
  00036	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 395  : }

  0003a	c3		 ret	 0
?initPpu@@YAXPEAUppu@@_KPEAI@Z ENDP			; initPpu
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Cpu$ = 8
MemoryBase$ = 16
?initCpu@@YAXPEAUcpu@@_K@Z PROC				; initCpu

; 384  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 385  :     Cpu->MemoryBase = MemoryBase;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR Cpu$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR MemoryBase$[rsp]
  00014	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 386  : }

  00018	c3		 ret	 0
?initCpu@@YAXPEAUcpu@@_K@Z ENDP				; initCpu
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
BackBuffer$ = 128
DeviceContext$ = 136
WindowWidth$ = 144
WindowHeight$ = 152
?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z PROC ; drawScreenBuffer

; 372  : {                

  00000	66 44 89 4c 24
	20		 mov	 WORD PTR [rsp+32], r9w
  00006	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 373  :     StretchDIBits(DeviceContext,

  0001a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  00022	0f b7 8c 24 98
	00 00 00	 movzx	 ecx, WORD PTR WindowHeight$[rsp]
  0002a	0f b7 94 24 90
	00 00 00	 movzx	 edx, WORD PTR WindowWidth$[rsp]
  00032	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  0003a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00042	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00047	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  0004f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00053	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00058	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  00060	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00063	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00067	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR BackBuffer$[rsp]
  0006f	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00072	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00076	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0007e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00086	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0008a	44 8b ca	 mov	 r9d, edx
  0008d	45 33 c0	 xor	 r8d, r8d
  00090	33 d2		 xor	 edx, edx
  00092	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 374  :                   0, 0, WindowWidth, WindowHeight,
; 375  :                   0, 0, BackBuffer->Width, BackBuffer->Height,
; 376  :                   BackBuffer->Memory,
; 377  :                   &BackBuffer->Info,
; 378  :                   DIB_RGB_COLORS, SRCCOPY);
; 379  : }

  000a0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a4	c3		 ret	 0
?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z ENDP ; drawScreenBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z PROC	; createBackBuffer

; 348  : {

  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 349  :     if(Buffer->Memory)

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00019	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001e	74 17		 je	 SHORT $LN2@createBack

; 350  :     {
; 351  :         VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  00020	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00026	33 d2		 xor	 edx, edx
  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002d	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@createBack:

; 352  :     }
; 353  : 
; 354  :     Buffer->Width = Width;

  00037	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  0003c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00041	89 41 38	 mov	 DWORD PTR [rcx+56], eax

; 355  :     Buffer->Height = Height;

  00044	0f b7 44 24 50	 movzx	 eax, WORD PTR Height$[rsp]
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0004e	89 41 3c	 mov	 DWORD PTR [rcx+60], eax

; 356  :     Buffer->BytesPerPixel = 4; // TODO: Check if this is wrong. Should it be 3 instead? No alpha value

  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00056	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 357  : 
; 358  :     Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00062	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 359  :     Buffer->Info.bmiHeader.biWidth = Width;

  00068	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00072	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 360  :     Buffer->Info.bmiHeader.biHeight = -Height; // Negative tells windows that we raster top to bottom

  00075	0f b7 44 24 50	 movzx	 eax, WORD PTR Height$[rsp]
  0007a	f7 d8		 neg	 eax
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00081	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 361  :     Buffer->Info.bmiHeader.biPlanes = 1;

  00084	b8 01 00 00 00	 mov	 eax, 1
  00089	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0008e	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 362  :     Buffer->Info.bmiHeader.biBitCount = 32;

  00092	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00097	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009c	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 363  :     Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a0	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a5	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 364  : 
; 365  :     int MemorySize = Width * Height * Buffer->BytesPerPixel;

  000ac	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  000b1	0f b7 4c 24 50	 movzx	 ecx, WORD PTR Height$[rsp]
  000b6	0f af c1	 imul	 eax, ecx
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000be	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c2	89 44 24 20	 mov	 DWORD PTR MemorySize$[rsp], eax

; 366  :     Buffer->Memory = VirtualAlloc(0, MemorySize, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE); 

  000c6	48 63 44 24 20	 movsxd	 rax, DWORD PTR MemorySize$[rsp]
  000cb	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d1	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000d7	48 8b d0	 mov	 rdx, rax
  000da	33 c9		 xor	 ecx, ecx
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000e7	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 367  :     Buffer->Pitch = Width * Buffer->BytesPerPixel;

  000eb	0f b7 44 24 48	 movzx	 eax, WORD PTR Width$[rsp]
  000f0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000f5	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000fe	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 368  : }

  00101	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00105	c3		 ret	 0
?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z ENDP	; createBackBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
ClientRect$ = 32
__$ArrayPad$ = 48
Window$ = 80
Width$ = 88
Height$ = 96
?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z PROC		; getWindowSize

; 340  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 341  :     RECT ClientRect;
; 342  :     GetClientRect(Window, &ClientRect);

  00022	48 8d 54 24 20	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 343  :     *Width = ClientRect.right - ClientRect.left;

  00032	8b 44 24 20	 mov	 eax, DWORD PTR ClientRect$[rsp]
  00036	8b 4c 24 28	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  0003a	2b c8		 sub	 ecx, eax
  0003c	8b c1		 mov	 eax, ecx
  0003e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR Width$[rsp]
  00043	66 89 01	 mov	 WORD PTR [rcx], ax

; 344  :     *Height = ClientRect.bottom - ClientRect.top;

  00046	8b 44 24 24	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0004a	8b 4c 24 2c	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  0004e	2b c8		 sub	 ecx, eax
  00050	8b c1		 mov	 eax, ecx
  00052	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Height$[rsp]
  00057	66 89 01	 mov	 WORD PTR [rcx], ax

; 345  : }

  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0005f	48 33 cc	 xor	 rcx, rsp
  00062	e8 00 00 00 00	 call	 __security_check_cookie
  00067	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006b	c3		 ret	 0
?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z ENDP		; getWindowSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
Address$ = 32
CyclesElapsed$ = 36
Instruction$ = 37
idx$1 = 38
AddressMode$ = 39
InstrData$ = 40
InstrLength$ = 44
InstrCycles$ = 45
RelOffset$2 = 46
ZeroAddress$3 = 47
AddedAddress$4 = 48
ZeroAddress$5 = 49
AdditionalCycles$6 = 50
i$7 = 52
CrossedPage$ = 56
IndirectAddress$8 = 60
tv155 = 64
$T9 = 72
$T10 = 80
InstrName$ = 88
tv316 = 96
LogCpu$ = 112
__$ArrayPad$ = 224
Cpu$ = 272
NewInput$ = 280
?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z PROC		; cpuTick

; 202  : {        

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 203  :     uint8 CyclesElapsed = 0;

  00025	c6 44 24 24 00	 mov	 BYTE PTR CyclesElapsed$[rsp], 0

; 204  : 
; 205  :     uint16 Address = 0;

  0002a	33 c0		 xor	 eax, eax
  0002c	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 206  :     bool32 CrossedPage = 0;

  00031	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR CrossedPage$[rsp], 0

; 207  :     
; 208  :     uint8 Instruction;
; 209  :     uint8 AddressMode;
; 210  :     uint8 InstrLength;
; 211  :     char *InstrName;
; 212  :     uint8 InstrCycles;
; 213  :     uint8 InstrData[3]; // Stores data for each instruction
; 214  : 
; 215  :     // NOTE: Logging: Save Cpu before changes. Print out later
; 216  :     cpu LogCpu = *Cpu;

  00039	48 8d 44 24 70	 lea	 rax, QWORD PTR LogCpu$[rsp]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	48 8b b4 24 10
	01 00 00	 mov	 rsi, QWORD PTR Cpu$[rsp]
  00049	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  0004e	f3 a4		 rep movsb

; 217  : 
; 218  :     if(Cpu->PadStrobe)

  00050	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00058	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  0005c	74 3f		 je	 SHORT $LN10@cpuTick

; 219  :     {
; 220  :         for(uint8 idx = 0; idx < input::BUTTON_NUM; ++idx)

  0005e	c6 44 24 26 00	 mov	 BYTE PTR idx$1[rsp], 0
  00063	eb 0b		 jmp	 SHORT $LN4@cpuTick
$LN2@cpuTick:
  00065	0f b6 44 24 26	 movzx	 eax, BYTE PTR idx$1[rsp]
  0006a	fe c0		 inc	 al
  0006c	88 44 24 26	 mov	 BYTE PTR idx$1[rsp], al
$LN4@cpuTick:
  00070	0f b6 44 24 26	 movzx	 eax, BYTE PTR idx$1[rsp]
  00075	83 f8 08	 cmp	 eax, 8
  00078	7d 23		 jge	 SHORT $LN3@cpuTick

; 221  :             Cpu->InputPad1.buttons[idx] = NewInput->buttons[idx];

  0007a	0f b6 44 24 26	 movzx	 eax, BYTE PTR idx$1[rsp]
  0007f	0f b6 4c 24 26	 movzx	 ecx, BYTE PTR idx$1[rsp]
  00084	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0008c	48 8b bc 24 18
	01 00 00	 mov	 rdi, QWORD PTR NewInput$[rsp]
  00094	8b 04 87	 mov	 eax, DWORD PTR [rdi+rax*4]
  00097	89 44 8a 20	 mov	 DWORD PTR [rdx+rcx*4+32], eax
  0009b	eb c8		 jmp	 SHORT $LN2@cpuTick
$LN3@cpuTick:
$LN10@cpuTick:

; 222  :     }
; 223  :     
; 224  :     if(TriggerNmi)

  0009d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?TriggerNmi@@3HA, 0 ; TriggerNmi
  000a4	0f 84 87 00 00
	00		 je	 $LN11@cpuTick

; 225  :     {
; 226  :         NmiTriggered = true;

  000aa	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?NmiTriggered@@3HA, 1 ; NmiTriggered

; 227  :         TriggerNmi = false;

  000b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TriggerNmi@@3HA, 0 ; TriggerNmi

; 228  :                 
; 229  :         LogCpu.PrgCounter = NMI_VEC;

  000be	b8 fa ff 00 00	 mov	 eax, 65530		; 0000fffaH
  000c3	66 89 44 24 76	 mov	 WORD PTR LogCpu$[rsp+6], ax

; 230  :         Address = NMI_VEC;

  000c8	b8 fa ff 00 00	 mov	 eax, 65530		; 0000fffaH
  000cd	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 231  :         AddressMode = IMPL;

  000d2	c6 44 24 27 09	 mov	 BYTE PTR AddressMode$[rsp], 9

; 232  :         InstrLength = 0;

  000d7	c6 44 24 2c 00	 mov	 BYTE PTR InstrLength$[rsp], 0

; 233  :         InstrName = "NMI";

  000dc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG90692
  000e3	48 89 44 24 58	 mov	 QWORD PTR InstrName$[rsp], rax

; 234  :         InstrCycles = 7;

  000e8	c6 44 24 2d 07	 mov	 BYTE PTR InstrCycles$[rsp], 7

; 235  :         InstrData[0] = 0;

  000ed	b8 01 00 00 00	 mov	 eax, 1
  000f2	48 6b c0 00	 imul	 rax, rax, 0
  000f6	48 89 44 24 48	 mov	 QWORD PTR $T9[rsp], rax
  000fb	48 83 7c 24 48
	03		 cmp	 QWORD PTR $T9[rsp], 3
  00101	73 02		 jae	 SHORT $LN32@cpuTick
  00103	eb 05		 jmp	 SHORT $LN33@cpuTick
$LN32@cpuTick:
  00105	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN33@cpuTick:
  0010a	48 8b 44 24 48	 mov	 rax, QWORD PTR $T9[rsp]
  0010f	c6 44 04 28 00	 mov	 BYTE PTR InstrData$[rsp+rax], 0

; 236  : 
; 237  :         nmi_irq(Address, Cpu, AddressMode);

  00114	44 0f b6 44 24
	27		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0011a	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00122	0f b7 4c 24 20	 movzx	 ecx, WORD PTR Address$[rsp]
  00127	e8 00 00 00 00	 call	 ?nmi_irq@@YAEGPEAUcpu@@E@Z ; nmi_irq
  0012c	e9 94 04 00 00	 jmp	 $LN12@cpuTick
$LN11@cpuTick:

; 238  :     }
; 239  :     else if(IrqTriggered)

  00131	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?IrqTriggered@@3HA, 0 ; IrqTriggered
  00138	74 67		 je	 SHORT $LN13@cpuTick

; 240  :     {
; 241  :         LogCpu.PrgCounter = readCpu16(IRQ_BRK_VEC, Cpu);

  0013a	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00142	66 b9 fe ff	 mov	 cx, 65534		; 0000fffeH
  00146	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  0014b	66 89 44 24 76	 mov	 WORD PTR LogCpu$[rsp+6], ax

; 242  :         Address = IRQ_BRK_VEC;

  00150	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  00155	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 243  :         AddressMode = IMPL;

  0015a	c6 44 24 27 09	 mov	 BYTE PTR AddressMode$[rsp], 9

; 244  :         InstrLength = 0;

  0015f	c6 44 24 2c 00	 mov	 BYTE PTR InstrLength$[rsp], 0

; 245  :         InstrName = "IRQ";

  00164	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG90695
  0016b	48 89 44 24 58	 mov	 QWORD PTR InstrName$[rsp], rax

; 246  :         InstrCycles = 7;

  00170	c6 44 24 2d 07	 mov	 BYTE PTR InstrCycles$[rsp], 7

; 247  :         InstrData[0] = 0;

  00175	b8 01 00 00 00	 mov	 eax, 1
  0017a	48 6b c0 00	 imul	 rax, rax, 0
  0017e	48 89 44 24 50	 mov	 QWORD PTR $T10[rsp], rax
  00183	48 83 7c 24 50
	03		 cmp	 QWORD PTR $T10[rsp], 3
  00189	73 02		 jae	 SHORT $LN34@cpuTick
  0018b	eb 05		 jmp	 SHORT $LN35@cpuTick
$LN34@cpuTick:
  0018d	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN35@cpuTick:
  00192	48 8b 44 24 50	 mov	 rax, QWORD PTR $T10[rsp]
  00197	c6 44 04 28 00	 mov	 BYTE PTR InstrData$[rsp+rax], 0

; 248  :     }
; 249  :     else

  0019c	e9 24 04 00 00	 jmp	 $LN14@cpuTick
$LN13@cpuTick:

; 250  :     {    
; 251  :         Instruction = readCpu8(Cpu->PrgCounter, Cpu);

  001a1	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  001a9	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  001b1	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  001b5	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  001ba	88 44 24 25	 mov	 BYTE PTR Instruction$[rsp], al

; 252  :         AddressMode = instAddressMode[Instruction];

  001be	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instAddressMode@@3PAEA
  001ca	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001ce	88 44 24 27	 mov	 BYTE PTR AddressMode$[rsp], al

; 253  :         InstrLength = instLength[Instruction];

  001d2	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  001d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instLength@@3PAEA
  001de	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001e2	88 44 24 2c	 mov	 BYTE PTR InstrLength$[rsp], al

; 254  :         InstrName = instName[Instruction];

  001e6	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  001eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instName@@3PAPEADA
  001f2	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  001f6	48 89 44 24 58	 mov	 QWORD PTR InstrName$[rsp], rax

; 255  :         InstrCycles = instCycles[Instruction];

  001fb	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instCycles@@3PAEA
  00207	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0020b	88 44 24 2d	 mov	 BYTE PTR InstrCycles$[rsp], al

; 256  : 
; 257  :         for(int i = 0; i < InstrLength; ++i)

  0020f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$7[rsp], 0
  00217	eb 0a		 jmp	 SHORT $LN7@cpuTick
$LN5@cpuTick:
  00219	8b 44 24 34	 mov	 eax, DWORD PTR i$7[rsp]
  0021d	ff c0		 inc	 eax
  0021f	89 44 24 34	 mov	 DWORD PTR i$7[rsp], eax
$LN7@cpuTick:
  00223	0f b6 44 24 2c	 movzx	 eax, BYTE PTR InstrLength$[rsp]
  00228	39 44 24 34	 cmp	 DWORD PTR i$7[rsp], eax
  0022c	7d 2b		 jge	 SHORT $LN6@cpuTick

; 258  :         {
; 259  :             InstrData[i] = readCpu8(Cpu->PrgCounter + i, Cpu); 

  0022e	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00236	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0023a	03 44 24 34	 add	 eax, DWORD PTR i$7[rsp]
  0023e	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00246	0f b7 c8	 movzx	 ecx, ax
  00249	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0024e	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR i$7[rsp]
  00253	88 44 0c 28	 mov	 BYTE PTR InstrData$[rsp+rcx], al

; 260  :         }

  00257	eb c0		 jmp	 SHORT $LN5@cpuTick
$LN6@cpuTick:

; 261  :         
; 262  :     
; 263  :         switch(AddressMode)

  00259	0f b6 44 24 27	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  0025e	89 44 24 40	 mov	 DWORD PTR tv155[rsp], eax
  00262	83 7c 24 40 0d	 cmp	 DWORD PTR tv155[rsp], 13
  00267	0f 87 bf 02 00
	00		 ja	 $LN8@cpuTick
  0026d	48 63 44 24 40	 movsxd	 rax, DWORD PTR tv155[rsp]
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00279	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN36@cpuTick[rcx+rax*4]
  00280	48 03 c1	 add	 rax, rcx
  00283	ff e0		 jmp	 rax

; 264  :         {
; 265  :             case ACM:
; 266  :                 break;            

  00285	e9 a2 02 00 00	 jmp	 $LN8@cpuTick

; 267  :             case IMPL:
; 268  :                 break;

  0028a	e9 9d 02 00 00	 jmp	 $LN8@cpuTick
$LN17@cpuTick:

; 269  :             case IMED:
; 270  :                 Address = Cpu->PrgCounter + 1;

  0028f	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00297	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0029b	ff c0		 inc	 eax
  0029d	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 271  :                 break;

  002a2	e9 85 02 00 00	 jmp	 $LN8@cpuTick
$LN18@cpuTick:

; 272  :             case ZERO:
; 273  :                 Address = (uint16)InstrData[1];

  002a7	b8 01 00 00 00	 mov	 eax, 1
  002ac	48 6b c0 01	 imul	 rax, rax, 1
  002b0	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  002b5	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 274  :                 break;

  002ba	e9 6d 02 00 00	 jmp	 $LN8@cpuTick
$LN19@cpuTick:

; 275  :             case ZERX:
; 276  :                 Address = ((uint16)InstrData[1] + Cpu->X) & 0xFF;

  002bf	b8 01 00 00 00	 mov	 eax, 1
  002c4	48 6b c0 01	 imul	 rax, rax, 1
  002c8	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  002cd	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  002d5	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  002d9	03 c1		 add	 eax, ecx
  002db	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002e0	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 277  :                 break;

  002e5	e9 42 02 00 00	 jmp	 $LN8@cpuTick
$LN20@cpuTick:

; 278  :             case ZERY:
; 279  :                 Address = ((uint16)InstrData[1] + Cpu->Y) & 0xFF;

  002ea	b8 01 00 00 00	 mov	 eax, 1
  002ef	48 6b c0 01	 imul	 rax, rax, 1
  002f3	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  002f8	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00300	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  00304	03 c1		 add	 eax, ecx
  00306	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0030b	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 280  :                 break;

  00310	e9 17 02 00 00	 jmp	 $LN8@cpuTick
$LN21@cpuTick:

; 281  :             case ABS:
; 282  :                 Address = ((uint16)InstrData[2] << 8) | InstrData[1];

  00315	b8 01 00 00 00	 mov	 eax, 1
  0031a	48 6b c0 02	 imul	 rax, rax, 2
  0031e	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  00323	c1 e0 08	 shl	 eax, 8
  00326	b9 01 00 00 00	 mov	 ecx, 1
  0032b	48 6b c9 01	 imul	 rcx, rcx, 1
  0032f	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  00334	0b c1		 or	 eax, ecx
  00336	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 283  :                 break;

  0033b	e9 ec 01 00 00	 jmp	 $LN8@cpuTick
$LN22@cpuTick:

; 284  :             case ABSX:
; 285  :                 Address = (((uint16)InstrData[2] << 8) | InstrData[1]) + Cpu->X;

  00340	b8 01 00 00 00	 mov	 eax, 1
  00345	48 6b c0 02	 imul	 rax, rax, 2
  00349	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  0034e	c1 e0 08	 shl	 eax, 8
  00351	b9 01 00 00 00	 mov	 ecx, 1
  00356	48 6b c9 01	 imul	 rcx, rcx, 1
  0035a	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  0035f	0b c1		 or	 eax, ecx
  00361	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00369	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0036d	03 c1		 add	 eax, ecx
  0036f	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 286  :                 CrossedPage = crossedPageCheck(Address - Cpu->X, Address);

  00374	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00379	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00381	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00385	2b c1		 sub	 eax, ecx
  00387	0f b7 54 24 20	 movzx	 edx, WORD PTR Address$[rsp]
  0038c	0f b7 c8	 movzx	 ecx, ax
  0038f	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  00394	89 44 24 38	 mov	 DWORD PTR CrossedPage$[rsp], eax

; 287  :                 break;

  00398	e9 8f 01 00 00	 jmp	 $LN8@cpuTick
$LN23@cpuTick:

; 288  :             case ABSY:
; 289  :                 Address = (((uint16)InstrData[2] << 8) | InstrData[1]) + Cpu->Y;

  0039d	b8 01 00 00 00	 mov	 eax, 1
  003a2	48 6b c0 02	 imul	 rax, rax, 2
  003a6	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  003ab	c1 e0 08	 shl	 eax, 8
  003ae	b9 01 00 00 00	 mov	 ecx, 1
  003b3	48 6b c9 01	 imul	 rcx, rcx, 1
  003b7	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  003bc	0b c1		 or	 eax, ecx
  003be	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  003c6	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  003ca	03 c1		 add	 eax, ecx
  003cc	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 290  :                 CrossedPage = crossedPageCheck(Address - Cpu->Y, Address);

  003d1	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  003d6	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  003de	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  003e2	2b c1		 sub	 eax, ecx
  003e4	0f b7 54 24 20	 movzx	 edx, WORD PTR Address$[rsp]
  003e9	0f b7 c8	 movzx	 ecx, ax
  003ec	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  003f1	89 44 24 38	 mov	 DWORD PTR CrossedPage$[rsp], eax

; 291  :                 break;

  003f5	e9 32 01 00 00	 jmp	 $LN8@cpuTick
$LN24@cpuTick:

; 292  :             case REL:
; 293  :             {
; 294  :                 int8 RelOffset = InstrData[1];

  003fa	b8 01 00 00 00	 mov	 eax, 1
  003ff	48 6b c0 01	 imul	 rax, rax, 1
  00403	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  00408	88 44 24 2e	 mov	 BYTE PTR RelOffset$2[rsp], al

; 295  :                 Address = Cpu->PrgCounter + 2 + RelOffset;

  0040c	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR Cpu$[rsp]
  00414	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00418	0f be 4c 24 2e	 movsx	 ecx, BYTE PTR RelOffset$2[rsp]
  0041d	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  00421	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 296  :                 break;

  00426	e9 01 01 00 00	 jmp	 $LN8@cpuTick
$LN25@cpuTick:

; 297  :             }
; 298  :             case INDX:
; 299  :             {
; 300  :                 uint8 ZeroAddress = InstrData[1];

  0042b	b8 01 00 00 00	 mov	 eax, 1
  00430	48 6b c0 01	 imul	 rax, rax, 1
  00434	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  00439	88 44 24 2f	 mov	 BYTE PTR ZeroAddress$3[rsp], al

; 301  :                 uint8 AddedAddress = (ZeroAddress + Cpu->X) & 0xFF;

  0043d	0f b6 44 24 2f	 movzx	 eax, BYTE PTR ZeroAddress$3[rsp]
  00442	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0044a	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0044e	03 c1		 add	 eax, ecx
  00450	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00455	88 44 24 30	 mov	 BYTE PTR AddedAddress$4[rsp], al

; 302  :                 Address = bugReadCpu16(AddedAddress, Cpu);

  00459	0f b6 44 24 30	 movzx	 eax, BYTE PTR AddedAddress$4[rsp]
  0045e	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00466	0f b7 c8	 movzx	 ecx, ax
  00469	e8 00 00 00 00	 call	 ?bugReadCpu16@@YAGGPEAUcpu@@@Z ; bugReadCpu16
  0046e	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 303  :                 break;

  00473	e9 b4 00 00 00	 jmp	 $LN8@cpuTick
$LN26@cpuTick:

; 304  :             }
; 305  :             case INDY:
; 306  :             {
; 307  :                 uint8 ZeroAddress = InstrData[1];

  00478	b8 01 00 00 00	 mov	 eax, 1
  0047d	48 6b c0 01	 imul	 rax, rax, 1
  00481	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  00486	88 44 24 31	 mov	 BYTE PTR ZeroAddress$5[rsp], al

; 308  :                 Address = bugReadCpu16(ZeroAddress, Cpu) + Cpu->Y;

  0048a	0f b6 44 24 31	 movzx	 eax, BYTE PTR ZeroAddress$5[rsp]
  0048f	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00497	0f b7 c8	 movzx	 ecx, ax
  0049a	e8 00 00 00 00	 call	 ?bugReadCpu16@@YAGGPEAUcpu@@@Z ; bugReadCpu16
  0049f	0f b7 c0	 movzx	 eax, ax
  004a2	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  004aa	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  004ae	03 c1		 add	 eax, ecx
  004b0	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 309  :                 CrossedPage = crossedPageCheck(Address - Cpu->Y, Address);

  004b5	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  004ba	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  004c2	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  004c6	2b c1		 sub	 eax, ecx
  004c8	0f b7 54 24 20	 movzx	 edx, WORD PTR Address$[rsp]
  004cd	0f b7 c8	 movzx	 ecx, ax
  004d0	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  004d5	89 44 24 38	 mov	 DWORD PTR CrossedPage$[rsp], eax

; 310  :                 break;

  004d9	eb 51		 jmp	 SHORT $LN8@cpuTick
$LN27@cpuTick:

; 311  :             }
; 312  :             case INDI:
; 313  :             {
; 314  :                 uint16 IndirectAddress = ((uint16)InstrData[2] << 8) | InstrData[1];

  004db	b8 01 00 00 00	 mov	 eax, 1
  004e0	48 6b c0 02	 imul	 rax, rax, 2
  004e4	0f b6 44 04 28	 movzx	 eax, BYTE PTR InstrData$[rsp+rax]
  004e9	c1 e0 08	 shl	 eax, 8
  004ec	b9 01 00 00 00	 mov	 ecx, 1
  004f1	48 6b c9 01	 imul	 rcx, rcx, 1
  004f5	0f b6 4c 0c 28	 movzx	 ecx, BYTE PTR InstrData$[rsp+rcx]
  004fa	0b c1		 or	 eax, ecx
  004fc	66 89 44 24 3c	 mov	 WORD PTR IndirectAddress$8[rsp], ax

; 315  :                 Address = bugReadCpu16(IndirectAddress, Cpu);

  00501	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00509	0f b7 4c 24 3c	 movzx	 ecx, WORD PTR IndirectAddress$8[rsp]
  0050e	e8 00 00 00 00	 call	 ?bugReadCpu16@@YAGGPEAUcpu@@@Z ; bugReadCpu16
  00513	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 316  :                 break;

  00518	eb 12		 jmp	 SHORT $LN8@cpuTick
$LN28@cpuTick:

; 317  :             }
; 318  :             case NUL:
; 319  :             {
; 320  :                 Assert(0);

  0051a	33 c0		 xor	 eax, eax
  0051c	83 f8 01	 cmp	 eax, 1
  0051f	74 0b		 je	 SHORT $LN29@cpuTick
  00521	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN29@cpuTick:
$LN8@cpuTick:

; 321  :                 break;
; 322  :             }        
; 323  :         }
; 324  :     
; 325  :         Cpu->PrgCounter += InstrLength;

  0052c	0f b6 44 24 2c	 movzx	 eax, BYTE PTR InstrLength$[rsp]
  00531	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00539	0f b7 49 06	 movzx	 ecx, WORD PTR [rcx+6]
  0053d	03 c8		 add	 ecx, eax
  0053f	8b c1		 mov	 eax, ecx
  00541	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00549	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 326  :         CyclesElapsed += InstrCycles;

  0054d	0f b6 44 24 2d	 movzx	 eax, BYTE PTR InstrCycles$[rsp]
  00552	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR CyclesElapsed$[rsp]
  00557	03 c8		 add	 ecx, eax
  00559	8b c1		 mov	 eax, ecx
  0055b	88 44 24 24	 mov	 BYTE PTR CyclesElapsed$[rsp], al

; 327  : 
; 328  :         // NOTE: This is where the operation is executed, returning extra cycles, for branch ops
; 329  :         if(CrossedPage)

  0055f	83 7c 24 38 00	 cmp	 DWORD PTR CrossedPage$[rsp], 0
  00564	74 1d		 je	 SHORT $LN30@cpuTick

; 330  :             CyclesElapsed += instBoundaryCheck[Instruction];

  00566	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  0056b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instBoundaryCheck@@3PAEA
  00572	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00576	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR CyclesElapsed$[rsp]
  0057b	03 c8		 add	 ecx, eax
  0057d	8b c1		 mov	 eax, ecx
  0057f	88 44 24 24	 mov	 BYTE PTR CyclesElapsed$[rsp], al
$LN30@cpuTick:

; 331  :      
; 332  :         uint8 AdditionalCycles = instrOps[Instruction](Address, Cpu, AddressMode);

  00583	0f b6 44 24 25	 movzx	 eax, BYTE PTR Instruction$[rsp]
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?instrOps@@3PAP6AEGPEAUcpu@@E@ZA ; instrOps
  0058f	48 89 4c 24 60	 mov	 QWORD PTR tv316[rsp], rcx
  00594	44 0f b6 44 24
	27		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0059a	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR Cpu$[rsp]
  005a2	0f b7 4c 24 20	 movzx	 ecx, WORD PTR Address$[rsp]
  005a7	48 8b 7c 24 60	 mov	 rdi, QWORD PTR tv316[rsp]
  005ac	ff 14 c7	 call	 QWORD PTR [rdi+rax*8]
  005af	88 44 24 32	 mov	 BYTE PTR AdditionalCycles$6[rsp], al

; 333  :         CyclesElapsed += AdditionalCycles;

  005b3	0f b6 44 24 32	 movzx	 eax, BYTE PTR AdditionalCycles$6[rsp]
  005b8	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR CyclesElapsed$[rsp]
  005bd	03 c8		 add	 ecx, eax
  005bf	8b c1		 mov	 eax, ecx
  005c1	88 44 24 24	 mov	 BYTE PTR CyclesElapsed$[rsp], al
$LN14@cpuTick:
$LN12@cpuTick:

; 334  : 
; 335  :     }
; 336  : #if 0
; 337  :     char LogInstrData[16];
; 338  :     if(InstrLength == 3)
; 339  :         sprintf(LogInstrData, "%2X %2X %2X", InstrData[0], InstrData[1], InstrData[2]);
; 340  :     else if(InstrLength == 2)
; 341  :         sprintf(LogInstrData, "%2X %2X   ", InstrData[0], InstrData[1]);
; 342  :     else
; 343  :         sprintf(LogInstrData, "%2X      ", InstrData[0]);
; 344  : 
; 345  :     char LogOpInfo[64];
; 346  : //    sprintf(LogOpInfo, ""
; 347  :     
; 348  :     char LogCpuInfo[64];
; 349  :     sprintf(LogCpuInfo, "A:%2X X:%2X Y:%2X P:%2X SP:%2X  CYC: %d",
; 350  :             LogCpu.A, LogCpu.X, LogCpu.Y, LogCpu.Flags, LogCpu.StackPtr, CyclesElapsed);
; 351  : 
; 352  :     // NOTE: CPU Log options
; 353  :     char LogBuffer[1024];
; 354  :     sprintf(LogBuffer, "%4X %s    %s\n", LogCpu.PrgCounter, LogInstrData, LogCpuInfo);
; 355  :     OutputDebugString(LogBuffer);
; 356  : #endif
; 357  :     
; 358  :     return(CyclesElapsed);

  005c5	0f b6 44 24 24	 movzx	 eax, BYTE PTR CyclesElapsed$[rsp]
$LN31@cpuTick:

; 359  : }

  005ca	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005d2	48 33 cc	 xor	 rcx, rsp
  005d5	e8 00 00 00 00	 call	 __security_check_cookie
  005da	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  005e1	5f		 pop	 rdi
  005e2	5e		 pop	 rsi
  005e3	c3		 ret	 0
$LN36@cpuTick:
  005e4	00 00 00 00	 DD	 $LN28@cpuTick
  005e8	00 00 00 00	 DD	 $LN8@cpuTick
  005ec	00 00 00 00	 DD	 $LN17@cpuTick
  005f0	00 00 00 00	 DD	 $LN18@cpuTick
  005f4	00 00 00 00	 DD	 $LN19@cpuTick
  005f8	00 00 00 00	 DD	 $LN20@cpuTick
  005fc	00 00 00 00	 DD	 $LN21@cpuTick
  00600	00 00 00 00	 DD	 $LN22@cpuTick
  00604	00 00 00 00	 DD	 $LN23@cpuTick
  00608	00 00 00 00	 DD	 $LN8@cpuTick
  0060c	00 00 00 00	 DD	 $LN24@cpuTick
  00610	00 00 00 00	 DD	 $LN25@cpuTick
  00614	00 00 00 00	 DD	 $LN26@cpuTick
  00618	00 00 00 00	 DD	 $LN27@cpuTick
?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z ENDP		; cpuTick
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
tv89 = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?nmi_irq@@YAEGPEAUcpu@@E@Z PROC				; nmi_irq

; 181  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 182  :     uint8 HighByte = (uint8)(Cpu->PrgCounter >> 8);

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0001c	c1 f8 08	 sar	 eax, 8
  0001f	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 183  :     uint8 LowByte = (uint8)Cpu->PrgCounter; 

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  0002c	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 184  :     push(HighByte, Cpu);

  00030	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR HighByte$[rsp]
  0003a	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 185  :     push(LowByte, Cpu);

  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00044	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00049	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 186  : 
; 187  :     clearBreak(&Cpu->Flags);

  0004e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00053	48 83 c0 03	 add	 rax, 3
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ?clearBreak@@YAXPEAE@Z	; clearBreak

; 188  :     push(Cpu->Flags, Cpu); 

  0005f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00064	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00069	0f b6 48 03	 movzx	 ecx, BYTE PTR [rax+3]
  0006d	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 189  :     setInterrupt(&Cpu->Flags);

  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00077	48 83 c0 03	 add	 rax, 3
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 190  : 
; 191  :     Cpu->PrgCounter = (read8(Address+1, Cpu->MemoryBase) << 8) | read8(Address, Cpu->MemoryBase);

  00083	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00088	ff c0		 inc	 eax
  0008a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0008f	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00093	0f b7 c8	 movzx	 ecx, ax
  00096	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  0009b	0f b6 c0	 movzx	 eax, al
  0009e	c1 e0 08	 shl	 eax, 8
  000a1	89 44 24 24	 mov	 DWORD PTR tv89[rsp], eax
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000aa	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  000ae	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  000b3	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  000b8	0f b6 c0	 movzx	 eax, al
  000bb	8b 4c 24 24	 mov	 ecx, DWORD PTR tv89[rsp]
  000bf	0b c8		 or	 ecx, eax
  000c1	8b c1		 mov	 eax, ecx
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000c8	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 192  :     return(0);

  000cc	32 c0		 xor	 al, al

; 193  : }

  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
?nmi_irq@@YAEGPEAUcpu@@E@Z ENDP				; nmi_irq
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?xaa@@YAEGPEAUcpu@@E@Z PROC				; xaa

; 787  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 788  : //    Assert(0);
; 789  :     return(0);

  0000f	32 c0		 xor	 al, al

; 790  : }

  00011	c3		 ret	 0
?xaa@@YAEGPEAUcpu@@E@Z ENDP				; xaa
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?tas@@YAEGPEAUcpu@@E@Z PROC				; tas

; 781  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 782  :     ///  Assert(0);
; 783  :     return(0);

  0000f	32 c0		 xor	 al, al

; 784  : }

  00011	c3		 ret	 0
?tas@@YAEGPEAUcpu@@E@Z ENDP				; tas
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sre@@YAEGPEAUcpu@@E@Z PROC				; sre

; 775  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 776  :     lsr(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?lsr@@YAEGPEAUcpu@@E@Z	; lsr

; 777  :     eor(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?eor@@YAEGPEAUcpu@@E@Z	; eor

; 778  :     return(0);

  0003d	32 c0		 xor	 al, al

; 779  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?sre@@YAEGPEAUcpu@@E@Z ENDP				; sre
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?slo@@YAEGPEAUcpu@@E@Z PROC				; slo

; 769  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 770  :     asl(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?asl@@YAEGPEAUcpu@@E@Z	; asl

; 771  :     ora(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?ora@@YAEGPEAUcpu@@E@Z	; ora

; 772  :     return(0);

  0003d	32 c0		 xor	 al, al

; 773  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?slo@@YAEGPEAUcpu@@E@Z ENDP				; slo
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
ReadValue$ = 32
Value$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?shy@@YAEGPEAUcpu@@E@Z PROC				; shy

; 760  : {

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 761  :     uint8 Value = (Cpu->Y & ((Address >> 8) + 1)) & 0xFF;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0001c	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00021	c1 f9 08	 sar	 ecx, 8
  00024	ff c1		 inc	 ecx
  00026	23 c1		 and	 eax, ecx
  00028	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0002d	88 44 24 21	 mov	 BYTE PTR Value$[rsp], al

; 762  :     uint8 ReadValue = readCpu8((Cpu->PrgCounter + 1), Cpu);

  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00036	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0003a	ff c0		 inc	 eax
  0003c	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00041	0f b7 c8	 movzx	 ecx, ax
  00044	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00049	88 44 24 20	 mov	 BYTE PTR ReadValue$[rsp], al

; 763  :     
; 764  :     if((Cpu->X + ReadValue) <= 0xFF)

  0004d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00052	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00056	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR ReadValue$[rsp]
  0005b	03 c1		 add	 eax, ecx
  0005d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00062	7f 14		 jg	 SHORT $LN2@shy

; 765  :         writeCpu8(Value, Address, Cpu);

  00064	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00069	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0006e	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR Value$[rsp]
  00073	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN2@shy:

; 766  :     return(0);

  00078	32 c0		 xor	 al, al

; 767  : }

  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007e	c3		 ret	 0
?shy@@YAEGPEAUcpu@@E@Z ENDP				; shy
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?shx@@YAEGPEAUcpu@@E@Z PROC				; shx

; 725  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 726  : 
; 727  :     return(0);

  0000f	32 c0		 xor	 al, al

; 728  : }

  00011	c3		 ret	 0
?shx@@YAEGPEAUcpu@@E@Z ENDP				; shx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?sax@@YAEGPEAUcpu@@E@Z PROC				; sax

; 719  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 720  :     uint8 Value = Cpu->A & Cpu->X;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00020	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00024	23 c1		 and	 eax, ecx
  00026	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 721  :     writeCpu8(Value, Address, Cpu);    

  0002a	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  0002f	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00034	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00039	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 722  :     return(0);

  0003e	32 c0		 xor	 al, al

; 723  : }

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
?sax@@YAEGPEAUcpu@@E@Z ENDP				; sax
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?rra@@YAEGPEAUcpu@@E@Z PROC				; rra

; 713  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 714  :     ror(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?ror@@YAEGPEAUcpu@@E@Z	; ror

; 715  :     adc(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?adc@@YAEGPEAUcpu@@E@Z	; adc

; 716  :     return(0);

  0003d	32 c0		 xor	 al, al

; 717  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?rra@@YAEGPEAUcpu@@E@Z ENDP				; rra
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?rla@@YAEGPEAUcpu@@E@Z PROC				; rla

; 707  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 708  :     rol(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?rol@@YAEGPEAUcpu@@E@Z	; rol

; 709  :     AND(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 710  :     return(0);

  0003d	32 c0		 xor	 al, al

; 711  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?rla@@YAEGPEAUcpu@@E@Z ENDP				; rla
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?lax@@YAEGPEAUcpu@@E@Z PROC				; lax

; 701  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 702  :     lda(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?lda@@YAEGPEAUcpu@@E@Z	; lda

; 703  :     ldx(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?ldx@@YAEGPEAUcpu@@E@Z	; ldx

; 704  :     return(0);

  0003d	32 c0		 xor	 al, al

; 705  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?lax@@YAEGPEAUcpu@@E@Z ENDP				; lax
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?las@@YAEGPEAUcpu@@E@Z PROC				; las

; 697  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 698  :     return(0); 

  0000f	32 c0		 xor	 al, al

; 699  : }

  00011	c3		 ret	 0
?las@@YAEGPEAUcpu@@E@Z ENDP				; las
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?kil@@YAEGPEAUcpu@@E@Z PROC				; kil

; 692  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 693  :     //Assert(0);
; 694  :     return(0);

  0000f	32 c0		 xor	 al, al

; 695  : }

  00011	c3		 ret	 0
?kil@@YAEGPEAUcpu@@E@Z ENDP				; kil
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?isc@@YAEGPEAUcpu@@E@Z PROC				; isc

; 686  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 687  :     inc(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?inc@@YAEGPEAUcpu@@E@Z	; inc

; 688  :     sbc(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?sbc@@YAEGPEAUcpu@@E@Z	; sbc

; 689  :     return(0);

  0003d	32 c0		 xor	 al, al

; 690  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?isc@@YAEGPEAUcpu@@E@Z ENDP				; isc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?dcp@@YAEGPEAUcpu@@E@Z PROC				; dcp

; 680  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 681  :     dec(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?dec@@YAEGPEAUcpu@@E@Z	; dec

; 682  :     cmp(Address, Cpu, AddressMode);

  00028	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00033	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00038	e8 00 00 00 00	 call	 ?cmp@@YAEGPEAUcpu@@E@Z	; cmp

; 683  :     return(0);

  0003d	32 c0		 xor	 al, al

; 684  : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?dcp@@YAEGPEAUcpu@@E@Z ENDP				; dcp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
ANDValue$ = 32
Value$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?axs@@YAEGPEAUcpu@@E@Z PROC				; axs

; 663  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 664  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 21	 mov	 BYTE PTR Value$[rsp], al

; 665  : 
; 666  :     uint8 ANDValue = (Cpu->A & Cpu->X);

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00033	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00037	23 c1		 and	 eax, ecx
  00039	88 44 24 20	 mov	 BYTE PTR ANDValue$[rsp], al

; 667  :     Cpu->X = ANDValue - Value;

  0003d	0f b6 44 24 20	 movzx	 eax, BYTE PTR ANDValue$[rsp]
  00042	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR Value$[rsp]
  00047	2b c1		 sub	 eax, ecx
  00049	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0004e	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 668  : 
; 669  :     if(ANDValue >= Value)

  00051	0f b6 44 24 20	 movzx	 eax, BYTE PTR ANDValue$[rsp]
  00056	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR Value$[rsp]
  0005b	3b c1		 cmp	 eax, ecx
  0005d	7c 13		 jl	 SHORT $LN2@axs

; 670  :         setCarry(&Cpu->Flags);

  0005f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00064	48 83 c0 03	 add	 rax, 3
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 671  :     else

  00070	eb 11		 jmp	 SHORT $LN3@axs
$LN2@axs:

; 672  :         clearCarry(&Cpu->Flags);

  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00077	48 83 c0 03	 add	 rax, 3
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@axs:

; 673  :     
; 674  :     setZero(Cpu->X, &Cpu->Flags);

  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00088	48 83 c0 03	 add	 rax, 3
  0008c	48 8b d0	 mov	 rdx, rax
  0008f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00094	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00098	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 675  :     setNegative(Cpu->X, &Cpu->Flags);

  0009d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000a2	48 83 c0 03	 add	 rax, 3
  000a6	48 8b d0	 mov	 rdx, rax
  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ae	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  000b2	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 676  :     
; 677  :     return(0);

  000b7	32 c0		 xor	 al, al

; 678  : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
?axs@@YAEGPEAUcpu@@E@Z ENDP				; axs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
bit6$ = 32
bit5$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?arr@@YAEGPEAUcpu@@E@Z PROC				; arr

; 639  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 640  :     AND(Address, Cpu, AddressMode);    

  00013	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 641  :     ror(Address, Cpu, ACM);

  00028	41 b0 01	 mov	 r8b, 1
  0002b	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00030	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00035	e8 00 00 00 00	 call	 ?ror@@YAEGPEAUcpu@@E@Z	; ror

; 642  : 
; 643  :     uint8 bit5 = Cpu->A & (1<<5);

  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00042	83 e0 20	 and	 eax, 32			; 00000020H
  00045	88 44 24 21	 mov	 BYTE PTR bit5$[rsp], al

; 644  :     uint8 bit6 = Cpu->A & (1<<6);

  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	88 44 24 20	 mov	 BYTE PTR bit6$[rsp], al

; 645  : 
; 646  :     if(bit6)

  00058	0f b6 44 24 20	 movzx	 eax, BYTE PTR bit6$[rsp]
  0005d	85 c0		 test	 eax, eax
  0005f	74 13		 je	 SHORT $LN2@arr

; 647  :         setCarry(&Cpu->Flags);

  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	48 83 c0 03	 add	 rax, 3
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 648  :     else

  00072	eb 11		 jmp	 SHORT $LN3@arr
$LN2@arr:

; 649  :         clearCarry(&Cpu->Flags);

  00074	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00079	48 83 c0 03	 add	 rax, 3
  0007d	48 8b c8	 mov	 rcx, rax
  00080	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@arr:

; 650  : 
; 651  :     if((bit5 && !bit6) || (!bit5 && bit6))

  00085	0f b6 44 24 21	 movzx	 eax, BYTE PTR bit5$[rsp]
  0008a	85 c0		 test	 eax, eax
  0008c	74 09		 je	 SHORT $LN7@arr
  0008e	0f b6 44 24 20	 movzx	 eax, BYTE PTR bit6$[rsp]
  00093	85 c0		 test	 eax, eax
  00095	74 12		 je	 SHORT $LN6@arr
$LN7@arr:
  00097	0f b6 44 24 21	 movzx	 eax, BYTE PTR bit5$[rsp]
  0009c	85 c0		 test	 eax, eax
  0009e	75 1c		 jne	 SHORT $LN4@arr
  000a0	0f b6 44 24 20	 movzx	 eax, BYTE PTR bit6$[rsp]
  000a5	85 c0		 test	 eax, eax
  000a7	74 13		 je	 SHORT $LN4@arr
$LN6@arr:

; 652  :         setOverflow(&Cpu->Flags);

  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ae	48 83 c0 03	 add	 rax, 3
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 653  :     else

  000ba	eb 11		 jmp	 SHORT $LN5@arr
$LN4@arr:

; 654  :         clearOverflow(&Cpu->Flags);

  000bc	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000c1	48 83 c0 03	 add	 rax, 3
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN5@arr:

; 655  :         
; 656  :     setZero(Cpu->A, &Cpu->Flags);

  000cd	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d2	48 83 c0 03	 add	 rax, 3
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000de	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000e1	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 657  :     setNegative(Cpu->A, &Cpu->Flags);

  000e6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000eb	48 83 c0 03	 add	 rax, 3
  000ef	48 8b d0	 mov	 rdx, rax
  000f2	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f7	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000fa	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 658  : 
; 659  :     
; 660  :     return(0);

  000ff	32 c0		 xor	 al, al

; 661  : }

  00101	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00105	c3		 ret	 0
?arr@@YAEGPEAUcpu@@E@Z ENDP				; arr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?anc@@YAEGPEAUcpu@@E@Z PROC				; anc

; 628  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 629  :     AND(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 630  :     
; 631  :     if(isBitSet(NEGATIVE_BIT, Cpu->Flags))

  00028	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00031	b1 80		 mov	 cl, 128			; 00000080H
  00033	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00038	85 c0		 test	 eax, eax
  0003a	74 13		 je	 SHORT $LN2@anc

; 632  :         setCarry(&Cpu->Flags);

  0003c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 633  :     else

  0004d	eb 11		 jmp	 SHORT $LN3@anc
$LN2@anc:

; 634  :         clearCarry(&Cpu->Flags);

  0004f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00054	48 83 c0 03	 add	 rax, 3
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@anc:

; 635  :     
; 636  :     return(0);

  00060	32 c0		 xor	 al, al

; 637  : }

  00062	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00066	c3		 ret	 0
?anc@@YAEGPEAUcpu@@E@Z ENDP				; anc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?alr@@YAEGPEAUcpu@@E@Z PROC				; alr

; 622  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 623  :     AND(Address, Cpu, AddressMode);

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR AddressMode$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0001e	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00023	e8 00 00 00 00	 call	 ?AND@@YAEGPEAUcpu@@E@Z	; AND

; 624  :     lsr(Address, Cpu, ACM);

  00028	41 b0 01	 mov	 r8b, 1
  0002b	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00030	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Address$[rsp]
  00035	e8 00 00 00 00	 call	 ?lsr@@YAEGPEAUcpu@@E@Z	; lsr

; 625  :     return(0);

  0003a	32 c0		 xor	 al, al

; 626  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
?alr@@YAEGPEAUcpu@@E@Z ENDP				; alr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?ahx@@YAEGPEAUcpu@@E@Z PROC				; ahx

; 617  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 618  :     //Assert(0);
; 619  :     return(0);

  0000f	32 c0		 xor	 al, al

; 620  : }

  00011	c3		 ret	 0
?ahx@@YAEGPEAUcpu@@E@Z ENDP				; ahx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?txs@@YAEGPEAUcpu@@E@Z PROC				; txs

; 609  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 610  :     Cpu->StackPtr = Cpu->X;

  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR Cpu$[rsp]
  00014	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00019	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0001d	88 48 04	 mov	 BYTE PTR [rax+4], cl

; 611  :     return(0);

  00020	32 c0		 xor	 al, al

; 612  : }

  00022	c3		 ret	 0
?txs@@YAEGPEAUcpu@@E@Z ENDP				; txs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tya@@YAEGPEAUcpu@@E@Z PROC				; tya

; 602  : {   

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 603  :     Cpu->A = Cpu->Y;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  00021	88 08		 mov	 BYTE PTR [rax], cl

; 604  :     setZero(Cpu->A, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00037	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 605  :     setNegative(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 606  :     return(0);

  00055	32 c0		 xor	 al, al

; 607  : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
?tya@@YAEGPEAUcpu@@E@Z ENDP				; tya
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?txa@@YAEGPEAUcpu@@E@Z PROC				; txa

; 595  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 596  :     Cpu->A = Cpu->X;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00021	88 08		 mov	 BYTE PTR [rax], cl

; 597  :     setZero(Cpu->A, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00037	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 598  :     setNegative(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 599  :     return(0);

  00055	32 c0		 xor	 al, al

; 600  : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
?txa@@YAEGPEAUcpu@@E@Z ENDP				; txa
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tsx@@YAEGPEAUcpu@@E@Z PROC				; tsx

; 588  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 589  :     Cpu->X = Cpu->StackPtr;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00021	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 590  :     setZero(Cpu->X, &Cpu->Flags);

  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00029	48 83 c0 03	 add	 rax, 3
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00035	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00039	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 591  :     setNegative(Cpu->X, &Cpu->Flags);

  0003e	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00043	48 83 c0 03	 add	 rax, 3
  00047	48 8b d0	 mov	 rdx, rax
  0004a	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004f	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00053	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 592  :     return(0);

  00058	32 c0		 xor	 al, al

; 593  : }

  0005a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005e	c3		 ret	 0
?tsx@@YAEGPEAUcpu@@E@Z ENDP				; tsx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tay@@YAEGPEAUcpu@@E@Z PROC				; tay

; 581  : {    

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 582  :     Cpu->Y = Cpu->A;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00020	88 48 02	 mov	 BYTE PTR [rax+2], cl

; 583  :     setZero(Cpu->Y, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00038	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 584  :     setNegative(Cpu->Y, &Cpu->Flags);

  0003d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00042	48 83 c0 03	 add	 rax, 3
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00052	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 585  :     return(0);

  00057	32 c0		 xor	 al, al

; 586  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
?tay@@YAEGPEAUcpu@@E@Z ENDP				; tay
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?tax@@YAEGPEAUcpu@@E@Z PROC				; tax

; 574  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 575  :     Cpu->X = Cpu->A;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0001d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00020	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 576  :     setZero(Cpu->X, &Cpu->Flags);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	48 83 c0 03	 add	 rax, 3
  0002c	48 8b d0	 mov	 rdx, rax
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00034	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00038	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 577  :     setNegative(Cpu->X, &Cpu->Flags);

  0003d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00042	48 83 c0 03	 add	 rax, 3
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00052	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 578  :     return(0);

  00057	32 c0		 xor	 al, al

; 579  : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
?tax@@YAEGPEAUcpu@@E@Z ENDP				; tax
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sty@@YAEGPEAUcpu@@E@Z PROC				; sty

; 569  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 570  :     writeCpu8(Cpu->Y, Address, Cpu);

  00013	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  00018	0f b7 54 24 30	 movzx	 edx, WORD PTR Address$[rsp]
  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00026	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 571  :     return(0);

  0002b	32 c0		 xor	 al, al

; 572  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?sty@@YAEGPEAUcpu@@E@Z ENDP				; sty
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?stx@@YAEGPEAUcpu@@E@Z PROC				; stx

; 564  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 565  :     writeCpu8(Cpu->X, Address, Cpu);

  00013	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  00018	0f b7 54 24 30	 movzx	 edx, WORD PTR Address$[rsp]
  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00026	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 566  :     return(0);

  0002b	32 c0		 xor	 al, al

; 567  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?stx@@YAEGPEAUcpu@@E@Z ENDP				; stx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sta@@YAEGPEAUcpu@@E@Z PROC				; sta

; 559  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 560  :     writeCpu8(Cpu->A, Address, Cpu);

  00013	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  00018	0f b7 54 24 30	 movzx	 edx, WORD PTR Address$[rsp]
  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00022	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00025	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 561  :     return(0);

  0002a	32 c0		 xor	 al, al

; 562  : }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
?sta@@YAEGPEAUcpu@@E@Z ENDP				; sta
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sei@@YAEGPEAUcpu@@E@Z PROC				; sei

; 554  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 555  :     setInterrupt(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 556  :     return(0);

  00024	32 c0		 xor	 al, al

; 557  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?sei@@YAEGPEAUcpu@@E@Z ENDP				; sei
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sed@@YAEGPEAUcpu@@E@Z PROC				; sed

; 549  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 550  :     setDecimal(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setDecimal@@YAXPEAE@Z	; setDecimal

; 551  :     return(0);

  00024	32 c0		 xor	 al, al

; 552  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?sed@@YAEGPEAUcpu@@E@Z ENDP				; sed
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?sec@@YAEGPEAUcpu@@E@Z PROC				; sec

; 544  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 545  :     setCarry(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 546  :     return(0);

  00024	32 c0		 xor	 al, al

; 547  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?sec@@YAEGPEAUcpu@@E@Z ENDP				; sec
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
A$ = 32
B$ = 33
C$ = 34
Sum$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?sbc@@YAEGPEAUcpu@@E@Z PROC				; sbc

; 518  : {

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 519  :     uint8 A = Cpu->A;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001b	88 44 24 20	 mov	 BYTE PTR A$[rsp], al

; 520  :     uint8 B = ~readCpu8(Address, Cpu); // NOTE: Using the inverse

  0001f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00024	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00029	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0002e	0f b6 c0	 movzx	 eax, al
  00031	f7 d0		 not	 eax
  00033	88 44 24 21	 mov	 BYTE PTR B$[rsp], al

; 521  :     uint8 C = isBitSet(CARRY_BIT, Cpu->Flags);

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003c	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00040	b1 01		 mov	 cl, 1
  00042	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00047	88 44 24 22	 mov	 BYTE PTR C$[rsp], al

; 522  : 
; 523  :     uint16 Sum = (uint16)A + (uint16)B + (uint16)C;

  0004b	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  00050	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  00055	03 c1		 add	 eax, ecx
  00057	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR C$[rsp]
  0005c	03 c1		 add	 eax, ecx
  0005e	66 89 44 24 24	 mov	 WORD PTR Sum$[rsp], ax

; 524  : 
; 525  :     // Overflow check, taken from the web. One day find out how this works
; 526  :     if(((A ^ Sum) & (B ^ Sum) & 0x80) == 0x80)

  00063	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  00068	0f b7 4c 24 24	 movzx	 ecx, WORD PTR Sum$[rsp]
  0006d	33 c1		 xor	 eax, ecx
  0006f	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  00074	0f b7 54 24 24	 movzx	 edx, WORD PTR Sum$[rsp]
  00079	33 ca		 xor	 ecx, edx
  0007b	23 c1		 and	 eax, ecx
  0007d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00082	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00087	75 13		 jne	 SHORT $LN2@sbc

; 527  :         setOverflow(&Cpu->Flags);

  00089	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0008e	48 83 c0 03	 add	 rax, 3
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 528  :     else

  0009a	eb 11		 jmp	 SHORT $LN3@sbc
$LN2@sbc:

; 529  :         clearOverflow(&Cpu->Flags);

  0009c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000a1	48 83 c0 03	 add	 rax, 3
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN3@sbc:

; 530  : 
; 531  :     if(Sum & 0x100)

  000ad	0f b7 44 24 24	 movzx	 eax, WORD PTR Sum$[rsp]
  000b2	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000b7	85 c0		 test	 eax, eax
  000b9	74 13		 je	 SHORT $LN4@sbc

; 532  :         setCarry(&Cpu->Flags);

  000bb	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000c0	48 83 c0 03	 add	 rax, 3
  000c4	48 8b c8	 mov	 rcx, rax
  000c7	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 533  :     else

  000cc	eb 11		 jmp	 SHORT $LN5@sbc
$LN4@sbc:

; 534  :         clearCarry(&Cpu->Flags);

  000ce	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d3	48 83 c0 03	 add	 rax, 3
  000d7	48 8b c8	 mov	 rcx, rax
  000da	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@sbc:

; 535  : 
; 536  :     setZero(Sum, &Cpu->Flags);

  000df	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e4	48 83 c0 03	 add	 rax, 3
  000e8	48 8b d0	 mov	 rdx, rax
  000eb	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  000f0	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 537  :     setNegative(Sum, &Cpu->Flags);

  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000fa	48 83 c0 03	 add	 rax, 3
  000fe	48 8b d0	 mov	 rdx, rax
  00101	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00106	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 538  : 
; 539  :     Cpu->A = (uint8)Sum;

  0010b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00110	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00115	88 08		 mov	 BYTE PTR [rax], cl

; 540  : 
; 541  :     return(0);

  00117	32 c0		 xor	 al, al

; 542  : }

  00119	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011d	c3		 ret	 0
?sbc@@YAEGPEAUcpu@@E@Z ENDP				; sbc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
ReturnAddress$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?rts@@YAEGPEAUcpu@@E@Z PROC				; rts

; 510  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 511  :     uint8 LowByte = pop(Cpu);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 512  :     uint8 HighByte = pop(Cpu);

  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00026	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0002b	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 513  :     uint16 ReturnAddress = ((uint16)HighByte << 8) | (uint16)LowByte;

  0002f	0f b6 44 24 20	 movzx	 eax, BYTE PTR HighByte$[rsp]
  00034	c1 e0 08	 shl	 eax, 8
  00037	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  0003c	0b c1		 or	 eax, ecx
  0003e	66 89 44 24 24	 mov	 WORD PTR ReturnAddress$[rsp], ax

; 514  :     Cpu->PrgCounter = ReturnAddress + 1;

  00043	0f b7 44 24 24	 movzx	 eax, WORD PTR ReturnAddress$[rsp]
  00048	ff c0		 inc	 eax
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0004f	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 515  :     return(0);

  00053	32 c0		 xor	 al, al

; 516  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
?rts@@YAEGPEAUcpu@@E@Z ENDP				; rts
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Flags$ = 32
HighByte$ = 33
LowByte$ = 34
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?rti@@YAEGPEAUcpu@@E@Z PROC				; rti

; 500  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 501  :     uint8 Flags = pop(Cpu);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	88 44 24 20	 mov	 BYTE PTR Flags$[rsp], al

; 502  :     Cpu->Flags = Flags;

  00021	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00026	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Flags$[rsp]
  0002b	88 48 03	 mov	 BYTE PTR [rax+3], cl

; 503  :     
; 504  :     uint8 LowByte = pop(Cpu);

  0002e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00033	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  00038	88 44 24 22	 mov	 BYTE PTR LowByte$[rsp], al

; 505  :     uint8 HighByte = pop(Cpu);

  0003c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00041	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  00046	88 44 24 21	 mov	 BYTE PTR HighByte$[rsp], al

; 506  :     Cpu->PrgCounter = ((uint16)HighByte << 8) | (uint16)LowByte;

  0004a	0f b6 44 24 21	 movzx	 eax, BYTE PTR HighByte$[rsp]
  0004f	c1 e0 08	 shl	 eax, 8
  00052	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00057	0b c1		 or	 eax, ecx
  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0005e	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 507  :     return(0);

  00062	32 c0		 xor	 al, al

; 508  : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
?rti@@YAEGPEAUcpu@@E@Z ENDP				; rti
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CarrySet$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ror@@YAEGPEAUcpu@@E@Z PROC				; ror

; 461  : {

$LN11:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 462  :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 463  :     uint8 CarrySet = isBitSet(CARRY_BIT, Cpu->Flags);

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	88 44 24 21	 mov	 BYTE PTR CarrySet$[rsp], al

; 464  :     
; 465  :     if(AddressMode == ACM)

  0002c	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 65		 jne	 SHORT $LN2@ror

; 466  :     {        
; 467  :         if(Cpu->A & 1)

  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003e	83 e0 01	 and	 eax, 1
  00041	85 c0		 test	 eax, eax
  00043	74 13		 je	 SHORT $LN4@ror

; 468  :             setCarry(&Cpu->Flags);

  00045	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004a	48 83 c0 03	 add	 rax, 3
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 469  :         else

  00056	eb 11		 jmp	 SHORT $LN5@ror
$LN4@ror:

; 470  :             clearCarry(&Cpu->Flags);

  00058	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005d	48 83 c0 03	 add	 rax, 3
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@ror:

; 471  :         
; 472  :         Value = Cpu->A >> 1;

  00069	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0006e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00071	d1 f8		 sar	 eax, 1
  00073	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 473  :         
; 474  :         if(CarrySet)

  00077	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  0007c	85 c0		 test	 eax, eax
  0007e	74 0d		 je	 SHORT $LN6@ror

; 475  :             Value = Value | (1 << 7);

  00080	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  00085	0f ba e8 07	 bts	 eax, 7
  00089	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN6@ror:

; 476  :         
; 477  :         Cpu->A = Value;

  0008d	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00092	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00097	88 08		 mov	 BYTE PTR [rax], cl

; 478  :     }
; 479  :     else

  00099	eb 78		 jmp	 SHORT $LN3@ror
$LN2@ror:

; 480  :     {
; 481  :         Value = readCpu8(Address, Cpu);

  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  000a0	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  000a5	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  000aa	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 482  :         if(Value & 1)

  000ae	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 13		 je	 SHORT $LN7@ror

; 483  :             setCarry(&Cpu->Flags);

  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000bf	48 83 c0 03	 add	 rax, 3
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 484  :         else

  000cb	eb 11		 jmp	 SHORT $LN8@ror
$LN7@ror:

; 485  :             clearCarry(&Cpu->Flags);

  000cd	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d2	48 83 c0 03	 add	 rax, 3
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN8@ror:

; 486  :         
; 487  :         Value = Value >> 1;

  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000e3	d1 f8		 sar	 eax, 1
  000e5	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 488  :         
; 489  :         if(CarrySet)

  000e9	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  000ee	85 c0		 test	 eax, eax
  000f0	74 0d		 je	 SHORT $LN9@ror

; 490  :             Value = Value | (1 << 7);

  000f2	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000f7	0f ba e8 07	 bts	 eax, 7
  000fb	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN9@ror:

; 491  :         
; 492  :         writeCpu8(Value, Address, Cpu);

  000ff	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00104	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00109	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0010e	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@ror:

; 493  :     }
; 494  :     setZero(Value, &Cpu->Flags);

  00113	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00118	48 83 c0 03	 add	 rax, 3
  0011c	48 8b d0	 mov	 rdx, rax
  0011f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00124	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 495  :     setNegative(Value, &Cpu->Flags);

  00129	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0012e	48 83 c0 03	 add	 rax, 3
  00132	48 8b d0	 mov	 rdx, rax
  00135	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0013a	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 496  :     return(0);

  0013f	32 c0		 xor	 al, al

; 497  : }

  00141	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00145	c3		 ret	 0
?ror@@YAEGPEAUcpu@@E@Z ENDP				; ror
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CarrySet$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?rol@@YAEGPEAUcpu@@E@Z PROC				; rol

; 422  : {    

$LN11:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 423  :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 424  :     uint8 CarrySet = isBitSet(CARRY_BIT, Cpu->Flags);

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	88 44 24 21	 mov	 BYTE PTR CarrySet$[rsp], al

; 425  :     
; 426  :     if(AddressMode == ACM)

  0002c	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 66		 jne	 SHORT $LN2@rol

; 427  :     {        
; 428  :         if(Cpu->A & (1 << 7))

  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00043	85 c0		 test	 eax, eax
  00045	74 13		 je	 SHORT $LN4@rol

; 429  :             setCarry(&Cpu->Flags);

  00047	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004c	48 83 c0 03	 add	 rax, 3
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 430  :         else

  00058	eb 11		 jmp	 SHORT $LN5@rol
$LN4@rol:

; 431  :             clearCarry(&Cpu->Flags);

  0005a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005f	48 83 c0 03	 add	 rax, 3
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@rol:

; 432  :         
; 433  :         Value = Cpu->A << 1;

  0006b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00070	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00073	d1 e0		 shl	 eax, 1
  00075	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 434  :         
; 435  :         if(CarrySet)

  00079	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  0007e	85 c0		 test	 eax, eax
  00080	74 0c		 je	 SHORT $LN6@rol

; 436  :             Value = Value | 1;

  00082	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  00087	83 c8 01	 or	 eax, 1
  0008a	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN6@rol:

; 437  :         
; 438  :         Cpu->A = Value;

  0008e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00093	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00098	88 08		 mov	 BYTE PTR [rax], cl

; 439  :     }
; 440  :     else

  0009a	eb 79		 jmp	 SHORT $LN3@rol
$LN2@rol:

; 441  :     {
; 442  :         Value = readCpu8(Address, Cpu);

  0009c	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  000a1	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  000a6	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  000ab	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 443  :         if(Value & (1 << 7))

  000af	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000b4	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000b9	85 c0		 test	 eax, eax
  000bb	74 13		 je	 SHORT $LN7@rol

; 444  :             setCarry(&Cpu->Flags);

  000bd	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000c2	48 83 c0 03	 add	 rax, 3
  000c6	48 8b c8	 mov	 rcx, rax
  000c9	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 445  :         else

  000ce	eb 11		 jmp	 SHORT $LN8@rol
$LN7@rol:

; 446  :             clearCarry(&Cpu->Flags);

  000d0	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d5	48 83 c0 03	 add	 rax, 3
  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN8@rol:

; 447  :         
; 448  :         Value = Value << 1;

  000e1	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000e6	d1 e0		 shl	 eax, 1
  000e8	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 449  :         
; 450  :         if(CarrySet)

  000ec	0f b6 44 24 21	 movzx	 eax, BYTE PTR CarrySet$[rsp]
  000f1	85 c0		 test	 eax, eax
  000f3	74 0c		 je	 SHORT $LN9@rol

; 451  :             Value = Value | 1;

  000f5	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000fa	83 c8 01	 or	 eax, 1
  000fd	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al
$LN9@rol:

; 452  :         
; 453  :         writeCpu8(Value, Address, Cpu);

  00101	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00106	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0010b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00110	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@rol:

; 454  :     }
; 455  :     setZero(Value, &Cpu->Flags);

  00115	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0011a	48 83 c0 03	 add	 rax, 3
  0011e	48 8b d0	 mov	 rdx, rax
  00121	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00126	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 456  :     setNegative(Value, &Cpu->Flags);

  0012b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00130	48 83 c0 03	 add	 rax, 3
  00134	48 8b d0	 mov	 rdx, rax
  00137	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0013c	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 457  :     return(0);

  00141	32 c0		 xor	 al, al

; 458  : }

  00143	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00147	c3		 ret	 0
?rol@@YAEGPEAUcpu@@E@Z ENDP				; rol
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?plp@@YAEGPEAUcpu@@E@Z PROC				; plp

; 417  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 418  :     Cpu->Flags = pop(Cpu);

  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00022	88 41 03	 mov	 BYTE PTR [rcx+3], al

; 419  :     return(0);

  00025	32 c0		 xor	 al, al

; 420  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?plp@@YAEGPEAUcpu@@E@Z ENDP				; plp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?pla@@YAEGPEAUcpu@@E@Z PROC				; pla

; 410  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 411  :     Cpu->A = pop(Cpu); 

  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00018	e8 00 00 00 00	 call	 ?pop@@YAEPEAUcpu@@@Z	; pop
  0001d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00022	88 01		 mov	 BYTE PTR [rcx], al

; 412  :     setZero(Cpu->A, &Cpu->Flags);

  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00029	48 83 c0 03	 add	 rax, 3
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00035	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00038	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 413  :     setNegative(Cpu->A, &Cpu->Flags);

  0003d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00042	48 83 c0 03	 add	 rax, 3
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00051	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 414  :     return(0);

  00056	32 c0		 xor	 al, al

; 415  : }

  00058	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005c	c3		 ret	 0
?pla@@YAEGPEAUcpu@@E@Z ENDP				; pla
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?php@@YAEGPEAUcpu@@E@Z PROC				; php

; 403  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 404  :     setBreak(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?setBreak@@YAXPEAE@Z	; setBreak

; 405  :     setBlank(&Cpu->Flags);

  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00029	48 83 c0 03	 add	 rax, 3
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ?setBlank@@YAXPEAE@Z	; setBlank

; 406  :     push(Cpu->Flags, Cpu);

  00035	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0003a	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003f	0f b6 48 03	 movzx	 ecx, BYTE PTR [rax+3]
  00043	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 407  :     return(0);

  00048	32 c0		 xor	 al, al

; 408  : }

  0004a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004e	c3		 ret	 0
?php@@YAEGPEAUcpu@@E@Z ENDP				; php
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?pha@@YAEGPEAUcpu@@E@Z PROC				; pha

; 398  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 399  :     push(Cpu->A, Cpu);

  00013	48 8b 54 24 38	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00020	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 400  :     return(0);

  00025	32 c0		 xor	 al, al

; 401  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?pha@@YAEGPEAUcpu@@E@Z ENDP				; pha
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ora@@YAEGPEAUcpu@@E@Z PROC				; ora

; 390  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 391  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 392  :     Cpu->A = Cpu->A | Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	0b c1		 or	 eax, ecx
  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003a	88 01		 mov	 BYTE PTR [rcx], al

; 393  :     setZero(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 394  :     setNegative(Cpu->A, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00069	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 395  :     return(0);

  0006e	32 c0		 xor	 al, al

; 396  : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
?ora@@YAEGPEAUcpu@@E@Z ENDP				; ora
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?nop@@YAEGPEAUcpu@@E@Z PROC				; nop

; 386  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 387  :     return(0);

  0000f	32 c0		 xor	 al, al

; 388  : }

  00011	c3		 ret	 0
?nop@@YAEGPEAUcpu@@E@Z ENDP				; nop
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?lsr@@YAEGPEAUcpu@@E@Z PROC				; lsr

; 360  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 361  :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 362  :     if(AddressMode == ACM)

  00018	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 52		 jne	 SHORT $LN2@lsr

; 363  :     {        
; 364  :         if(Cpu->A & 1)

  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00027	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 13		 je	 SHORT $LN4@lsr

; 365  :             setCarry(&Cpu->Flags);

  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00036	48 83 c0 03	 add	 rax, 3
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 366  :         else

  00042	eb 11		 jmp	 SHORT $LN5@lsr
$LN4@lsr:

; 367  :             clearCarry(&Cpu->Flags);

  00044	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00049	48 83 c0 03	 add	 rax, 3
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@lsr:

; 368  :         Cpu->A = Cpu->A >> 1;

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005d	d1 f8		 sar	 eax, 1
  0005f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00064	88 01		 mov	 BYTE PTR [rcx], al

; 369  :         Value = Cpu->A;

  00066	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0006b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006e	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 370  :     }
; 371  :     else

  00072	eb 62		 jmp	 SHORT $LN3@lsr
$LN2@lsr:

; 372  :     {
; 373  :         Value = readCpu8(Address, Cpu);

  00074	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00079	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0007e	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00083	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 374  :         if(Value & 1)

  00087	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  0008c	83 e0 01	 and	 eax, 1
  0008f	85 c0		 test	 eax, eax
  00091	74 13		 je	 SHORT $LN6@lsr

; 375  :             setCarry(&Cpu->Flags);

  00093	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00098	48 83 c0 03	 add	 rax, 3
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 376  :         else

  000a4	eb 11		 jmp	 SHORT $LN7@lsr
$LN6@lsr:

; 377  :             clearCarry(&Cpu->Flags);

  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ab	48 83 c0 03	 add	 rax, 3
  000af	48 8b c8	 mov	 rcx, rax
  000b2	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN7@lsr:

; 378  :         Value = Value >> 1;

  000b7	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000bc	d1 f8		 sar	 eax, 1
  000be	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 379  :         writeCpu8(Value, Address, Cpu);

  000c2	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  000c7	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  000cc	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000d1	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@lsr:

; 380  :     }
; 381  :     setZero(Value, &Cpu->Flags);

  000d6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000db	48 83 c0 03	 add	 rax, 3
  000df	48 8b d0	 mov	 rdx, rax
  000e2	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000e7	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 382  :     setNegative(Value, &Cpu->Flags);

  000ec	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f1	48 83 c0 03	 add	 rax, 3
  000f5	48 8b d0	 mov	 rdx, rax
  000f8	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000fd	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 383  :     return(0);

  00102	32 c0		 xor	 al, al

; 384  : }

  00104	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00108	c3		 ret	 0
?lsr@@YAEGPEAUcpu@@E@Z ENDP				; lsr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ldy@@YAEGPEAUcpu@@E@Z PROC				; ldy

; 352  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 353  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 354  :     Cpu->Y = Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00030	88 48 02	 mov	 BYTE PTR [rax+2], cl

; 355  :     setZero(Value, &Cpu->Flags);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00038	48 83 c0 03	 add	 rax, 3
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00044	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 356  :     setNegative(Value, &Cpu->Flags);

  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	48 83 c0 03	 add	 rax, 3
  00052	48 8b d0	 mov	 rdx, rax
  00055	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0005a	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 357  :     return(0);

  0005f	32 c0		 xor	 al, al

; 358  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
?ldy@@YAEGPEAUcpu@@E@Z ENDP				; ldy
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?ldx@@YAEGPEAUcpu@@E@Z PROC				; ldx

; 344  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 345  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 346  :     Cpu->X = Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00030	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 347  :     setZero(Value, &Cpu->Flags);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00038	48 83 c0 03	 add	 rax, 3
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00044	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 348  :     setNegative(Value, &Cpu->Flags);

  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004e	48 83 c0 03	 add	 rax, 3
  00052	48 8b d0	 mov	 rdx, rax
  00055	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0005a	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 349  :     return(0);

  0005f	32 c0		 xor	 al, al

; 350  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
?ldx@@YAEGPEAUcpu@@E@Z ENDP				; ldx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?lda@@YAEGPEAUcpu@@E@Z PROC				; lda

; 336  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 337  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 338  :     Cpu->A = Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00030	88 08		 mov	 BYTE PTR [rax], cl

; 339  :     setZero(Value, &Cpu->Flags);

  00032	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	48 83 c0 03	 add	 rax, 3
  0003b	48 8b d0	 mov	 rdx, rax
  0003e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00043	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 340  :     setNegative(Value, &Cpu->Flags);

  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	48 83 c0 03	 add	 rax, 3
  00051	48 8b d0	 mov	 rdx, rax
  00054	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00059	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 341  :     return(0);

  0005e	32 c0		 xor	 al, al

; 342  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
?lda@@YAEGPEAUcpu@@E@Z ENDP				; lda
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
ReturnAddress$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?jsr@@YAEGPEAUcpu@@E@Z PROC				; jsr

; 324  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 325  :     uint16 ReturnAddress = Cpu->PrgCounter - 1;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0001c	ff c8		 dec	 eax
  0001e	66 89 44 24 24	 mov	 WORD PTR ReturnAddress$[rsp], ax

; 326  :     uint8 HighByte = (uint8)(ReturnAddress >> 8);

  00023	0f b7 44 24 24	 movzx	 eax, WORD PTR ReturnAddress$[rsp]
  00028	c1 f8 08	 sar	 eax, 8
  0002b	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 327  :     uint8 LowByte = (uint8)ReturnAddress; 

  0002f	0f b6 44 24 24	 movzx	 eax, BYTE PTR ReturnAddress$[rsp]
  00034	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 328  : 
; 329  :     push(HighByte, Cpu);

  00038	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0003d	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR HighByte$[rsp]
  00042	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 330  :     push(LowByte, Cpu);

  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0004c	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00051	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 331  : 
; 332  :     Cpu->PrgCounter = Address;

  00056	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005b	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00060	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 333  :     return(0);

  00064	32 c0		 xor	 al, al

; 334  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
?jsr@@YAEGPEAUcpu@@E@Z ENDP				; jsr
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 8
Cpu$ = 16
AddressMode$ = 24
?jmp@@YAEGPEAUcpu@@E@Z PROC				; jmp

; 319  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 320  :     Cpu->PrgCounter = Address;

  0000f	48 8b 44 24 10	 mov	 rax, QWORD PTR Cpu$[rsp]
  00014	0f b7 4c 24 08	 movzx	 ecx, WORD PTR Address$[rsp]
  00019	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 321  :     return(0);

  0001d	32 c0		 xor	 al, al

; 322  : }

  0001f	c3		 ret	 0
?jmp@@YAEGPEAUcpu@@E@Z ENDP				; jmp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?iny@@YAEGPEAUcpu@@E@Z PROC				; iny

; 312  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 313  :     ++Cpu->Y;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0001c	fe c0		 inc	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 314  :     setZero(Cpu->Y, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 315  :     setNegative(Cpu->Y, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 316  :     return(0);

  0005a	32 c0		 xor	 al, al

; 317  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?iny@@YAEGPEAUcpu@@E@Z ENDP				; iny
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?inx@@YAEGPEAUcpu@@E@Z PROC				; inx

; 305  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 306  :     ++Cpu->X;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0001c	fe c0		 inc	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 307  :     setZero(Cpu->X, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 308  :     setNegative(Cpu->X, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 309  :     return(0);

  0005a	32 c0		 xor	 al, al

; 310  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?inx@@YAEGPEAUcpu@@E@Z ENDP				; inx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?inc@@YAEGPEAUcpu@@E@Z PROC				; inc

; 297  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 298  :     uint8 Value = readCpu8(Address, Cpu) + 1;

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	0f b6 c0	 movzx	 eax, al
  00025	ff c0		 inc	 eax
  00027	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 299  :     writeCpu8(Value, Address, Cpu);

  0002b	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00030	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0003a	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 300  :     setZero(Value, &Cpu->Flags);

  0003f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00044	48 83 c0 03	 add	 rax, 3
  00048	48 8b d0	 mov	 rdx, rax
  0004b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 301  :     setNegative(Value, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00066	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 302  :     return(0);

  0006b	32 c0		 xor	 al, al

; 303  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
?inc@@YAEGPEAUcpu@@E@Z ENDP				; inc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?eor@@YAEGPEAUcpu@@E@Z PROC				; eor

; 289  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 290  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 291  :     Cpu->A = Cpu->A ^ Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	33 c1		 xor	 eax, ecx
  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003a	88 01		 mov	 BYTE PTR [rcx], al

; 292  :     setZero(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 293  :     setNegative(Cpu->A, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00069	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 294  :     return(0);

  0006e	32 c0		 xor	 al, al

; 295  : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
?eor@@YAEGPEAUcpu@@E@Z ENDP				; eor
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?dey@@YAEGPEAUcpu@@E@Z PROC				; dey

; 282  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 283  :     --Cpu->Y;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0001c	fe c8		 dec	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 284  :     setZero(Cpu->Y, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 285  :     setNegative(Cpu->Y, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 02	 movzx	 ecx, BYTE PTR [rax+2]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 286  :     return(0);

  0005a	32 c0		 xor	 al, al

; 287  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?dey@@YAEGPEAUcpu@@E@Z ENDP				; dey
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?dex@@YAEGPEAUcpu@@E@Z PROC				; dex

; 275  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 276  :     --Cpu->X;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0001c	fe c8		 dec	 al
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00023	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 277  :     setZero(Cpu->X, &Cpu->Flags);

  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	48 83 c0 03	 add	 rax, 3
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  0003b	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 278  :     setNegative(Cpu->X, &Cpu->Flags);

  00040	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00045	48 83 c0 03	 add	 rax, 3
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00051	0f b6 48 01	 movzx	 ecx, BYTE PTR [rax+1]
  00055	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 279  :     return(0);

  0005a	32 c0		 xor	 al, al

; 280  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
?dex@@YAEGPEAUcpu@@E@Z ENDP				; dex
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?dec@@YAEGPEAUcpu@@E@Z PROC				; dec

; 267  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 268  :     uint8 Value = readCpu8(Address, Cpu) - 1;

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	0f b6 c0	 movzx	 eax, al
  00025	ff c8		 dec	 eax
  00027	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 269  :     writeCpu8(Value, Address, Cpu);

  0002b	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  00030	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0003a	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 270  :     setZero(Value, &Cpu->Flags);

  0003f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00044	48 83 c0 03	 add	 rax, 3
  00048	48 8b d0	 mov	 rdx, rax
  0004b	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 271  :     setNegative(Value, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00066	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 272  :     return(0);

  0006b	32 c0		 xor	 al, al

; 273  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
?dec@@YAEGPEAUcpu@@E@Z ENDP				; dec
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CmpValue$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?cpy@@YAEGPEAUcpu@@E@Z PROC				; cpy

; 253  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 254  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 255  : 
; 256  :     if(Cpu->Y >= Value)

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0002f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00034	3b c1		 cmp	 eax, ecx
  00036	7c 13		 jl	 SHORT $LN2@cpy

; 257  :         setCarry(&Cpu->Flags);

  00038	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003d	48 83 c0 03	 add	 rax, 3
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 258  :     else

  00049	eb 11		 jmp	 SHORT $LN3@cpy
$LN2@cpy:

; 259  :         clearCarry(&Cpu->Flags);

  0004b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00050	48 83 c0 03	 add	 rax, 3
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@cpy:

; 260  :     
; 261  :     uint8 CmpValue = Cpu->Y - Value;

  0005c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00061	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00065	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0006a	2b c1		 sub	 eax, ecx
  0006c	88 44 24 21	 mov	 BYTE PTR CmpValue$[rsp], al

; 262  :     setZero(CmpValue, &Cpu->Flags);

  00070	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00075	48 83 c0 03	 add	 rax, 3
  00079	48 8b d0	 mov	 rdx, rax
  0007c	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00081	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 263  :     setNegative(CmpValue, &Cpu->Flags);

  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0008b	48 83 c0 03	 add	 rax, 3
  0008f	48 8b d0	 mov	 rdx, rax
  00092	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00097	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 264  :     return(0);

  0009c	32 c0		 xor	 al, al

; 265  : }

  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
?cpy@@YAEGPEAUcpu@@E@Z ENDP				; cpy
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CmpValue$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?cpx@@YAEGPEAUcpu@@E@Z PROC				; cpx

; 239  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 240  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 241  : 
; 242  :     if(Cpu->X >= Value)

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0002f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00034	3b c1		 cmp	 eax, ecx
  00036	7c 13		 jl	 SHORT $LN2@cpx

; 243  :         setCarry(&Cpu->Flags);

  00038	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003d	48 83 c0 03	 add	 rax, 3
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 244  :     else

  00049	eb 11		 jmp	 SHORT $LN3@cpx
$LN2@cpx:

; 245  :         clearCarry(&Cpu->Flags);

  0004b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00050	48 83 c0 03	 add	 rax, 3
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@cpx:

; 246  :     
; 247  :     uint8 CmpValue = Cpu->X - Value;

  0005c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00061	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00065	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0006a	2b c1		 sub	 eax, ecx
  0006c	88 44 24 21	 mov	 BYTE PTR CmpValue$[rsp], al

; 248  :     setZero(CmpValue, &Cpu->Flags);

  00070	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00075	48 83 c0 03	 add	 rax, 3
  00079	48 8b d0	 mov	 rdx, rax
  0007c	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00081	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 249  :     setNegative(CmpValue, &Cpu->Flags);

  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0008b	48 83 c0 03	 add	 rax, 3
  0008f	48 8b d0	 mov	 rdx, rax
  00092	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00097	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 250  :     return(0);

  0009c	32 c0		 xor	 al, al

; 251  : }

  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
?cpx@@YAEGPEAUcpu@@E@Z ENDP				; cpx
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
CmpValue$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?cmp@@YAEGPEAUcpu@@E@Z PROC				; cmp

; 225  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 226  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 227  : 
; 228  :     if(Cpu->A >= Value)

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	3b c1		 cmp	 eax, ecx
  00035	7c 13		 jl	 SHORT $LN2@cmp

; 229  :         setCarry(&Cpu->Flags);

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0003c	48 83 c0 03	 add	 rax, 3
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 230  :     else

  00048	eb 11		 jmp	 SHORT $LN3@cmp
$LN2@cmp:

; 231  :         clearCarry(&Cpu->Flags);

  0004a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004f	48 83 c0 03	 add	 rax, 3
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN3@cmp:

; 232  :     
; 233  :     uint8 CmpValue = Cpu->A - Value;

  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00060	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00063	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00068	2b c1		 sub	 eax, ecx
  0006a	88 44 24 21	 mov	 BYTE PTR CmpValue$[rsp], al

; 234  :     setZero(CmpValue, &Cpu->Flags);

  0006e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00073	48 83 c0 03	 add	 rax, 3
  00077	48 8b d0	 mov	 rdx, rax
  0007a	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  0007f	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 235  :     setNegative(CmpValue, &Cpu->Flags);

  00084	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00089	48 83 c0 03	 add	 rax, 3
  0008d	48 8b d0	 mov	 rdx, rax
  00090	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR CmpValue$[rsp]
  00095	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 236  :     return(0);

  0009a	32 c0		 xor	 al, al

; 237  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
?cmp@@YAEGPEAUcpu@@E@Z ENDP				; cmp
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?clv@@YAEGPEAUcpu@@E@Z PROC				; clv

; 220  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 221  :     clearOverflow(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow

; 222  :     return(0);

  00024	32 c0		 xor	 al, al

; 223  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?clv@@YAEGPEAUcpu@@E@Z ENDP				; clv
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?cli@@YAEGPEAUcpu@@E@Z PROC				; cli

; 215  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     clearInterrupt(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearInterrupt@@YAXPEAE@Z ; clearInterrupt

; 217  :     return(0);

  00024	32 c0		 xor	 al, al

; 218  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?cli@@YAEGPEAUcpu@@E@Z ENDP				; cli
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?cld@@YAEGPEAUcpu@@E@Z PROC				; cld

; 210  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 211  :     clearDecimal(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearDecimal@@YAXPEAE@Z ; clearDecimal

; 212  :     return(0);

  00024	32 c0		 xor	 al, al

; 213  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?cld@@YAEGPEAUcpu@@E@Z ENDP				; cld
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Address$ = 48
Cpu$ = 56
AddressMode$ = 64
?clc@@YAEGPEAUcpu@@E@Z PROC				; clc

; 205  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 206  :     clearCarry(&Cpu->Flags);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	48 83 c0 03	 add	 rax, 3
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry

; 207  :     return(0);

  00024	32 c0		 xor	 al, al

; 208  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?clc@@YAEGPEAUcpu@@E@Z ENDP				; clc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bvs@@YAEGPEAUcpu@@E@Z PROC				; bvs

; 192  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 193  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 194  :     if(isBitSet(OVERFLOW_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 40		 mov	 cl, 64			; 00000040H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@bvs

; 195  :     {
; 196  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 197  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bvs

; 198  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bvs:

; 199  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bvs:

; 200  :     }   
; 201  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 202  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bvs@@YAEGPEAUcpu@@E@Z ENDP				; bvs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bvc@@YAEGPEAUcpu@@E@Z PROC				; bvc

; 179  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 180  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 181  :     if(!isBitSet(OVERFLOW_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 40		 mov	 cl, 64			; 00000040H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3b		 jne	 SHORT $LN2@bvc

; 182  :     {
; 183  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 184  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bvc

; 185  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bvc:

; 186  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bvc:

; 187  :     }   
; 188  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 189  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bvc@@YAEGPEAUcpu@@E@Z ENDP				; bvc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?brk@@YAEGPEAUcpu@@E@Z PROC				; brk

; 163  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 164  :     uint8 HighByte = (uint8)(Cpu->PrgCounter >> 8);

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0001c	c1 f8 08	 sar	 eax, 8
  0001f	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 165  :     uint8 LowByte = (uint8)Cpu->PrgCounter; 

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00028	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  0002c	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 166  :     push(HighByte, Cpu);

  00030	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00035	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR HighByte$[rsp]
  0003a	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 167  :     push(LowByte, Cpu);

  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00044	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00049	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 168  : 
; 169  :     setBlank(&Cpu->Flags);

  0004e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00053	48 83 c0 03	 add	 rax, 3
  00057	48 8b c8	 mov	 rcx, rax
  0005a	e8 00 00 00 00	 call	 ?setBlank@@YAXPEAE@Z	; setBlank

; 170  :     setBreak(&Cpu->Flags);

  0005f	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00064	48 83 c0 03	 add	 rax, 3
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?setBreak@@YAXPEAE@Z	; setBreak

; 171  :     push(Cpu->Flags, Cpu);

  00070	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00075	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0007a	0f b6 48 03	 movzx	 ecx, BYTE PTR [rax+3]
  0007e	e8 00 00 00 00	 call	 ?push@@YAXEPEAUcpu@@@Z	; push

; 172  :     setInterrupt(&Cpu->Flags);

  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00088	48 83 c0 03	 add	 rax, 3
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 ?setInterrupt@@YAXPEAE@Z ; setInterrupt

; 173  : 
; 174  :     Cpu->PrgCounter = readCpu16(IRQ_BRK_VEC, Cpu);

  00094	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00099	66 b9 fe ff	 mov	 cx, 65534		; 0000fffeH
  0009d	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  000a2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  000a7	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 175  :     return(0);

  000ab	32 c0		 xor	 al, al

; 176  : }

  000ad	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b1	c3		 ret	 0
?brk@@YAEGPEAUcpu@@E@Z ENDP				; brk
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bpl@@YAEGPEAUcpu@@E@Z PROC				; bpl

; 150  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 151  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 152  :     if(!isBitSet(NEGATIVE_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 80		 mov	 cl, 128			; 00000080H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3b		 jne	 SHORT $LN2@bpl

; 153  :     {
; 154  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 155  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bpl

; 156  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bpl:

; 157  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bpl:

; 158  :     }   
; 159  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 160  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bpl@@YAEGPEAUcpu@@E@Z ENDP				; bpl
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bne@@YAEGPEAUcpu@@E@Z PROC				; bne

; 137  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 138  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 139  :     if(!isBitSet(ZERO_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 02		 mov	 cl, 2
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3b		 jne	 SHORT $LN2@bne

; 140  :     {
; 141  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 142  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bne

; 143  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bne:

; 144  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bne:

; 145  :     }   
; 146  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 147  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bne@@YAEGPEAUcpu@@E@Z ENDP				; bne
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bmi@@YAEGPEAUcpu@@E@Z PROC				; bmi

; 124  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 125  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 126  :     if(isBitSet(NEGATIVE_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 80		 mov	 cl, 128			; 00000080H
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@bmi

; 127  :     {
; 128  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 129  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bmi

; 130  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bmi:

; 131  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bmi:

; 132  :     }   
; 133  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 134  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bmi@@YAEGPEAUcpu@@E@Z ENDP				; bmi
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bit@@YAEGPEAUcpu@@E@Z PROC				; bit

; 112  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 113  :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 114  :     if(Value & (1 << 6))

  00026	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  0002b	83 e0 40	 and	 eax, 64			; 00000040H
  0002e	85 c0		 test	 eax, eax
  00030	74 13		 je	 SHORT $LN2@bit

; 115  :         setOverflow(&Cpu->Flags);

  00032	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	48 83 c0 03	 add	 rax, 3
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 116  :     else

  00043	eb 11		 jmp	 SHORT $LN3@bit
$LN2@bit:

; 117  :         clearOverflow(&Cpu->Flags);

  00045	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004a	48 83 c0 03	 add	 rax, 3
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN3@bit:

; 118  :     setNegative(Value, &Cpu->Flags);

  00056	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005b	48 83 c0 03	 add	 rax, 3
  0005f	48 8b d0	 mov	 rdx, rax
  00062	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00067	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 119  :     setZero(Cpu->A & Value, &Cpu->Flags);

  0006c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00071	48 83 c0 03	 add	 rax, 3
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0007a	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0007d	0f b6 54 24 20	 movzx	 edx, BYTE PTR Value$[rsp]
  00082	23 ca		 and	 ecx, edx
  00084	48 8b d0	 mov	 rdx, rax
  00087	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 120  :     return(0);

  0008c	32 c0		 xor	 al, al

; 121  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
?bit@@YAEGPEAUcpu@@E@Z ENDP				; bit
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?beq@@YAEGPEAUcpu@@E@Z PROC				; beq

; 99   : {   

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 100  :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 101  :     if(isBitSet(ZERO_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 02		 mov	 cl, 2
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@beq

; 102  :     {
; 103  :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 104  :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@beq

; 105  :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@beq:

; 106  :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@beq:

; 107  :     }   
; 108  :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 109  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?beq@@YAEGPEAUcpu@@E@Z ENDP				; beq
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bcs@@YAEGPEAUcpu@@E@Z PROC				; bcs

; 87   : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 88   :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 89   :     if(isBitSet(CARRY_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	74 3b		 je	 SHORT $LN2@bcs

; 90   :     {
; 91   :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 92   :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN3@bcs

; 93   :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN3@bcs:

; 94   :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx
$LN2@bcs:

; 95   :     }   
; 96   :     return(AddCycles);    

  00067	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 97   : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
?bcs@@YAEGPEAUcpu@@E@Z ENDP				; bcs
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
AddCycles$ = 32
Test$1 = 33
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?bcc@@YAEGPEAUcpu@@E@Z PROC				; bcc

; 71   : {

$LN6:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 72   :     uint8 AddCycles = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR AddCycles$[rsp], 0

; 73   :     
; 74   :     if(!isBitSet(CARRY_BIT, Cpu->Flags))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0001d	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  00021	b1 01		 mov	 cl, 1
  00023	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00028	85 c0		 test	 eax, eax
  0002a	75 3d		 jne	 SHORT $LN2@bcc

; 75   :     {
; 76   :         ++AddCycles;

  0002c	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al

; 77   :         if(crossedPageCheck(Cpu->PrgCounter, Address))

  00037	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00045	e8 00 00 00 00	 call	 ?crossedPageCheck@@YAHGG@Z ; crossedPageCheck
  0004a	85 c0		 test	 eax, eax
  0004c	74 0b		 je	 SHORT $LN4@bcc

; 78   :             ++AddCycles;

  0004e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]
  00053	fe c0		 inc	 al
  00055	88 44 24 20	 mov	 BYTE PTR AddCycles$[rsp], al
$LN4@bcc:

; 79   :         Cpu->PrgCounter = Address;

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00063	66 89 48 06	 mov	 WORD PTR [rax+6], cx

; 80   :     }
; 81   :     else

  00067	eb 05		 jmp	 SHORT $LN3@bcc
$LN2@bcc:

; 82   :         uint8 Test =0;

  00069	c6 44 24 21 00	 mov	 BYTE PTR Test$1[rsp], 0
$LN3@bcc:

; 83   :     return(AddCycles);

  0006e	0f b6 44 24 20	 movzx	 eax, BYTE PTR AddCycles$[rsp]

; 84   : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
?bcc@@YAEGPEAUcpu@@E@Z ENDP				; bcc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?asl@@YAEGPEAUcpu@@E@Z PROC				; asl

; 44   : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 45   :     uint8 Value = 0;

  00013	c6 44 24 20 00	 mov	 BYTE PTR Value$[rsp], 0

; 46   :     if(AddressMode == ACM)

  00018	0f b6 44 24 50	 movzx	 eax, BYTE PTR AddressMode$[rsp]
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 51		 jne	 SHORT $LN2@asl

; 47   :     {        
; 48   :         if(Cpu->A & (1 << 7))

  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00027	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002a	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0002f	85 c0		 test	 eax, eax
  00031	74 13		 je	 SHORT $LN4@asl

; 49   :             setCarry(&Cpu->Flags);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00038	48 83 c0 03	 add	 rax, 3
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 50   :         else

  00044	eb 11		 jmp	 SHORT $LN5@asl
$LN4@asl:

; 51   :             clearCarry(&Cpu->Flags);

  00046	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004b	48 83 c0 03	 add	 rax, 3
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@asl:

; 52   :         Value = Cpu->A << 1;

  00057	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005f	d1 e0		 shl	 eax, 1
  00061	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 53   :         Cpu->A = Value;

  00065	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0006a	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  0006f	88 08		 mov	 BYTE PTR [rax], cl

; 54   :     }
; 55   :     else

  00071	eb 64		 jmp	 SHORT $LN3@asl
$LN2@asl:

; 56   :     {
; 57   :         Value = readCpu8(Address, Cpu);

  00073	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00078	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0007d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00082	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 58   :         if(Value & (1 << 7))

  00086	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  0008b	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00090	85 c0		 test	 eax, eax
  00092	74 13		 je	 SHORT $LN6@asl

; 59   :             setCarry(&Cpu->Flags);

  00094	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00099	48 83 c0 03	 add	 rax, 3
  0009d	48 8b c8	 mov	 rcx, rax
  000a0	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 60   :         else

  000a5	eb 11		 jmp	 SHORT $LN7@asl
$LN6@asl:

; 61   :             clearCarry(&Cpu->Flags);

  000a7	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ac	48 83 c0 03	 add	 rax, 3
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN7@asl:

; 62   :         Value = Value << 1;

  000b8	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]
  000bd	d1 e0		 shl	 eax, 1
  000bf	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 63   :         writeCpu8(Value, Address, Cpu);

  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR Cpu$[rsp]
  000c8	0f b7 54 24 40	 movzx	 edx, WORD PTR Address$[rsp]
  000cd	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000d2	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8
$LN3@asl:

; 64   :     }
; 65   :     setZero(Value, &Cpu->Flags);

  000d7	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000dc	48 83 c0 03	 add	 rax, 3
  000e0	48 8b d0	 mov	 rdx, rax
  000e3	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000e8	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 66   :     setNegative(Value, &Cpu->Flags);

  000ed	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f2	48 83 c0 03	 add	 rax, 3
  000f6	48 8b d0	 mov	 rdx, rax
  000f9	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  000fe	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 67   :     return(0);

  00103	32 c0		 xor	 al, al

; 68   : }

  00105	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00109	c3		 ret	 0
?asl@@YAEGPEAUcpu@@E@Z ENDP				; asl
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
Value$ = 32
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?AND@@YAEGPEAUcpu@@E@Z PROC				; AND

; 35   : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 36   :     uint8 Value = readCpu8(Address, Cpu);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00018	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0001d	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00022	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 37   :     Cpu->A = Cpu->A & Value;

  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Value$[rsp]
  00033	23 c1		 and	 eax, ecx
  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003a	88 01		 mov	 BYTE PTR [rcx], al

; 38   :     setZero(Cpu->A, &Cpu->Flags);

  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00041	48 83 c0 03	 add	 rax, 3
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0004d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00050	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 39   :     setNegative(Cpu->A, &Cpu->Flags);

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0005a	48 83 c0 03	 add	 rax, 3
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00066	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00069	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 40   :     return(0);

  0006e	32 c0		 xor	 al, al

; 41   : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
?AND@@YAEGPEAUcpu@@E@Z ENDP				; AND
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\operations.cpp
_TEXT	SEGMENT
A$ = 32
B$ = 33
C$ = 34
Sum$ = 36
Address$ = 64
Cpu$ = 72
AddressMode$ = 80
?adc@@YAEGPEAUcpu@@E@Z PROC				; adc

; 9    : {

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 10   :     uint8 A = Cpu->A;

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00018	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001b	88 44 24 20	 mov	 BYTE PTR A$[rsp], al

; 11   :     uint8 B = readCpu8(Address, Cpu);

  0001f	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00024	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00029	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0002e	88 44 24 21	 mov	 BYTE PTR B$[rsp], al

; 12   :     uint8 C = isBitSet(CARRY_BIT, Cpu->Flags);

  00032	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00037	0f b6 50 03	 movzx	 edx, BYTE PTR [rax+3]
  0003b	b1 01		 mov	 cl, 1
  0003d	e8 00 00 00 00	 call	 ?isBitSet@@YAHEE@Z	; isBitSet
  00042	88 44 24 22	 mov	 BYTE PTR C$[rsp], al

; 13   : 
; 14   :     uint16 Sum = (uint16)A + (uint16)B + (uint16)C;

  00046	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  0004b	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  00050	03 c1		 add	 eax, ecx
  00052	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR C$[rsp]
  00057	03 c1		 add	 eax, ecx
  00059	66 89 44 24 24	 mov	 WORD PTR Sum$[rsp], ax

; 15   : 
; 16   :     // Overflow check, taken from the web. One day find out how this works
; 17   :     if(((A ^ Sum) & (B ^ Sum) & 0x80) == 0x80)

  0005e	0f b6 44 24 20	 movzx	 eax, BYTE PTR A$[rsp]
  00063	0f b7 4c 24 24	 movzx	 ecx, WORD PTR Sum$[rsp]
  00068	33 c1		 xor	 eax, ecx
  0006a	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR B$[rsp]
  0006f	0f b7 54 24 24	 movzx	 edx, WORD PTR Sum$[rsp]
  00074	33 ca		 xor	 ecx, edx
  00076	23 c1		 and	 eax, ecx
  00078	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0007d	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00082	75 13		 jne	 SHORT $LN2@adc

; 18   :         setOverflow(&Cpu->Flags);

  00084	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00089	48 83 c0 03	 add	 rax, 3
  0008d	48 8b c8	 mov	 rcx, rax
  00090	e8 00 00 00 00	 call	 ?setOverflow@@YAXPEAE@Z	; setOverflow

; 19   :     else

  00095	eb 11		 jmp	 SHORT $LN3@adc
$LN2@adc:

; 20   :         clearOverflow(&Cpu->Flags);

  00097	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0009c	48 83 c0 03	 add	 rax, 3
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	e8 00 00 00 00	 call	 ?clearOverflow@@YAXPEAE@Z ; clearOverflow
$LN3@adc:

; 21   : 
; 22   :     if(Sum & 0x100)

  000a8	0f b7 44 24 24	 movzx	 eax, WORD PTR Sum$[rsp]
  000ad	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000b2	85 c0		 test	 eax, eax
  000b4	74 13		 je	 SHORT $LN4@adc

; 23   :         setCarry(&Cpu->Flags);

  000b6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000bb	48 83 c0 03	 add	 rax, 3
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	e8 00 00 00 00	 call	 ?setCarry@@YAXPEAE@Z	; setCarry

; 24   :     else

  000c7	eb 11		 jmp	 SHORT $LN5@adc
$LN4@adc:

; 25   :         clearCarry(&Cpu->Flags);

  000c9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ce	48 83 c0 03	 add	 rax, 3
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ?clearCarry@@YAXPEAE@Z	; clearCarry
$LN5@adc:

; 26   : 
; 27   :     setZero(Sum, &Cpu->Flags);

  000da	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000df	48 83 c0 03	 add	 rax, 3
  000e3	48 8b d0	 mov	 rdx, rax
  000e6	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  000eb	e8 00 00 00 00	 call	 ?setZero@@YAXEPEAE@Z	; setZero

; 28   :     setNegative(Sum, &Cpu->Flags);

  000f0	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f5	48 83 c0 03	 add	 rax, 3
  000f9	48 8b d0	 mov	 rdx, rax
  000fc	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00101	e8 00 00 00 00	 call	 ?setNegative@@YAXEPEAE@Z ; setNegative

; 29   : 
; 30   :     Cpu->A = (uint8)Sum;

  00106	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0010b	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR Sum$[rsp]
  00110	88 08		 mov	 BYTE PTR [rax], cl

; 31   :     return(0);

  00112	32 c0		 xor	 al, al

; 32   : }

  00114	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00118	c3		 ret	 0
?adc@@YAEGPEAUcpu@@E@Z ENDP				; adc
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?crossedPageCheck@@YAHGG@Z
_TEXT	SEGMENT
tv69 = 0
Before$ = 32
Now$ = 40
?crossedPageCheck@@YAHGG@Z PROC				; crossedPageCheck, COMDAT

; 49   : inline bool32 crossedPageCheck(uint16 Before, uint16 Now) { return((Before & 0xFF00) != (Now & 0xFF00));}

$LN5:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 18	 sub	 rsp, 24
  0000e	0f b7 44 24 20	 movzx	 eax, WORD PTR Before$[rsp]
  00013	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00018	0f b7 4c 24 28	 movzx	 ecx, WORD PTR Now$[rsp]
  0001d	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00023	3b c1		 cmp	 eax, ecx
  00025	74 09		 je	 SHORT $LN3@crossedPag
  00027	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv69[rsp], 1
  0002e	eb 07		 jmp	 SHORT $LN4@crossedPag
$LN3@crossedPag:
  00030	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
$LN4@crossedPag:
  00037	8b 04 24	 mov	 eax, DWORD PTR tv69[rsp]
  0003a	48 83 c4 18	 add	 rsp, 24
  0003e	c3		 ret	 0
?crossedPageCheck@@YAHGG@Z ENDP				; crossedPageCheck
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?isBitSet@@YAHEE@Z
_TEXT	SEGMENT
Bit$ = 8
Flags$ = 16
?isBitSet@@YAHEE@Z PROC					; isBitSet, COMDAT

; 48   : inline bool32 isBitSet(uint8 Bit, uint8 Flags) { return(Bit & Flags); }

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00008	0f b6 44 24 08	 movzx	 eax, BYTE PTR Bit$[rsp]
  0000d	0f b6 4c 24 10	 movzx	 ecx, BYTE PTR Flags$[rsp]
  00012	23 c1		 and	 eax, ecx
  00014	c3		 ret	 0
?isBitSet@@YAHEE@Z ENDP					; isBitSet
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setNegative@@YAXEPEAE@Z
_TEXT	SEGMENT
Value$ = 8
Flags$ = 16
?setNegative@@YAXEPEAE@Z PROC				; setNegative, COMDAT

; 42   : {  

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 43   :     if(Value >= 0x00 && Value <= 0x7F)

  00009	0f b6 44 24 08	 movzx	 eax, BYTE PTR Value$[rsp]
  0000e	85 c0		 test	 eax, eax
  00010	7c 1f		 jl	 SHORT $LN2@setNegativ
  00012	0f b6 44 24 08	 movzx	 eax, BYTE PTR Value$[rsp]
  00017	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0001a	7f 15		 jg	 SHORT $LN2@setNegativ

; 44   :         *Flags = *Flags & ~NEGATIVE_BIT; // clear negative flag

  0001c	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  00021	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00024	0f ba f0 07	 btr	 eax, 7
  00028	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  0002d	88 01		 mov	 BYTE PTR [rcx], al

; 45   :     else

  0002f	eb 13		 jmp	 SHORT $LN3@setNegativ
$LN2@setNegativ:

; 46   :         *Flags = *Flags | NEGATIVE_BIT; // set negative flag

  00031	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  00036	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00039	0f ba e8 07	 bts	 eax, 7
  0003d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  00042	88 01		 mov	 BYTE PTR [rcx], al
$LN3@setNegativ:

; 47   : }

  00044	c3		 ret	 0
?setNegative@@YAXEPEAE@Z ENDP				; setNegative
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setZero@@YAXEPEAE@Z
_TEXT	SEGMENT
Value$ = 8
Flags$ = 16
?setZero@@YAXEPEAE@Z PROC				; setZero, COMDAT

; 35   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 36   :     if(Value == 0x00)

  00009	0f b6 44 24 08	 movzx	 eax, BYTE PTR Value$[rsp]
  0000e	85 c0		 test	 eax, eax
  00010	75 14		 jne	 SHORT $LN2@setZero

; 37   :         *Flags = *Flags | ZERO_BIT;

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  00017	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0001a	83 c8 02	 or	 eax, 2
  0001d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  00022	88 01		 mov	 BYTE PTR [rcx], al

; 38   :     else

  00024	eb 12		 jmp	 SHORT $LN3@setZero
$LN2@setZero:

; 39   :         *Flags = *Flags & ~ZERO_BIT;

  00026	48 8b 44 24 10	 mov	 rax, QWORD PTR Flags$[rsp]
  0002b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0002e	83 e0 fd	 and	 eax, -3
  00031	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Flags$[rsp]
  00036	88 01		 mov	 BYTE PTR [rcx], al
$LN3@setZero:

; 40   : }

  00038	c3		 ret	 0
?setZero@@YAXEPEAE@Z ENDP				; setZero
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearOverflow@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearOverflow@@YAXPEAE@Z PROC				; clearOverflow, COMDAT

; 33   : inline void clearOverflow(uint8 *Flags)  { *Flags = *Flags & ~OVERFLOW_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearOverflow@@YAXPEAE@Z ENDP				; clearOverflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setOverflow@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setOverflow@@YAXPEAE@Z PROC				; setOverflow, COMDAT

; 32   : inline void setOverflow(uint8 *Flags)    { *Flags = *Flags | OVERFLOW_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 40	 or	 eax, 64			; 00000040H
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setOverflow@@YAXPEAE@Z ENDP				; setOverflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setBlank@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setBlank@@YAXPEAE@Z PROC				; setBlank, COMDAT

; 30   : inline void setBlank(uint8 *Flags)       { *Flags = *Flags | BLANK_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 20	 or	 eax, 32			; 00000020H
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setBlank@@YAXPEAE@Z ENDP				; setBlank
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearBreak@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearBreak@@YAXPEAE@Z PROC				; clearBreak, COMDAT

; 29   : inline void clearBreak(uint8 *Flags)     { *Flags = *Flags & ~BREAK_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 ef	 and	 eax, -17
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearBreak@@YAXPEAE@Z ENDP				; clearBreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setBreak@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setBreak@@YAXPEAE@Z PROC				; setBreak, COMDAT

; 28   : inline void setBreak(uint8 *Flags)       { *Flags = *Flags | BREAK_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 10	 or	 eax, 16
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setBreak@@YAXPEAE@Z ENDP				; setBreak
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearDecimal@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearDecimal@@YAXPEAE@Z PROC				; clearDecimal, COMDAT

; 27   : inline void clearDecimal(uint8 *Flags)   { *Flags = *Flags & ~DECIMAL_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 f7	 and	 eax, -9
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearDecimal@@YAXPEAE@Z ENDP				; clearDecimal
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setDecimal@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setDecimal@@YAXPEAE@Z PROC				; setDecimal, COMDAT

; 26   : inline void setDecimal(uint8 *Flags)     { *Flags = *Flags | DECIMAL_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 08	 or	 eax, 8
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setDecimal@@YAXPEAE@Z ENDP				; setDecimal
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearInterrupt@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearInterrupt@@YAXPEAE@Z PROC				; clearInterrupt, COMDAT

; 25   : inline void clearInterrupt(uint8 *Flags) { *Flags = *Flags & ~INTERRUPT_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 fb	 and	 eax, -5
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearInterrupt@@YAXPEAE@Z ENDP				; clearInterrupt
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setInterrupt@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setInterrupt@@YAXPEAE@Z PROC				; setInterrupt, COMDAT

; 24   : inline void setInterrupt(uint8 *Flags)   { *Flags = *Flags | INTERRUPT_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 04	 or	 eax, 4
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setInterrupt@@YAXPEAE@Z ENDP				; setInterrupt
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?clearCarry@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?clearCarry@@YAXPEAE@Z PROC				; clearCarry, COMDAT

; 23   : inline void clearCarry(uint8 *Flags)     { *Flags = *Flags & ~CARRY_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 e0 fe	 and	 eax, -2
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?clearCarry@@YAXPEAE@Z ENDP				; clearCarry
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
;	COMDAT ?setCarry@@YAXPEAE@Z
_TEXT	SEGMENT
Flags$ = 8
?setCarry@@YAXPEAE@Z PROC				; setCarry, COMDAT

; 22   : inline void setCarry(uint8 *Flags)       { *Flags = *Flags | CARRY_BIT; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Flags$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0000d	83 c8 01	 or	 eax, 1
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Flags$[rsp]
  00015	88 01		 mov	 BYTE PTR [rcx], al
  00017	c3		 ret	 0
?setCarry@@YAXPEAE@Z ENDP				; setCarry
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
Value$ = 32
Cpu$ = 64
?pop@@YAEPEAUcpu@@@Z PROC				; pop

; 16   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 17   :     ++Cpu->StackPtr;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR Cpu$[rsp]
  0000e	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00012	fe c0		 inc	 al
  00014	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00019	88 41 04	 mov	 BYTE PTR [rcx+4], al

; 18   :     uint8 Value = readCpu8((uint16)Cpu->StackPtr | STACK_ADDRESS, Cpu);

  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR Cpu$[rsp]
  00021	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00025	0f ba e8 08	 bts	 eax, 8
  00029	48 8b 54 24 40	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0002e	0f b7 c8	 movzx	 ecx, ax
  00031	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00036	88 44 24 20	 mov	 BYTE PTR Value$[rsp], al

; 19   :     return(Value);

  0003a	0f b6 44 24 20	 movzx	 eax, BYTE PTR Value$[rsp]

; 20   : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
?pop@@YAEPEAUcpu@@@Z ENDP				; pop
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\cpu.cpp
_TEXT	SEGMENT
Byte$ = 48
Cpu$ = 56
?push@@YAXEPEAUcpu@@@Z PROC				; push

; 11   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 12   :     writeCpu8(Byte, (uint16)Cpu->StackPtr | STACK_ADDRESS, Cpu);

  0000d	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00012	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00016	0f ba e8 08	 bts	 eax, 8
  0001a	4c 8b 44 24 38	 mov	 r8, QWORD PTR Cpu$[rsp]
  0001f	0f b7 d0	 movzx	 edx, ax
  00022	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00027	e8 00 00 00 00	 call	 ?writeCpu8@@YAXEGPEAUcpu@@@Z ; writeCpu8

; 13   :     --Cpu->StackPtr;  

  0002c	48 8b 44 24 38	 mov	 rax, QWORD PTR Cpu$[rsp]
  00031	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00035	fe c8		 dec	 al
  00037	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0003c	88 41 04	 mov	 BYTE PTR [rcx+4], al

; 14   : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?push@@YAXEPEAUcpu@@@Z ENDP				; push
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
SpriteIdx$1 = 32
SpriteColourIndex$2 = 33
PixelX$3 = 36
XOffset$4 = 40
tv177 = 41
RelX$5 = 42
PatternLow$6 = 43
PatternHigh$7 = 44
RelX$8 = 45
HighPattern$9 = 46
LowPattern$10 = 47
PixColourHigh$11 = 48
Value$12 = 49
BgrdColourIndex$13 = 50
AtrbPixelValue$14 = 51
PatternPixelValue$15 = 52
BgrdPaletteIndex$16 = 53
SprtPaletteIndex$17 = 54
Colour$18 = 56
PixelY$19 = 60
BgrdTransparent$20 = 64
Sprite$21 = 72
tv76 = 80
tv80 = 84
tv87 = 88
tv91 = 92
tv283 = 96
SpriteTransparent$22 = 100
Sprite0Check$23 = 104
RenderingEnabled$ = 108
tv445 = 112
tv69 = 116
VRamIO$ = 120
VisibleLine$ = 128
tv157 = 132
tv169 = 136
SpritePriority$24 = 140
PostRenderLine$ = 144
VBlankLine$ = 148
PreRenderLine$ = 152
BackBuffer$ = 176
Ppu$ = 184
?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z PROC	; ppuTick

; 200  : {    

$LN59:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H

; 201  :     vram_io *VRamIO = &Ppu->VRamIO; 

  00012	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0001a	48 05 b4 01 00
	00		 add	 rax, 436		; 000001b4H
  00020	48 89 44 24 78	 mov	 QWORD PTR VRamIO$[rsp], rax

; 202  : 
; 203  :     bool32 RenderingEnabled = Ppu->ShowBackground || Ppu->ShowSprites;

  00025	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0002d	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00031	75 18		 jne	 SHORT $LN43@ppuTick
  00033	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0003b	83 78 34 00	 cmp	 DWORD PTR [rax+52], 0
  0003f	75 0a		 jne	 SHORT $LN43@ppuTick
  00041	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
  00049	eb 08		 jmp	 SHORT $LN44@ppuTick
$LN43@ppuTick:
  0004b	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
$LN44@ppuTick:
  00053	8b 44 24 74	 mov	 eax, DWORD PTR tv69[rsp]
  00057	89 44 24 6c	 mov	 DWORD PTR RenderingEnabled$[rsp], eax

; 204  :     
; 205  :     // TODO: Should pre render line actually be scanline zero instead?? Might put sprites in wrong position?
; 206  :     bool32 VisibleLine = (0 <= Ppu->Scanline && Ppu->Scanline <= 239);

  0005b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00063	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  0006a	85 c0		 test	 eax, eax
  0006c	7c 20		 jl	 SHORT $LN45@ppuTick
  0006e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00076	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  0007d	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  00082	7f 0a		 jg	 SHORT $LN45@ppuTick
  00084	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv76[rsp], 1
  0008c	eb 08		 jmp	 SHORT $LN46@ppuTick
$LN45@ppuTick:
  0008e	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN46@ppuTick:
  00096	8b 44 24 50	 mov	 eax, DWORD PTR tv76[rsp]
  0009a	89 84 24 80 00
	00 00		 mov	 DWORD PTR VisibleLine$[rsp], eax

; 207  :     bool32 PostRenderLine = (Ppu->Scanline == 240);

  000a1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  000a9	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  000b0	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  000b5	75 0a		 jne	 SHORT $LN47@ppuTick
  000b7	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  000bf	eb 08		 jmp	 SHORT $LN48@ppuTick
$LN47@ppuTick:
  000c1	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN48@ppuTick:
  000c9	8b 44 24 54	 mov	 eax, DWORD PTR tv80[rsp]
  000cd	89 84 24 90 00
	00 00		 mov	 DWORD PTR PostRenderLine$[rsp], eax

; 208  :     bool32 VBlankLine = (241 <= Ppu->Scanline && Ppu->Scanline <= 260);

  000d4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  000dc	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  000e3	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  000e8	7c 20		 jl	 SHORT $LN49@ppuTick
  000ea	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  000f2	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  000f9	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  000fe	7f 0a		 jg	 SHORT $LN49@ppuTick
  00100	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv87[rsp], 1
  00108	eb 08		 jmp	 SHORT $LN50@ppuTick
$LN49@ppuTick:
  0010a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN50@ppuTick:
  00112	8b 44 24 58	 mov	 eax, DWORD PTR tv87[rsp]
  00116	89 84 24 94 00
	00 00		 mov	 DWORD PTR VBlankLine$[rsp], eax

; 209  :     bool32 PreRenderLine = (Ppu->Scanline == 261);

  0011d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00125	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  0012c	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  00131	75 0a		 jne	 SHORT $LN51@ppuTick
  00133	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
  0013b	eb 08		 jmp	 SHORT $LN52@ppuTick
$LN51@ppuTick:
  0013d	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN52@ppuTick:
  00145	8b 44 24 5c	 mov	 eax, DWORD PTR tv91[rsp]
  00149	89 84 24 98 00
	00 00		 mov	 DWORD PTR PreRenderLine$[rsp], eax

; 210  :     
; 211  :     if(VisibleLine)

  00150	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR VisibleLine$[rsp], 0
  00158	0f 84 7a 05 00
	00		 je	 $LN5@ppuTick

; 212  :     {
; 213  :         // NOTE: Do sprite Evaluation
; 214  :         if(Ppu->ScanlineCycle == 0)

  0015e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00166	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0016d	85 c0		 test	 eax, eax
  0016f	75 0d		 jne	 SHORT $LN6@ppuTick

; 215  :         {
; 216  :             spriteEvaluation(Ppu);

  00171	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00179	e8 00 00 00 00	 call	 ?spriteEvaluation@@YAXPEAUppu@@@Z ; spriteEvaluation
$LN6@ppuTick:

; 217  :         }
; 218  : 
; 219  :         if(Ppu->ScanlineCycle == 257)

  0017e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00186	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0018d	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  00192	75 48		 jne	 SHORT $LN7@ppuTick

; 220  :         {
; 221  :             clearSecondaryOam(Ppu->SecondaryOam);          

  00194	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0019c	48 05 60 01 00
	00		 add	 rax, 352		; 00000160H
  001a2	48 8b c8	 mov	 rcx, rax
  001a5	e8 00 00 00 00	 call	 ?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z ; clearSecondaryOam

; 222  :             evaluateSecondaryOam(Ppu->Oam, Ppu->SecondaryOam, Ppu->Scanline);

  001aa	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  001b2	48 05 60 01 00
	00		 add	 rax, 352		; 00000160H
  001b8	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  001c0	48 83 c1 60	 add	 rcx, 96			; 00000060H
  001c4	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001cc	44 0f b7 82 b0
	01 00 00	 movzx	 r8d, WORD PTR [rdx+432]
  001d4	48 8b d0	 mov	 rdx, rax
  001d7	e8 00 00 00 00	 call	 ?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z ; evaluateSecondaryOam
$LN7@ppuTick:

; 223  :         }   
; 224  : 
; 225  :         if(RenderingEnabled)

  001dc	83 7c 24 6c 00	 cmp	 DWORD PTR RenderingEnabled$[rsp], 0
  001e1	0f 84 f1 04 00
	00		 je	 $LN8@ppuTick

; 226  :         {
; 227  :             if(1 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 256)

  001e7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  001ef	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  001f6	83 f8 01	 cmp	 eax, 1
  001f9	0f 8c 80 04 00
	00		 jl	 $LN9@ppuTick
  001ff	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00207	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0020e	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00213	0f 8f 66 04 00
	00		 jg	 $LN9@ppuTick

; 228  :             {
; 229  :                 uint16 PixelX = Ppu->ScanlineCycle - 1;

  00219	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00221	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00228	ff c8		 dec	 eax
  0022a	66 89 44 24 24	 mov	 WORD PTR PixelX$3[rsp], ax

; 230  :                 uint16 PixelY = Ppu->Scanline;

  0022f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00237	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  0023e	66 89 44 24 3c	 mov	 WORD PTR PixelY$19[rsp], ax

; 231  :                 
; 232  :                 /* *********************** */
; 233  :                 /* Background Calculations */
; 234  : 
; 235  :                 uint8 BgrdColourIndex;
; 236  :                 
; 237  :                 if( !(PixelX < 8 && !Ppu->ShowBGLeft8Pixels) )

  00243	0f b7 44 24 24	 movzx	 eax, WORD PTR PixelX$3[rsp]
  00248	83 f8 08	 cmp	 eax, 8
  0024b	7d 12		 jge	 SHORT $LN11@ppuTick
  0024d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00255	83 78 28 00	 cmp	 DWORD PTR [rax+40], 0
  00259	0f 84 b4 00 00
	00		 je	 $LN10@ppuTick
$LN11@ppuTick:

; 238  :                 {
; 239  :                     uint8 XOffset = 15 - (VRamIO->FineX + ((PixelX-1) % 8));

  0025f	48 8b 44 24 78	 mov	 rax, QWORD PTR VRamIO$[rsp]
  00264	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  00268	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv157[rsp], eax
  0026f	0f b7 4c 24 24	 movzx	 ecx, WORD PTR PixelX$3[rsp]
  00274	ff c9		 dec	 ecx
  00276	8b c1		 mov	 eax, ecx
  00278	99		 cdq
  00279	83 e2 07	 and	 edx, 7
  0027c	03 c2		 add	 eax, edx
  0027e	83 e0 07	 and	 eax, 7
  00281	2b c2		 sub	 eax, edx
  00283	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv157[rsp]
  0028a	03 c8		 add	 ecx, eax
  0028c	8b c1		 mov	 eax, ecx
  0028e	b9 0f 00 00 00	 mov	 ecx, 15
  00293	2b c8		 sub	 ecx, eax
  00295	8b c1		 mov	 eax, ecx
  00297	88 44 24 28	 mov	 BYTE PTR XOffset$4[rsp], al

; 240  :                 
; 241  :                     uint8 PatternPixelValue = (((HighPatternShiftReg >> (XOffset - 1) ) & 2) |

  0029b	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?HighPatternShiftReg@@3GA ; HighPatternShiftReg
  002a2	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR XOffset$4[rsp]
  002a7	ff c9		 dec	 ecx
  002a9	d3 f8		 sar	 eax, cl
  002ab	83 e0 02	 and	 eax, 2
  002ae	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?LowPatternShiftReg@@3GA ; LowPatternShiftReg
  002b5	89 8c 24 88 00
	00 00		 mov	 DWORD PTR tv169[rsp], ecx
  002bc	0f b6 54 24 28	 movzx	 edx, BYTE PTR XOffset$4[rsp]
  002c1	0f b6 ca	 movzx	 ecx, dl
  002c4	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR tv169[rsp]
  002cb	d3 fa		 sar	 edx, cl
  002cd	8b ca		 mov	 ecx, edx
  002cf	83 e1 01	 and	 ecx, 1
  002d2	0b c1		 or	 eax, ecx
  002d4	88 44 24 34	 mov	 BYTE PTR PatternPixelValue$15[rsp], al

; 242  :                                                (LowPatternShiftReg >> XOffset) & 1);
; 243  :                     uint8 AtrbPixelValue = (XOffset >= 8) ? PaletteLatchOld : PaletteLatchNew;

  002d8	0f b6 44 24 28	 movzx	 eax, BYTE PTR XOffset$4[rsp]
  002dd	83 f8 08	 cmp	 eax, 8
  002e0	7c 0d		 jl	 SHORT $LN53@ppuTick
  002e2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PaletteLatchOld@@3EA ; PaletteLatchOld
  002e9	88 44 24 29	 mov	 BYTE PTR tv177[rsp], al
  002ed	eb 0b		 jmp	 SHORT $LN54@ppuTick
$LN53@ppuTick:
  002ef	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PaletteLatchNew@@3EA ; PaletteLatchNew
  002f6	88 44 24 29	 mov	 BYTE PTR tv177[rsp], al
$LN54@ppuTick:
  002fa	0f b6 44 24 29	 movzx	 eax, BYTE PTR tv177[rsp]
  002ff	88 44 24 33	 mov	 BYTE PTR AtrbPixelValue$14[rsp], al

; 244  : 
; 245  :                     BgrdColourIndex = AtrbPixelValue | PatternPixelValue;

  00303	0f b6 44 24 33	 movzx	 eax, BYTE PTR AtrbPixelValue$14[rsp]
  00308	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR PatternPixelValue$15[rsp]
  0030d	0b c1		 or	 eax, ecx
  0030f	88 44 24 32	 mov	 BYTE PTR BgrdColourIndex$13[rsp], al
$LN10@ppuTick:

; 246  :                 }
; 247  :                 
; 248  :                 /* ******************* */
; 249  :                 /* Sprite Calculations */
; 250  : 
; 251  :                 bool32 Sprite0Check = false;

  00313	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR Sprite0Check$23[rsp], 0

; 252  :                 bool32 SpritePriority;
; 253  :                 
; 254  : #define NO_COLOUR 0xFF
; 255  :                 oam_sprite *Sprite;
; 256  :                 uint8 SpriteColourIndex = NO_COLOUR;

  0031b	c6 44 24 21 ff	 mov	 BYTE PTR SpriteColourIndex$2[rsp], 255 ; 000000ffH

; 257  :                 if( !(Ppu->ShowSPRTLeft8Pixels && PixelX < 8) )

  00320	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00328	83 78 2c 00	 cmp	 DWORD PTR [rax+44], 0
  0032c	74 0e		 je	 SHORT $LN13@ppuTick
  0032e	0f b7 44 24 24	 movzx	 eax, WORD PTR PixelX$3[rsp]
  00333	83 f8 08	 cmp	 eax, 8
  00336	0f 8c ff 01 00
	00		 jl	 $LN12@ppuTick
$LN13@ppuTick:

; 258  :                 {
; 259  :                     for(int8 SpriteIdx = SECOND_OAM_SPRITE_NUM - 1; SpriteIdx >= 0; --SpriteIdx)

  0033c	c6 44 24 20 07	 mov	 BYTE PTR SpriteIdx$1[rsp], 7
  00341	eb 0b		 jmp	 SHORT $LN4@ppuTick
$LN2@ppuTick:
  00343	0f b6 44 24 20	 movzx	 eax, BYTE PTR SpriteIdx$1[rsp]
  00348	fe c8		 dec	 al
  0034a	88 44 24 20	 mov	 BYTE PTR SpriteIdx$1[rsp], al
$LN4@ppuTick:
  0034e	0f be 44 24 20	 movsx	 eax, BYTE PTR SpriteIdx$1[rsp]
  00353	85 c0		 test	 eax, eax
  00355	0f 8c e0 01 00
	00		 jl	 $LN3@ppuTick

; 260  :                     {
; 261  :                         Sprite = Ppu->SecondaryOam + SpriteIdx;

  0035b	48 0f be 44 24
	20		 movsx	 rax, BYTE PTR SpriteIdx$1[rsp]
  00361	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00369	48 8d 84 81 60
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*4+352]
  00371	48 89 44 24 48	 mov	 QWORD PTR Sprite$21[rsp], rax

; 262  : 
; 263  :                         if(PixelX >= Sprite->X+1 && PixelX < (Sprite->X+1 + PIXEL_PER_TILE)) 

  00376	0f b7 44 24 24	 movzx	 eax, WORD PTR PixelX$3[rsp]
  0037b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Sprite$21[rsp]
  00380	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  00384	ff c1		 inc	 ecx
  00386	3b c1		 cmp	 eax, ecx
  00388	0f 8c a8 01 00
	00		 jl	 $LN14@ppuTick
  0038e	0f b7 44 24 24	 movzx	 eax, WORD PTR PixelX$3[rsp]
  00393	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Sprite$21[rsp]
  00398	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  0039c	83 c1 09	 add	 ecx, 9
  0039f	3b c1		 cmp	 eax, ecx
  003a1	0f 8d 8f 01 00
	00		 jge	 $LN14@ppuTick

; 264  :                         {
; 265  :                             uint8 PixColourHigh = Sprite->Atrb & 3; 

  003a7	48 8b 44 24 48	 mov	 rax, QWORD PTR Sprite$21[rsp]
  003ac	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  003b0	83 e0 03	 and	 eax, 3
  003b3	88 44 24 30	 mov	 BYTE PTR PixColourHigh$11[rsp], al

; 266  :                             uint8 PatternLow = Ppu->SpriteTileLow[SpriteIdx];

  003b7	48 0f be 44 24
	20		 movsx	 rax, BYTE PTR SpriteIdx$1[rsp]
  003bd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  003c5	0f b6 84 01 80
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+384]
  003cd	88 44 24 2b	 mov	 BYTE PTR PatternLow$6[rsp], al

; 267  :                             uint8 PatternHigh = Ppu->SpriteTileHigh[SpriteIdx];

  003d1	48 0f be 44 24
	20		 movsx	 rax, BYTE PTR SpriteIdx$1[rsp]
  003d7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  003df	0f b6 84 01 88
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+392]
  003e7	88 44 24 2c	 mov	 BYTE PTR PatternHigh$7[rsp], al

; 268  :                             uint8 LowPattern;
; 269  :                             uint8 HighPattern;
; 270  : 
; 271  :                             if(Sprite->Atrb & (1 << 6))

  003eb	48 8b 44 24 48	 mov	 rax, QWORD PTR Sprite$21[rsp]
  003f0	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  003f4	83 e0 40	 and	 eax, 64			; 00000040H
  003f7	85 c0		 test	 eax, eax
  003f9	74 49		 je	 SHORT $LN15@ppuTick

; 272  :                             {
; 273  :                                 uint8 RelX = ((PixelX - (Sprite->X + 1)) % 8); 

  003fb	0f b7 44 24 24	 movzx	 eax, WORD PTR PixelX$3[rsp]
  00400	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Sprite$21[rsp]
  00405	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  00409	ff c1		 inc	 ecx
  0040b	2b c1		 sub	 eax, ecx
  0040d	99		 cdq
  0040e	83 e2 07	 and	 edx, 7
  00411	03 c2		 add	 eax, edx
  00413	83 e0 07	 and	 eax, 7
  00416	2b c2		 sub	 eax, edx
  00418	88 44 24 2a	 mov	 BYTE PTR RelX$5[rsp], al

; 274  :                                 LowPattern  = (PatternLow >> RelX) & 1;

  0041c	0f b6 44 24 2b	 movzx	 eax, BYTE PTR PatternLow$6[rsp]
  00421	0f b6 4c 24 2a	 movzx	 ecx, BYTE PTR RelX$5[rsp]
  00426	d3 f8		 sar	 eax, cl
  00428	83 e0 01	 and	 eax, 1
  0042b	88 44 24 2f	 mov	 BYTE PTR LowPattern$10[rsp], al

; 275  :                                 HighPattern = (PatternHigh >> RelX) & 1;

  0042f	0f b6 44 24 2c	 movzx	 eax, BYTE PTR PatternHigh$7[rsp]
  00434	0f b6 4c 24 2a	 movzx	 ecx, BYTE PTR RelX$5[rsp]
  00439	d3 f8		 sar	 eax, cl
  0043b	83 e0 01	 and	 eax, 1
  0043e	88 44 24 2e	 mov	 BYTE PTR HighPattern$9[rsp], al

; 276  :                             }                        
; 277  :                             else

  00442	eb 59		 jmp	 SHORT $LN16@ppuTick
$LN15@ppuTick:

; 278  :                             {
; 279  :                                 uint8 RelX = ((PixelX - (Sprite->X + 1)) % 8);

  00444	0f b7 44 24 24	 movzx	 eax, WORD PTR PixelX$3[rsp]
  00449	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Sprite$21[rsp]
  0044e	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  00452	ff c1		 inc	 ecx
  00454	2b c1		 sub	 eax, ecx
  00456	99		 cdq
  00457	83 e2 07	 and	 edx, 7
  0045a	03 c2		 add	 eax, edx
  0045c	83 e0 07	 and	 eax, 7
  0045f	2b c2		 sub	 eax, edx
  00461	88 44 24 2d	 mov	 BYTE PTR RelX$8[rsp], al

; 280  :                                 LowPattern  = (PatternLow >> (7 - RelX)) & 1;

  00465	0f b6 44 24 2b	 movzx	 eax, BYTE PTR PatternLow$6[rsp]
  0046a	0f b6 4c 24 2d	 movzx	 ecx, BYTE PTR RelX$8[rsp]
  0046f	ba 07 00 00 00	 mov	 edx, 7
  00474	2b d1		 sub	 edx, ecx
  00476	8b ca		 mov	 ecx, edx
  00478	d3 f8		 sar	 eax, cl
  0047a	83 e0 01	 and	 eax, 1
  0047d	88 44 24 2f	 mov	 BYTE PTR LowPattern$10[rsp], al

; 281  :                                 HighPattern = (PatternHigh >> (7 - RelX)) & 1;

  00481	0f b6 44 24 2c	 movzx	 eax, BYTE PTR PatternHigh$7[rsp]
  00486	0f b6 4c 24 2d	 movzx	 ecx, BYTE PTR RelX$8[rsp]
  0048b	ba 07 00 00 00	 mov	 edx, 7
  00490	2b d1		 sub	 edx, ecx
  00492	8b ca		 mov	 ecx, edx
  00494	d3 f8		 sar	 eax, cl
  00496	83 e0 01	 and	 eax, 1
  00499	88 44 24 2e	 mov	 BYTE PTR HighPattern$9[rsp], al
$LN16@ppuTick:

; 282  :                             }
; 283  :                     
; 284  :                             uint8 Value = (HighPattern << 1) | LowPattern;

  0049d	0f b6 44 24 2e	 movzx	 eax, BYTE PTR HighPattern$9[rsp]
  004a2	d1 e0		 shl	 eax, 1
  004a4	0f b6 4c 24 2f	 movzx	 ecx, BYTE PTR LowPattern$10[rsp]
  004a9	0b c1		 or	 eax, ecx
  004ab	88 44 24 31	 mov	 BYTE PTR Value$12[rsp], al

; 285  :                     
; 286  :                             if((((PixColourHigh << 2) | Value) % 4) != 0)

  004af	0f b6 44 24 30	 movzx	 eax, BYTE PTR PixColourHigh$11[rsp]
  004b4	c1 e0 02	 shl	 eax, 2
  004b7	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR Value$12[rsp]
  004bc	0b c1		 or	 eax, ecx
  004be	99		 cdq
  004bf	83 e2 03	 and	 edx, 3
  004c2	03 c2		 add	 eax, edx
  004c4	83 e0 03	 and	 eax, 3
  004c7	2b c2		 sub	 eax, edx
  004c9	85 c0		 test	 eax, eax
  004cb	74 13		 je	 SHORT $LN17@ppuTick

; 287  :                                 SpriteColourIndex = (PixColourHigh << 2) | Value;

  004cd	0f b6 44 24 30	 movzx	 eax, BYTE PTR PixColourHigh$11[rsp]
  004d2	c1 e0 02	 shl	 eax, 2
  004d5	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR Value$12[rsp]
  004da	0b c1		 or	 eax, ecx
  004dc	88 44 24 21	 mov	 BYTE PTR SpriteColourIndex$2[rsp], al
$LN17@ppuTick:

; 288  : 
; 289  :                             if(SpriteIdx == 0 && ((SpriteColourIndex & 3) != 0) && SpriteColourIndex != NO_COLOUR)

  004e0	0f be 44 24 20	 movsx	 eax, BYTE PTR SpriteIdx$1[rsp]
  004e5	85 c0		 test	 eax, eax
  004e7	75 20		 jne	 SHORT $LN18@ppuTick
  004e9	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteColourIndex$2[rsp]
  004ee	83 e0 03	 and	 eax, 3
  004f1	85 c0		 test	 eax, eax
  004f3	74 14		 je	 SHORT $LN18@ppuTick
  004f5	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteColourIndex$2[rsp]
  004fa	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  004ff	74 08		 je	 SHORT $LN18@ppuTick

; 290  :                             {
; 291  :                                 Sprite0Check = true;

  00501	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR Sprite0Check$23[rsp], 1
$LN18@ppuTick:

; 292  :                             }
; 293  : 
; 294  :                             SpritePriority = !(Sprite->Atrb & (1 << 5));

  00509	48 8b 44 24 48	 mov	 rax, QWORD PTR Sprite$21[rsp]
  0050e	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00512	83 e0 20	 and	 eax, 32			; 00000020H
  00515	85 c0		 test	 eax, eax
  00517	75 0a		 jne	 SHORT $LN55@ppuTick
  00519	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv283[rsp], 1
  00521	eb 08		 jmp	 SHORT $LN56@ppuTick
$LN55@ppuTick:
  00523	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv283[rsp], 0
$LN56@ppuTick:
  0052b	8b 44 24 60	 mov	 eax, DWORD PTR tv283[rsp]
  0052f	89 84 24 8c 00
	00 00		 mov	 DWORD PTR SpritePriority$24[rsp], eax
$LN14@ppuTick:

; 295  :                         }
; 296  :                     }

  00536	e9 08 fe ff ff	 jmp	 $LN2@ppuTick
$LN3@ppuTick:
$LN12@ppuTick:

; 297  :                 }
; 298  : 
; 299  :                 /** **************/
; 300  :                 /* Drawing Pixel */
; 301  :             
; 302  :                 uint8 Colour[3] = {};

  0053b	48 8d 44 24 38	 lea	 rax, QWORD PTR Colour$18[rsp]
  00540	48 8b f8	 mov	 rdi, rax
  00543	33 c0		 xor	 eax, eax
  00545	b9 03 00 00 00	 mov	 ecx, 3
  0054a	f3 aa		 rep stosb

; 303  :                 bool32 BgrdTransparent = true;

  0054c	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR BgrdTransparent$20[rsp], 1

; 304  :             
; 305  :                 if(Ppu->ShowBackground)

  00554	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0055c	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00560	74 41		 je	 SHORT $LN19@ppuTick

; 306  :                 {
; 307  :                     if((BgrdColourIndex & 3) != 0)

  00562	0f b6 44 24 32	 movzx	 eax, BYTE PTR BgrdColourIndex$13[rsp]
  00567	83 e0 03	 and	 eax, 3
  0056a	85 c0		 test	 eax, eax
  0056c	74 08		 je	 SHORT $LN20@ppuTick

; 308  :                         BgrdTransparent = false;

  0056e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR BgrdTransparent$20[rsp], 0
$LN20@ppuTick:

; 309  : 
; 310  :                     uint8 BgrdPaletteIndex = readPpu8(BGRD_PALETTE_ADRS + BgrdColourIndex, Ppu);

  00576	0f b6 44 24 32	 movzx	 eax, BYTE PTR BgrdColourIndex$13[rsp]
  0057b	05 00 3f 00 00	 add	 eax, 16128		; 00003f00H
  00580	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00588	0f b7 c8	 movzx	 ecx, ax
  0058b	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00590	88 44 24 35	 mov	 BYTE PTR BgrdPaletteIndex$16[rsp], al

; 311  :                     getPaletteValue(BgrdPaletteIndex, Colour);

  00594	48 8d 54 24 38	 lea	 rdx, QWORD PTR Colour$18[rsp]
  00599	0f b6 4c 24 35	 movzx	 ecx, BYTE PTR BgrdPaletteIndex$16[rsp]
  0059e	e8 00 00 00 00	 call	 ?getPaletteValue@@YAXEPEAE@Z ; getPaletteValue
$LN19@ppuTick:

; 312  :                 }
; 313  : 
; 314  :                 bool32 SpriteTransparent = true; 

  005a3	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR SpriteTransparent$22[rsp], 1

; 315  :             
; 316  :                 if(Ppu->ShowSprites)

  005ab	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  005b3	83 78 34 00	 cmp	 DWORD PTR [rax+52], 0
  005b7	0f 84 98 00 00
	00		 je	 $LN21@ppuTick

; 317  :                 {
; 318  :                     if((SpriteColourIndex & 3) != 0)

  005bd	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteColourIndex$2[rsp]
  005c2	83 e0 03	 and	 eax, 3
  005c5	85 c0		 test	 eax, eax
  005c7	74 08		 je	 SHORT $LN22@ppuTick

; 319  :                         SpriteTransparent = false;

  005c9	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR SpriteTransparent$22[rsp], 0
$LN22@ppuTick:

; 320  :                     
; 321  :                     if(SpriteColourIndex != NO_COLOUR && !SpriteTransparent)

  005d1	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteColourIndex$2[rsp]
  005d6	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  005db	74 78		 je	 SHORT $LN23@ppuTick
  005dd	83 7c 24 64 00	 cmp	 DWORD PTR SpriteTransparent$22[rsp], 0
  005e2	75 71		 jne	 SHORT $LN23@ppuTick

; 322  :                     {
; 323  :                         if(BgrdTransparent || SpritePriority)

  005e4	83 7c 24 40 00	 cmp	 DWORD PTR BgrdTransparent$20[rsp], 0
  005e9	75 0a		 jne	 SHORT $LN25@ppuTick
  005eb	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR SpritePriority$24[rsp], 0
  005f3	74 2d		 je	 SHORT $LN24@ppuTick
$LN25@ppuTick:

; 324  :                         {
; 325  :                             uint8 SprtPaletteIndex = readPpu8(SPRT_PALETTE_ADRS + SpriteColourIndex, Ppu);                       

  005f5	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteColourIndex$2[rsp]
  005fa	05 10 3f 00 00	 add	 eax, 16144		; 00003f10H
  005ff	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR Ppu$[rsp]
  00607	0f b7 c8	 movzx	 ecx, ax
  0060a	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  0060f	88 44 24 36	 mov	 BYTE PTR SprtPaletteIndex$17[rsp], al

; 326  :                             getPaletteValue(SprtPaletteIndex, Colour);                        

  00613	48 8d 54 24 38	 lea	 rdx, QWORD PTR Colour$18[rsp]
  00618	0f b6 4c 24 36	 movzx	 ecx, BYTE PTR SprtPaletteIndex$17[rsp]
  0061d	e8 00 00 00 00	 call	 ?getPaletteValue@@YAXEPEAE@Z ; getPaletteValue
$LN24@ppuTick:

; 327  :                         }
; 328  :                         
; 329  :                         if(Sprite0Check && !BgrdTransparent && Ppu->ScanlineCycle < 256)

  00622	83 7c 24 68 00	 cmp	 DWORD PTR Sprite0Check$23[rsp], 0
  00627	74 2c		 je	 SHORT $LN26@ppuTick
  00629	83 7c 24 40 00	 cmp	 DWORD PTR BgrdTransparent$20[rsp], 0
  0062e	75 25		 jne	 SHORT $LN26@ppuTick
  00630	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00638	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0063f	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00644	7d 0f		 jge	 SHORT $LN26@ppuTick

; 330  :                         {
; 331  :                             Ppu->Sprite0Hit = true;

  00646	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0064e	c7 40 48 01 00
	00 00		 mov	 DWORD PTR [rax+72], 1
$LN26@ppuTick:
$LN23@ppuTick:
$LN21@ppuTick:

; 332  :                         }
; 333  :                     }
; 334  :                 }            
; 335  :                 
; 336  :                 drawPixel(Ppu, PixelX, PixelY, Colour);

  00655	4c 8d 4c 24 38	 lea	 r9, QWORD PTR Colour$18[rsp]
  0065a	44 0f b7 44 24
	3c		 movzx	 r8d, WORD PTR PixelY$19[rsp]
  00660	0f b7 54 24 24	 movzx	 edx, WORD PTR PixelX$3[rsp]
  00665	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0066d	e8 00 00 00 00	 call	 ?drawPixel@@YAXPEAUppu@@GGPEAE@Z ; drawPixel

; 337  : 
; 338  :                 // NOTE: Loading next background information. Also scrolling
; 339  :                 loadFutureData(Ppu);

  00672	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0067a	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData
$LN9@ppuTick:

; 340  :             }            
; 341  : 
; 342  :             if(Ppu->ScanlineCycle == 257)

  0067f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00687	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0068e	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  00693	75 0a		 jne	 SHORT $LN27@ppuTick

; 343  :                 resetScrollHorz(VRamIO);

  00695	48 8b 4c 24 78	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0069a	e8 00 00 00 00	 call	 ?resetScrollHorz@@YAXPEAUvram_io@@@Z ; resetScrollHorz
$LN27@ppuTick:

; 344  :             if(321 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 340)

  0069f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  006a7	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  006ae	3d 41 01 00 00	 cmp	 eax, 321		; 00000141H
  006b3	7c 23		 jl	 SHORT $LN28@ppuTick
  006b5	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  006bd	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  006c4	3d 54 01 00 00	 cmp	 eax, 340		; 00000154H
  006c9	7f 0d		 jg	 SHORT $LN28@ppuTick

; 345  :                 loadFutureData(Ppu);

  006cb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  006d3	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData
$LN28@ppuTick:
$LN8@ppuTick:
$LN5@ppuTick:

; 346  :         }
; 347  :     }
; 348  :     if(PostRenderLine)

  006d8	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR PostRenderLine$[rsp], 0
  006e0	74 0a		 je	 SHORT $LN29@ppuTick

; 349  :     {
; 350  :         // NOTE: IDLE
; 351  :         DrawScreen = true;

  006e2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?DrawScreen@@3HA, 1
$LN29@ppuTick:

; 352  :     }
; 353  :     if(VBlankLine)

  006ec	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR VBlankLine$[rsp], 0
  006f4	74 4a		 je	 SHORT $LN30@ppuTick

; 354  :     {
; 355  :         if(Ppu->Scanline == 241 && Ppu->ScanlineCycle == 1)

  006f6	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  006fe	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  00705	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  0070a	75 34		 jne	 SHORT $LN31@ppuTick
  0070c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00714	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0071b	83 f8 01	 cmp	 eax, 1
  0071e	75 20		 jne	 SHORT $LN31@ppuTick

; 356  :         {
; 357  :             Ppu->VerticalBlank = true;

  00720	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00728	c7 40 4c 01 00
	00 00		 mov	 DWORD PTR [rax+76], 1

; 358  :             TriggerNmi = Ppu->GenerateNMI;

  0072f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00737	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0073a	89 05 00 00 00
	00		 mov	 DWORD PTR ?TriggerNmi@@3HA, eax ; TriggerNmi
$LN31@ppuTick:
$LN30@ppuTick:

; 359  :         }
; 360  :     }
; 361  :     if(PreRenderLine)

  00740	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR PreRenderLine$[rsp], 0
  00748	0f 84 63 01 00
	00		 je	 $LN32@ppuTick

; 362  :     {
; 363  :         if(Ppu->ScanlineCycle == 1)

  0074e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00756	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0075d	83 f8 01	 cmp	 eax, 1
  00760	75 37		 jne	 SHORT $LN33@ppuTick

; 364  :         {
; 365  :             Ppu->SpriteOverflow = false;

  00762	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0076a	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [rax+68], 0

; 366  :             Ppu->Sprite0Hit = false;

  00771	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00779	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [rax+72], 0

; 367  :             Ppu->VerticalBlank = false; 

  00780	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00788	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [rax+76], 0

; 368  :             NmiTriggered = false;

  0078f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?NmiTriggered@@3HA, 0 ; NmiTriggered
$LN33@ppuTick:

; 369  :         }
; 370  : 
; 371  :         if(RenderingEnabled)

  00799	83 7c 24 6c 00	 cmp	 DWORD PTR RenderingEnabled$[rsp], 0
  0079e	0f 84 0d 01 00
	00		 je	 $LN34@ppuTick

; 372  :         {
; 373  :             if(1 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 256)

  007a4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  007ac	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  007b3	83 f8 01	 cmp	 eax, 1
  007b6	7c 23		 jl	 SHORT $LN35@ppuTick
  007b8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  007c0	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  007c7	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  007cc	7f 0d		 jg	 SHORT $LN35@ppuTick

; 374  :                 loadFutureData(Ppu);

  007ce	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  007d6	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData
$LN35@ppuTick:

; 375  :             if(Ppu->ScanlineCycle == 257)

  007db	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  007e3	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  007ea	3d 01 01 00 00	 cmp	 eax, 257		; 00000101H
  007ef	75 0a		 jne	 SHORT $LN36@ppuTick

; 376  :                 resetScrollHorz(VRamIO);

  007f1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  007f6	e8 00 00 00 00	 call	 ?resetScrollHorz@@YAXPEAUvram_io@@@Z ; resetScrollHorz
$LN36@ppuTick:

; 377  :             /*if(Ppu->ScanlineCycle == 279)
; 378  :               VRamIO->TempVRamAdrs |= ((uint16)Registers->Control & 3) << 10;*/
; 379  :             if(280 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 304)

  007fb	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00803	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0080a	3d 18 01 00 00	 cmp	 eax, 280		; 00000118H
  0080f	7c 20		 jl	 SHORT $LN37@ppuTick
  00811	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00819	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00820	3d 30 01 00 00	 cmp	 eax, 304		; 00000130H
  00825	7f 0a		 jg	 SHORT $LN37@ppuTick

; 380  :                 resetScrollVert(VRamIO);

  00827	48 8b 4c 24 78	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0082c	e8 00 00 00 00	 call	 ?resetScrollVert@@YAXPEAUvram_io@@@Z ; resetScrollVert
$LN37@ppuTick:

; 381  :             if(321 <= Ppu->ScanlineCycle && Ppu->ScanlineCycle <= 336)

  00831	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00839	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00840	3d 41 01 00 00	 cmp	 eax, 321		; 00000141H
  00845	7c 23		 jl	 SHORT $LN38@ppuTick
  00847	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0084f	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00856	3d 50 01 00 00	 cmp	 eax, 336		; 00000150H
  0085b	7f 0d		 jg	 SHORT $LN38@ppuTick

; 382  :                 loadFutureData(Ppu);

  0085d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00865	e8 00 00 00 00	 call	 ?loadFutureData@@YAXPEAUppu@@@Z ; loadFutureData
$LN38@ppuTick:

; 383  : 
; 384  :             // NOTE: Last cycle of prerender is skipped if it is an odd frame
; 385  :             if(Ppu->OddFrame && Ppu->ScanlineCycle == 339)

  0086a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00872	83 b8 bc 01 00
	00 00		 cmp	 DWORD PTR [rax+444], 0
  00879	74 36		 je	 SHORT $LN39@ppuTick
  0087b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00883	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0088a	3d 53 01 00 00	 cmp	 eax, 339		; 00000153H
  0088f	75 20		 jne	 SHORT $LN39@ppuTick

; 386  :                 Ppu->ScanlineCycle += 1;

  00891	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00899	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  008a0	ff c0		 inc	 eax
  008a2	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  008aa	66 89 81 b2 01
	00 00		 mov	 WORD PTR [rcx+434], ax
$LN39@ppuTick:
$LN34@ppuTick:
$LN32@ppuTick:

; 387  :         }
; 388  :     }
; 389  :             
; 390  :     // Incrementing to the next cycle. If reached end of
; 391  :     // scanline cycles then increment scanline.
; 392  :     ++Ppu->ScanlineCycle;

  008b1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  008b9	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  008c0	66 ff c0	 inc	 ax
  008c3	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  008cb	66 89 81 b2 01
	00 00		 mov	 WORD PTR [rcx+434], ax

; 393  :     
; 394  :     if(Ppu->ScanlineCycle == 341)

  008d2	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  008da	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  008e1	3d 55 01 00 00	 cmp	 eax, 341		; 00000155H
  008e6	75 31		 jne	 SHORT $LN40@ppuTick

; 395  :     {
; 396  :         Ppu->Scanline += 1;

  008e8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  008f0	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  008f7	ff c0		 inc	 eax
  008f9	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00901	66 89 81 b0 01
	00 00		 mov	 WORD PTR [rcx+432], ax

; 397  :         Ppu->ScanlineCycle = 0;

  00908	33 c0		 xor	 eax, eax
  0090a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00912	66 89 81 b2 01
	00 00		 mov	 WORD PTR [rcx+434], ax
$LN40@ppuTick:

; 398  :     }
; 399  : 
; 400  :     if(Ppu->Scanline == 262)

  00919	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00921	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  00928	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0092d	75 46		 jne	 SHORT $LN41@ppuTick

; 401  :     {
; 402  :         Ppu->Scanline = 0;

  0092f	33 c0		 xor	 eax, eax
  00931	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00939	66 89 81 b0 01
	00 00		 mov	 WORD PTR [rcx+432], ax

; 403  :          Ppu->OddFrame = !Ppu->OddFrame;

  00940	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  00948	83 b8 bc 01 00
	00 00		 cmp	 DWORD PTR [rax+444], 0
  0094f	75 0a		 jne	 SHORT $LN57@ppuTick
  00951	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv445[rsp], 1
  00959	eb 08		 jmp	 SHORT $LN58@ppuTick
$LN57@ppuTick:
  0095b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv445[rsp], 0
$LN58@ppuTick:
  00963	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR Ppu$[rsp]
  0096b	8b 4c 24 70	 mov	 ecx, DWORD PTR tv445[rsp]
  0096f	89 88 bc 01 00
	00		 mov	 DWORD PTR [rax+444], ecx
$LN41@ppuTick:

; 404  :     }
; 405  : }

  00975	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0097c	5f		 pop	 rdi
  0097d	c3		 ret	 0
?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z ENDP	; ppuTick
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
TileRelY$1 = 32
SpriteIdx$2 = 33
SpritePatternBase$ = 36
Sprite8x16$ = 40
Sprite$3 = 44
FlippedVert$4 = 48
LowAddress$5 = 56
HighAddress$6 = 64
Ppu$ = 96
?spriteEvaluation@@YAXPEAUppu@@@Z PROC			; spriteEvaluation

; 154  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 155  :     uint16 Sprite8x16 = Ppu->SpriteSize8x16;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR Ppu$[rsp]
  0000e	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  00012	66 89 44 24 28	 mov	 WORD PTR Sprite8x16$[rsp], ax

; 156  :     
; 157  :     uint16 SpritePatternBase = Ppu->SPRTPattenBase;

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR Ppu$[rsp]
  0001c	0f b7 40 14	 movzx	 eax, WORD PTR [rax+20]
  00020	66 89 44 24 24	 mov	 WORD PTR SpritePatternBase$[rsp], ax

; 158  :     
; 159  :     for(uint8 SpriteIdx = 0; SpriteIdx < SECOND_OAM_SPRITE_NUM; ++SpriteIdx)

  00025	c6 44 24 21 00	 mov	 BYTE PTR SpriteIdx$2[rsp], 0
  0002a	eb 0b		 jmp	 SHORT $LN4@spriteEval
$LN2@spriteEval:
  0002c	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteIdx$2[rsp]
  00031	fe c0		 inc	 al
  00033	88 44 24 21	 mov	 BYTE PTR SpriteIdx$2[rsp], al
$LN4@spriteEval:
  00037	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteIdx$2[rsp]
  0003c	83 f8 08	 cmp	 eax, 8
  0003f	0f 8d 85 01 00
	00		 jge	 $LN3@spriteEval

; 160  :     {
; 161  :         oam_sprite Sprite = Ppu->SecondaryOam[SpriteIdx];

  00045	0f b6 44 24 21	 movzx	 eax, BYTE PTR SpriteIdx$2[rsp]
  0004a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0004f	8b 84 81 60 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+352]
  00056	89 44 24 2c	 mov	 DWORD PTR Sprite$3[rsp], eax

; 162  : 
; 163  :         if(Sprite.Y == 0xFF && Sprite.Tile == 0xFF)

  0005a	0f b6 44 24 2c	 movzx	 eax, BYTE PTR Sprite$3[rsp]
  0005f	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00064	75 11		 jne	 SHORT $LN5@spriteEval
  00066	0f b6 44 24 2d	 movzx	 eax, BYTE PTR Sprite$3[rsp+1]
  0006b	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00070	75 05		 jne	 SHORT $LN5@spriteEval

; 164  :             break;

  00072	e9 53 01 00 00	 jmp	 $LN3@spriteEval
$LN5@spriteEval:

; 165  :                 
; 166  :         bool32 FlippedVert = Sprite.Atrb & (1 << 7);

  00077	0f b6 44 24 2e	 movzx	 eax, BYTE PTR Sprite$3[rsp+2]
  0007c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00081	89 44 24 30	 mov	 DWORD PTR FlippedVert$4[rsp], eax

; 167  : 
; 168  :         if(Sprite8x16)

  00085	0f b7 44 24 28	 movzx	 eax, WORD PTR Sprite8x16$[rsp]
  0008a	85 c0		 test	 eax, eax
  0008c	74 1f		 je	 SHORT $LN6@spriteEval

; 169  :         {
; 170  :             if(Sprite.Tile & 1)

  0008e	0f b6 44 24 2d	 movzx	 eax, BYTE PTR Sprite$3[rsp+1]
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 0c		 je	 SHORT $LN7@spriteEval

; 171  :                 SpritePatternBase = 0x1000;

  0009a	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  0009f	66 89 44 24 24	 mov	 WORD PTR SpritePatternBase$[rsp], ax

; 172  :             else

  000a4	eb 07		 jmp	 SHORT $LN8@spriteEval
$LN7@spriteEval:

; 173  :                 SpritePatternBase = 0;

  000a6	33 c0		 xor	 eax, eax
  000a8	66 89 44 24 24	 mov	 WORD PTR SpritePatternBase$[rsp], ax
$LN8@spriteEval:
$LN6@spriteEval:

; 174  :         }
; 175  :                 
; 176  :         uint8 TileRelY = (uint8)(Ppu->Scanline - Sprite.Y - 1) % PIXEL_PER_TILE; // NOTE TODO: -1?????   

  000ad	48 8b 44 24 60	 mov	 rax, QWORD PTR Ppu$[rsp]
  000b2	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  000b9	0f b6 4c 24 2c	 movzx	 ecx, BYTE PTR Sprite$3[rsp]
  000be	2b c1		 sub	 eax, ecx
  000c0	ff c8		 dec	 eax
  000c2	0f b6 c0	 movzx	 eax, al
  000c5	99		 cdq
  000c6	83 e2 07	 and	 edx, 7
  000c9	03 c2		 add	 eax, edx
  000cb	83 e0 07	 and	 eax, 7
  000ce	2b c2		 sub	 eax, edx
  000d0	88 44 24 20	 mov	 BYTE PTR TileRelY$1[rsp], al

; 177  :         Assert(0 <= TileRelY && TileRelY < PIXEL_PER_TILE);

  000d4	0f b6 44 24 20	 movzx	 eax, BYTE PTR TileRelY$1[rsp]
  000d9	85 c0		 test	 eax, eax
  000db	7c 0a		 jl	 SHORT $LN10@spriteEval
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR TileRelY$1[rsp]
  000e2	83 f8 08	 cmp	 eax, 8
  000e5	7c 0b		 jl	 SHORT $LN9@spriteEval
$LN10@spriteEval:
  000e7	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN9@spriteEval:

; 178  : 
; 179  :         uint64 LowAddress;
; 180  :         uint64 HighAddress;
; 181  :                     
; 182  :         if(FlippedVert)

  000f2	83 7c 24 30 00	 cmp	 DWORD PTR FlippedVert$4[rsp], 0
  000f7	74 50		 je	 SHORT $LN11@spriteEval

; 183  :         {
; 184  :             LowAddress = (SpritePatternBase + (Sprite.Tile * 16)) + (7 - TileRelY);

  000f9	0f b7 44 24 24	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  000fe	0f b6 4c 24 2d	 movzx	 ecx, BYTE PTR Sprite$3[rsp+1]
  00103	6b c9 10	 imul	 ecx, ecx, 16
  00106	03 c1		 add	 eax, ecx
  00108	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR TileRelY$1[rsp]
  0010d	ba 07 00 00 00	 mov	 edx, 7
  00112	2b d1		 sub	 edx, ecx
  00114	8b ca		 mov	 ecx, edx
  00116	03 c1		 add	 eax, ecx
  00118	48 98		 cdqe
  0011a	48 89 44 24 38	 mov	 QWORD PTR LowAddress$5[rsp], rax

; 185  :             HighAddress = (SpritePatternBase + (Sprite.Tile * 16) + 8) + (7 - TileRelY);

  0011f	0f b7 44 24 24	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  00124	0f b6 4c 24 2d	 movzx	 ecx, BYTE PTR Sprite$3[rsp+1]
  00129	6b c9 10	 imul	 ecx, ecx, 16
  0012c	03 c1		 add	 eax, ecx
  0012e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR TileRelY$1[rsp]
  00133	ba 07 00 00 00	 mov	 edx, 7
  00138	2b d1		 sub	 edx, ecx
  0013a	8b ca		 mov	 ecx, edx
  0013c	8d 44 08 08	 lea	 eax, DWORD PTR [rax+rcx+8]
  00140	48 98		 cdqe
  00142	48 89 44 24 40	 mov	 QWORD PTR HighAddress$6[rsp], rax

; 186  :         }
; 187  :         else

  00147	eb 3c		 jmp	 SHORT $LN12@spriteEval
$LN11@spriteEval:

; 188  :         {
; 189  :             LowAddress = (SpritePatternBase + (Sprite.Tile * 16)) + TileRelY;

  00149	0f b7 44 24 24	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  0014e	0f b6 4c 24 2d	 movzx	 ecx, BYTE PTR Sprite$3[rsp+1]
  00153	6b c9 10	 imul	 ecx, ecx, 16
  00156	03 c1		 add	 eax, ecx
  00158	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR TileRelY$1[rsp]
  0015d	03 c1		 add	 eax, ecx
  0015f	48 98		 cdqe
  00161	48 89 44 24 38	 mov	 QWORD PTR LowAddress$5[rsp], rax

; 190  :             HighAddress = (SpritePatternBase + (Sprite.Tile * 16) + 8) + TileRelY;

  00166	0f b7 44 24 24	 movzx	 eax, WORD PTR SpritePatternBase$[rsp]
  0016b	0f b6 4c 24 2d	 movzx	 ecx, BYTE PTR Sprite$3[rsp+1]
  00170	6b c9 10	 imul	 ecx, ecx, 16
  00173	03 c1		 add	 eax, ecx
  00175	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR TileRelY$1[rsp]
  0017a	8d 44 08 08	 lea	 eax, DWORD PTR [rax+rcx+8]
  0017e	48 98		 cdqe
  00180	48 89 44 24 40	 mov	 QWORD PTR HighAddress$6[rsp], rax
$LN12@spriteEval:

; 191  :         }
; 192  :                     
; 193  :         Ppu->SpriteTileLow[SpriteIdx] = readPpu8(LowAddress, Ppu);

  00185	48 8b 54 24 60	 mov	 rdx, QWORD PTR Ppu$[rsp]
  0018a	0f b7 4c 24 38	 movzx	 ecx, WORD PTR LowAddress$5[rsp]
  0018f	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00194	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR SpriteIdx$2[rsp]
  00199	48 8b 54 24 60	 mov	 rdx, QWORD PTR Ppu$[rsp]
  0019e	88 84 0a 80 01
	00 00		 mov	 BYTE PTR [rdx+rcx+384], al

; 194  :         Ppu->SpriteTileHigh[SpriteIdx] = readPpu8(HighAddress, Ppu);                

  001a5	48 8b 54 24 60	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001aa	0f b7 4c 24 40	 movzx	 ecx, WORD PTR HighAddress$6[rsp]
  001af	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  001b4	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR SpriteIdx$2[rsp]
  001b9	48 8b 54 24 60	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001be	88 84 0a 88 01
	00 00		 mov	 BYTE PTR [rdx+rcx+392], al

; 195  :     }

  001c5	e9 62 fe ff ff	 jmp	 $LN2@spriteEval
$LN3@spriteEval:

; 196  : }

  001ca	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ce	c3		 ret	 0
?spriteEvaluation@@YAXPEAUppu@@@Z ENDP			; spriteEvaluation
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
PreparedCount$ = 0
OamSpriteCount$1 = 1
Sprite$2 = 8
Oam$ = 32
SecondaryOam$ = 40
Scanline$ = 48
?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z PROC	; evaluateSecondaryOam

; 131  : {

  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 18	 sub	 rsp, 24

; 132  :     uint8 PreparedCount = 0;

  00014	c6 04 24 00	 mov	 BYTE PTR PreparedCount$[rsp], 0

; 133  :             
; 134  :     for(uint8 OamSpriteCount = 0; OamSpriteCount < OAM_SPRITE_TOTAL; ++OamSpriteCount)

  00018	c6 44 24 01 00	 mov	 BYTE PTR OamSpriteCount$1[rsp], 0
  0001d	eb 0b		 jmp	 SHORT $LN4@evaluateSe
$LN2@evaluateSe:
  0001f	0f b6 44 24 01	 movzx	 eax, BYTE PTR OamSpriteCount$1[rsp]
  00024	fe c0		 inc	 al
  00026	88 44 24 01	 mov	 BYTE PTR OamSpriteCount$1[rsp], al
$LN4@evaluateSe:
  0002a	0f b6 44 24 01	 movzx	 eax, BYTE PTR OamSpriteCount$1[rsp]
  0002f	83 f8 40	 cmp	 eax, 64			; 00000040H
  00032	0f 8d 8d 00 00
	00		 jge	 $LN3@evaluateSe

; 135  :     {
; 136  :         oam_sprite *Sprite = (oam_sprite *)Oam + OamSpriteCount;

  00038	0f b6 44 24 01	 movzx	 eax, BYTE PTR OamSpriteCount$1[rsp]
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Oam$[rsp]
  00042	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00046	48 89 44 24 08	 mov	 QWORD PTR Sprite$2[rsp], rax

; 137  :         
; 138  :         if(Scanline >= Sprite->Y && Scanline < (Sprite->Y + PIXEL_PER_TILE))

  0004b	0f b7 44 24 30	 movzx	 eax, WORD PTR Scanline$[rsp]
  00050	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Sprite$2[rsp]
  00055	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00058	3b c1		 cmp	 eax, ecx
  0005a	7c 59		 jl	 SHORT $LN5@evaluateSe
  0005c	0f b7 44 24 30	 movzx	 eax, WORD PTR Scanline$[rsp]
  00061	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Sprite$2[rsp]
  00066	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00069	83 c1 08	 add	 ecx, 8
  0006c	3b c1		 cmp	 eax, ecx
  0006e	7d 45		 jge	 SHORT $LN5@evaluateSe

; 139  :         {
; 140  :             if(PreparedCount < SECOND_OAM_SPRITE_NUM)

  00070	0f b6 04 24	 movzx	 eax, BYTE PTR PreparedCount$[rsp]
  00074	83 f8 08	 cmp	 eax, 8
  00077	7d 1c		 jge	 SHORT $LN6@evaluateSe

; 141  :             {
; 142  :                 SecondaryOam[PreparedCount++] = *Sprite;

  00079	48 8b 44 24 08	 mov	 rax, QWORD PTR Sprite$2[rsp]
  0007e	8b 00		 mov	 eax, DWORD PTR [rax]
  00080	0f b6 0c 24	 movzx	 ecx, BYTE PTR PreparedCount$[rsp]
  00084	48 8b 54 24 28	 mov	 rdx, QWORD PTR SecondaryOam$[rsp]
  00089	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0008c	0f b6 04 24	 movzx	 eax, BYTE PTR PreparedCount$[rsp]
  00090	fe c0		 inc	 al
  00092	88 04 24	 mov	 BYTE PTR PreparedCount$[rsp], al
$LN6@evaluateSe:

; 143  :             }
; 144  :             if(Sprite->Y == 0xFF)

  00095	48 8b 44 24 08	 mov	 rax, QWORD PTR Sprite$2[rsp]
  0009a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0009d	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000a2	75 11		 jne	 SHORT $LN7@evaluateSe

; 145  :                 Assert(1);

  000a4	33 c0		 xor	 eax, eax
  000a6	85 c0		 test	 eax, eax
  000a8	74 0b		 je	 SHORT $LN8@evaluateSe
  000aa	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN8@evaluateSe:
$LN7@evaluateSe:
$LN5@evaluateSe:

; 146  :         }
; 147  : 
; 148  :         if(PreparedCount == SECOND_OAM_SPRITE_NUM)

  000b5	0f b6 04 24	 movzx	 eax, BYTE PTR PreparedCount$[rsp]
  000b9	83 f8 08	 cmp	 eax, 8
  000bc	75 02		 jne	 SHORT $LN9@evaluateSe

; 149  :             break;

  000be	eb 05		 jmp	 SHORT $LN3@evaluateSe
$LN9@evaluateSe:

; 150  :     }

  000c0	e9 5a ff ff ff	 jmp	 $LN2@evaluateSe
$LN3@evaluateSe:

; 151  : }

  000c5	48 83 c4 18	 add	 rsp, 24
  000c9	c3		 ret	 0
?evaluateSecondaryOam@@YAXPEAEPEAUoam_sprite@@G@Z ENDP	; evaluateSecondaryOam
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Byte$1 = 0
Data$ = 8
SecondaryOam$ = 32
?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z PROC		; clearSecondaryOam

; 120  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 121  :     uint8 *Data = (uint8 *)SecondaryOam;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR SecondaryOam$[rsp]
  0000e	48 89 44 24 08	 mov	 QWORD PTR Data$[rsp], rax

; 122  :     
; 123  :     for(uint16 Byte = 0; Byte < (SECOND_OAM_SPRITE_NUM * sizeof(oam_sprite)); ++Byte)

  00013	33 c0		 xor	 eax, eax
  00015	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
  00019	eb 0b		 jmp	 SHORT $LN4@clearSecon
$LN2@clearSecon:
  0001b	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  0001f	66 ff c0	 inc	 ax
  00022	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
$LN4@clearSecon:
  00026	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  0002a	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  0002e	73 0f		 jae	 SHORT $LN3@clearSecon

; 124  :     {
; 125  :         Data[Byte] = 0xFF;

  00030	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Data$[rsp]
  00039	c6 04 01 ff	 mov	 BYTE PTR [rcx+rax], 255	; 000000ffH

; 126  :     }

  0003d	eb dc		 jmp	 SHORT $LN2@clearSecon
$LN3@clearSecon:

; 127  : }

  0003f	48 83 c4 18	 add	 rsp, 24
  00043	c3		 ret	 0
?clearSecondaryOam@@YAXPEAUoam_sprite@@@Z ENDP		; clearSecondaryOam
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Cycle$ = 32
Atrb$1 = 33
NametableAddress$2 = 36
AtrbAddress$3 = 40
quadrantSelect$4 = 44
Ppu$ = 64
?loadFutureData@@YAXPEAUppu@@@Z PROC			; loadFutureData

; 77   : {                            

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 78   :     uint8 Cycle = (Ppu->ScanlineCycle - 1) % 8;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0000e	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00015	ff c8		 dec	 eax
  00017	99		 cdq
  00018	83 e2 07	 and	 edx, 7
  0001b	03 c2		 add	 eax, edx
  0001d	83 e0 07	 and	 eax, 7
  00020	2b c2		 sub	 eax, edx
  00022	88 44 24 20	 mov	 BYTE PTR Cycle$[rsp], al

; 79   :     if(Cycle == 0) 

  00026	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 a2 00 00
	00		 jne	 $LN2@loadFuture

; 80   :     {
; 81   :         LowPatternShiftReg = (LowPatternShiftReg << 8) | NextLowPattern;

  00033	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?LowPatternShiftReg@@3GA ; LowPatternShiftReg
  0003a	c1 e0 08	 shl	 eax, 8
  0003d	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?NextLowPattern@@3EA ; NextLowPattern
  00044	0b c1		 or	 eax, ecx
  00046	66 89 05 00 00
	00 00		 mov	 WORD PTR ?LowPatternShiftReg@@3GA, ax ; LowPatternShiftReg

; 82   :         HighPatternShiftReg = (HighPatternShiftReg << 8) | NextHighPattern;

  0004d	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?HighPatternShiftReg@@3GA ; HighPatternShiftReg
  00054	c1 e0 08	 shl	 eax, 8
  00057	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?NextHighPattern@@3EA ; NextHighPattern
  0005e	0b c1		 or	 eax, ecx
  00060	66 89 05 00 00
	00 00		 mov	 WORD PTR ?HighPatternShiftReg@@3GA, ax ; HighPatternShiftReg

; 83   :         PaletteLatchOld = PaletteLatchNew;

  00067	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?PaletteLatchNew@@3EA ; PaletteLatchNew
  0006e	88 05 00 00 00
	00		 mov	 BYTE PTR ?PaletteLatchOld@@3EA, al ; PaletteLatchOld

; 84   :         PaletteLatchNew = NextAtrbByte << 2;

  00074	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?NextAtrbByte@@3EA ; NextAtrbByte
  0007b	c1 e0 02	 shl	 eax, 2
  0007e	88 05 00 00 00
	00		 mov	 BYTE PTR ?PaletteLatchNew@@3EA, al ; PaletteLatchNew

; 85   :                 
; 86   :         uint16 NametableAddress = 0x2000 | (Ppu->VRamIO.VRamAdrs & 0x0FFF);

  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00089	0f b7 80 b4 01
	00 00		 movzx	 eax, WORD PTR [rax+436]
  00090	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00095	0f ba e8 0d	 bts	 eax, 13
  00099	66 89 44 24 24	 mov	 WORD PTR NametableAddress$2[rsp], ax

; 87   :         NextNametableAdrs = readPpu8(NametableAddress, Ppu) << 4;

  0009e	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  000a3	0f b7 4c 24 24	 movzx	 ecx, WORD PTR NametableAddress$2[rsp]
  000a8	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  000ad	0f b6 c0	 movzx	 eax, al
  000b0	c1 e0 04	 shl	 eax, 4
  000b3	66 89 05 00 00
	00 00		 mov	 WORD PTR ?NextNametableAdrs@@3GA, ax ; NextNametableAdrs

; 88   :         NextNametableAdrs += Ppu->BGPatternBase;

  000ba	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  000bf	0f b7 40 16	 movzx	 eax, WORD PTR [rax+22]
  000c3	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  000ca	03 c8		 add	 ecx, eax
  000cc	8b c1		 mov	 eax, ecx
  000ce	66 89 05 00 00
	00 00		 mov	 WORD PTR ?NextNametableAdrs@@3GA, ax ; NextNametableAdrs
$LN2@loadFuture:

; 89   :     }
; 90   :     if(Cycle == 2)

  000d5	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  000da	83 f8 02	 cmp	 eax, 2
  000dd	0f 85 9a 00 00
	00		 jne	 $LN3@loadFuture

; 91   :     {
; 92   :         uint16 AtrbAddress = 0x23C0 | (Ppu->VRamIO.VRamAdrs & 0x0C00) |
; 93   :             ((Ppu->VRamIO.VRamAdrs >> 4) & 0x38) | ((Ppu->VRamIO.VRamAdrs >> 2) & 0x07);   

  000e3	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  000e8	0f b7 80 b4 01
	00 00		 movzx	 eax, WORD PTR [rax+436]
  000ef	25 00 0c 00 00	 and	 eax, 3072		; 00000c00H
  000f4	0d c0 23 00 00	 or	 eax, 9152		; 000023c0H
  000f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  000fe	0f b7 89 b4 01
	00 00		 movzx	 ecx, WORD PTR [rcx+436]
  00105	c1 f9 04	 sar	 ecx, 4
  00108	83 e1 38	 and	 ecx, 56			; 00000038H
  0010b	0b c1		 or	 eax, ecx
  0010d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00112	0f b7 89 b4 01
	00 00		 movzx	 ecx, WORD PTR [rcx+436]
  00119	c1 f9 02	 sar	 ecx, 2
  0011c	83 e1 07	 and	 ecx, 7
  0011f	0b c1		 or	 eax, ecx
  00121	66 89 44 24 28	 mov	 WORD PTR AtrbAddress$3[rsp], ax

; 94   :         uint8 Atrb = readPpu8(AtrbAddress, Ppu);

  00126	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  0012b	0f b7 4c 24 28	 movzx	 ecx, WORD PTR AtrbAddress$3[rsp]
  00130	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00135	88 44 24 21	 mov	 BYTE PTR Atrb$1[rsp], al

; 95   :         int quadrantSelect = ((Ppu->VRamIO.VRamAdrs & 2) >> 1) | ((Ppu->VRamIO.VRamAdrs & 0x40) >> 5);

  00139	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0013e	0f b7 80 b4 01
	00 00		 movzx	 eax, WORD PTR [rax+436]
  00145	83 e0 02	 and	 eax, 2
  00148	d1 f8		 sar	 eax, 1
  0014a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0014f	0f b7 89 b4 01
	00 00		 movzx	 ecx, WORD PTR [rcx+436]
  00156	83 e1 40	 and	 ecx, 64			; 00000040H
  00159	c1 f9 05	 sar	 ecx, 5
  0015c	0b c1		 or	 eax, ecx
  0015e	89 44 24 2c	 mov	 DWORD PTR quadrantSelect$4[rsp], eax

; 96   :         
; 97   :         NextAtrbByte = ((0xFF & Atrb) >> (quadrantSelect*2)) & 3;       

  00162	0f b6 44 24 21	 movzx	 eax, BYTE PTR Atrb$1[rsp]
  00167	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0016c	8b 4c 24 2c	 mov	 ecx, DWORD PTR quadrantSelect$4[rsp]
  00170	d1 e1		 shl	 ecx, 1
  00172	d3 f8		 sar	 eax, cl
  00174	83 e0 03	 and	 eax, 3
  00177	88 05 00 00 00
	00		 mov	 BYTE PTR ?NextAtrbByte@@3EA, al ; NextAtrbByte
$LN3@loadFuture:

; 98   :     }   
; 99   :     if(Cycle == 4)

  0017d	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  00182	83 f8 04	 cmp	 eax, 4
  00185	75 3c		 jne	 SHORT $LN4@loadFuture

; 100  :     {        
; 101  :         NextNametableAdrs = NextNametableAdrs + ((Ppu->VRamIO.VRamAdrs & 0x7000) >> 12);

  00187	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  0018e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00193	0f b7 89 b4 01
	00 00		 movzx	 ecx, WORD PTR [rcx+436]
  0019a	81 e1 00 70 00
	00		 and	 ecx, 28672		; 00007000H
  001a0	c1 f9 0c	 sar	 ecx, 12
  001a3	03 c1		 add	 eax, ecx
  001a5	66 89 05 00 00
	00 00		 mov	 WORD PTR ?NextNametableAdrs@@3GA, ax ; NextNametableAdrs

; 102  :         NextLowPattern = readPpu8(NextNametableAdrs, Ppu);

  001ac	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001b1	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  001b8	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  001bd	88 05 00 00 00
	00		 mov	 BYTE PTR ?NextLowPattern@@3EA, al ; NextLowPattern
$LN4@loadFuture:

; 103  :     }
; 104  :     if(Cycle == 6)

  001c3	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  001c8	83 f8 06	 cmp	 eax, 6
  001cb	75 1d		 jne	 SHORT $LN5@loadFuture

; 105  :     {
; 106  :         NextHighPattern = readPpu8(NextNametableAdrs+8, Ppu);

  001cd	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ?NextNametableAdrs@@3GA ; NextNametableAdrs
  001d4	83 c0 08	 add	 eax, 8
  001d7	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001dc	0f b7 c8	 movzx	 ecx, ax
  001df	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  001e4	88 05 00 00 00
	00		 mov	 BYTE PTR ?NextHighPattern@@3EA, al ; NextHighPattern
$LN5@loadFuture:

; 107  :     }           
; 108  :     if(Cycle == 7)

  001ea	0f b6 44 24 20	 movzx	 eax, BYTE PTR Cycle$[rsp]
  001ef	83 f8 07	 cmp	 eax, 7
  001f2	75 13		 jne	 SHORT $LN6@loadFuture

; 109  :     {
; 110  :         scrollIncHorz(&Ppu->VRamIO);

  001f4	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  001f9	48 05 b4 01 00
	00		 add	 rax, 436		; 000001b4H
  001ff	48 8b c8	 mov	 rcx, rax
  00202	e8 00 00 00 00	 call	 ?scrollIncHorz@@YAXPEAUvram_io@@@Z ; scrollIncHorz
$LN6@loadFuture:

; 111  :     }
; 112  :     
; 113  :     if(Ppu->ScanlineCycle == 256)

  00207	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0020c	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00213	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00218	75 13		 jne	 SHORT $LN7@loadFuture

; 114  :     {
; 115  :         scrollIncVert(&Ppu->VRamIO);

  0021a	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0021f	48 05 b4 01 00
	00		 add	 rax, 436		; 000001b4H
  00225	48 8b c8	 mov	 rcx, rax
  00228	e8 00 00 00 00	 call	 ?scrollIncVert@@YAXPEAUvram_io@@@Z ; scrollIncVert
$LN7@loadFuture:

; 116  :     }
; 117  : }

  0022d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00231	c3		 ret	 0
?loadFutureData@@YAXPEAUppu@@@Z ENDP			; loadFutureData
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
y$1 = 0
Vram$ = 32
?scrollIncVert@@YAXPEAUvram_io@@@Z PROC			; scrollIncVert

; 52   : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 53   :     // NOTE: Code take from nesdev wiki. Could be quicker??
; 54   :     if ((Vram->VRamAdrs & 0x7000) != 0x7000) // if fine Y < 7

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	25 00 70 00 00	 and	 eax, 28672		; 00007000H
  00016	3d 00 70 00 00	 cmp	 eax, 28672		; 00007000H
  0001b	74 1a		 je	 SHORT $LN2@scrollIncV

; 55   :         Vram->VRamAdrs += 0x1000; // increment fine Y

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  00022	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00025	05 00 10 00 00	 add	 eax, 4096		; 00001000H
  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  0002f	66 89 01	 mov	 WORD PTR [rcx], ax

; 56   :     else

  00032	e9 87 00 00 00	 jmp	 $LN3@scrollIncV
$LN2@scrollIncV:

; 57   :     {
; 58   :         Vram->VRamAdrs &= ~0x7000; // fine Y = 0        

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  0003c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0003f	25 ff 8f ff ff	 and	 eax, -28673		; ffffffffffff8fffH
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  00049	66 89 01	 mov	 WORD PTR [rcx], ax

; 59   :         uint16 y = (Vram->VRamAdrs & 0x03E0) >> 5 ; // let y = coarse Y

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  00051	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00054	25 e0 03 00 00	 and	 eax, 992		; 000003e0H
  00059	c1 f8 05	 sar	 eax, 5
  0005c	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 60   :     
; 61   :         if (y == 29)

  00060	0f b7 04 24	 movzx	 eax, WORD PTR y$1[rsp]
  00064	83 f8 1d	 cmp	 eax, 29
  00067	75 1c		 jne	 SHORT $LN4@scrollIncV

; 62   :         {
; 63   :             y = 0; // coarse Y = 0

  00069	33 c0		 xor	 eax, eax
  0006b	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 64   :             Vram->VRamAdrs ^= 0x0800; // switch vertical nametable

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  00074	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00077	0f ba f8 0b	 btc	 eax, 11
  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  00080	66 89 01	 mov	 WORD PTR [rcx], ax
  00083	eb 39		 jmp	 SHORT $LN5@scrollIncV
$LN4@scrollIncV:

; 65   :         }
; 66   :         else if (y == 31)

  00085	0f b7 04 24	 movzx	 eax, WORD PTR y$1[rsp]
  00089	83 f8 1f	 cmp	 eax, 31
  0008c	75 08		 jne	 SHORT $LN6@scrollIncV

; 67   :             y = 0; // coarse Y = 0, nametable not switched

  0008e	33 c0		 xor	 eax, eax
  00090	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 68   :         else

  00094	eb 28		 jmp	 SHORT $LN7@scrollIncV
$LN6@scrollIncV:

; 69   :         {
; 70   :             y += 1; // increment coarse Y

  00096	0f b7 04 24	 movzx	 eax, WORD PTR y$1[rsp]
  0009a	ff c0		 inc	 eax
  0009c	66 89 04 24	 mov	 WORD PTR y$1[rsp], ax

; 71   :             Vram->VRamAdrs = (Vram->VRamAdrs & ~0x03E0) | (y << 5); // put coarse Y back into v

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR Vram$[rsp]
  000a5	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000a8	25 1f fc ff ff	 and	 eax, -993		; fffffffffffffc1fH
  000ad	0f b7 0c 24	 movzx	 ecx, WORD PTR y$1[rsp]
  000b1	c1 e1 05	 shl	 ecx, 5
  000b4	0b c1		 or	 eax, ecx
  000b6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Vram$[rsp]
  000bb	66 89 01	 mov	 WORD PTR [rcx], ax
$LN7@scrollIncV:
$LN5@scrollIncV:
$LN3@scrollIncV:

; 72   :         }
; 73   :     }
; 74   : }

  000be	48 83 c4 18	 add	 rsp, 24
  000c2	c3		 ret	 0
?scrollIncVert@@YAXPEAUvram_io@@@Z ENDP			; scrollIncVert
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
Vram$ = 8
?scrollIncHorz@@YAXPEAUvram_io@@@Z PROC			; scrollIncHorz

; 40   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 41   : //NOTE: Code take from nesdev wiki. Could be quicker??
; 42   :     if ((Vram->VRamAdrs & 0x001F) == 31) // if coarse X == 31

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0000d	83 e0 1f	 and	 eax, 31
  00010	83 f8 1f	 cmp	 eax, 31
  00013	75 29		 jne	 SHORT $LN2@scrollIncH

; 43   :     {
; 44   :         Vram->VRamAdrs &= ~0x001F;  // coarse X = 0

  00015	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  0001a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0001d	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  00020	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Vram$[rsp]
  00025	66 89 01	 mov	 WORD PTR [rcx], ax

; 45   :         Vram->VRamAdrs ^= 0x0400;   // switch horizontal nametable

  00028	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00030	0f ba f8 0a	 btc	 eax, 10
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Vram$[rsp]
  00039	66 89 01	 mov	 WORD PTR [rcx], ax

; 46   :     }
; 47   :     else

  0003c	eb 12		 jmp	 SHORT $LN3@scrollIncH
$LN2@scrollIncH:

; 48   :         Vram->VRamAdrs += 1;                // increment coarse X

  0003e	48 8b 44 24 08	 mov	 rax, QWORD PTR Vram$[rsp]
  00043	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00046	ff c0		 inc	 eax
  00048	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Vram$[rsp]
  0004d	66 89 01	 mov	 WORD PTR [rcx], ax
$LN3@scrollIncH:

; 49   : }

  00050	c3		 ret	 0
?scrollIncHorz@@YAXPEAUvram_io@@@Z ENDP			; scrollIncHorz
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
VRamIO$ = 8
?resetScrollVert@@YAXPEAUvram_io@@@Z PROC		; resetScrollVert

; 35   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 36   :     VRamIO->VRamAdrs = VRamIO->TempVRamAdrs;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0000a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0000f	0f b7 49 02	 movzx	 ecx, WORD PTR [rcx+2]
  00013	66 89 08	 mov	 WORD PTR [rax], cx

; 37   : }

  00016	c3		 ret	 0
?resetScrollVert@@YAXPEAUvram_io@@@Z ENDP		; resetScrollVert
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
VRamIO$ = 8
?resetScrollHorz@@YAXPEAUvram_io@@@Z PROC		; resetScrollHorz

; 29   : {   

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 30   :     VRamIO->VRamAdrs &= ~(0x041F);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0000d	25 e0 fb ff ff	 and	 eax, -1056		; fffffffffffffbe0H
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00017	66 89 01	 mov	 WORD PTR [rcx], ax

; 31   :     VRamIO->VRamAdrs |= (VRamIO->TempVRamAdrs & 0x041F);

  0001a	48 8b 44 24 08	 mov	 rax, QWORD PTR VRamIO$[rsp]
  0001f	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00023	25 1f 04 00 00	 and	 eax, 1055		; 0000041fH
  00028	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  0002d	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00030	0b c8		 or	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR VRamIO$[rsp]
  00039	66 89 01	 mov	 WORD PTR [rcx], ax

; 32   : }

  0003c	c3		 ret	 0
?resetScrollHorz@@YAXPEAUvram_io@@@Z ENDP		; resetScrollHorz
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\ppu.cpp
_TEXT	SEGMENT
CurrentPixel$ = 0
Ppu$ = 32
X$ = 40
Y$ = 48
Colour$ = 56
?drawPixel@@YAXPEAUppu@@GGPEAE@Z PROC			; drawPixel

; 13   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00010	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00015	48 83 ec 18	 sub	 rsp, 24

; 14   :     uint32 *CurrentPixel = (Ppu->BasePixel + (Y * PIXEL_WIDTH)) + X;

  00019	0f b7 44 24 30	 movzx	 eax, WORD PTR Y$[rsp]
  0001e	69 c0 00 01 00
	00		 imul	 eax, eax, 256		; 00000100H
  00024	48 98		 cdqe
  00026	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0002b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0002f	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00033	0f b7 4c 24 28	 movzx	 ecx, WORD PTR X$[rsp]
  00038	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0003c	48 89 04 24	 mov	 QWORD PTR CurrentPixel$[rsp], rax

; 15   :     *CurrentPixel  = ((Colour[0] << 16) | (Colour[1] << 8) | Colour[2]);

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	48 6b c0 00	 imul	 rax, rax, 0
  00049	48 8b 4c 24 38	 mov	 rcx, QWORD PTR Colour$[rsp]
  0004e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00052	c1 e0 10	 shl	 eax, 16
  00055	b9 01 00 00 00	 mov	 ecx, 1
  0005a	48 6b c9 01	 imul	 rcx, rcx, 1
  0005e	48 8b 54 24 38	 mov	 rdx, QWORD PTR Colour$[rsp]
  00063	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00067	c1 e1 08	 shl	 ecx, 8
  0006a	0b c1		 or	 eax, ecx
  0006c	b9 01 00 00 00	 mov	 ecx, 1
  00071	48 6b c9 02	 imul	 rcx, rcx, 2
  00075	48 8b 54 24 38	 mov	 rdx, QWORD PTR Colour$[rsp]
  0007a	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007e	0b c1		 or	 eax, ecx
  00080	48 8b 0c 24	 mov	 rcx, QWORD PTR CurrentPixel$[rsp]
  00084	89 01		 mov	 DWORD PTR [rcx], eax

; 16   : }

  00086	48 83 c4 18	 add	 rsp, 24
  0008a	c3		 ret	 0
?drawPixel@@YAXPEAUppu@@GGPEAE@Z ENDP			; drawPixel
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\palette.cpp
_TEXT	SEGMENT
Entry$ = 8
Colour$ = 16
?getPaletteValue@@YAXEPEAE@Z PROC			; getPaletteValue

; 31   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 32   :     Colour[0] = Palette[Entry][0];

  00009	0f b6 44 24 08	 movzx	 eax, BYTE PTR Entry$[rsp]
  0000e	48 6b c0 03	 imul	 rax, rax, 3
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Palette@@3PAY02EA ; Palette
  00019	48 03 c8	 add	 rcx, rax
  0001c	48 8b c1	 mov	 rax, rcx
  0001f	b9 01 00 00 00	 mov	 ecx, 1
  00024	48 6b c9 00	 imul	 rcx, rcx, 0
  00028	ba 01 00 00 00	 mov	 edx, 1
  0002d	48 6b d2 00	 imul	 rdx, rdx, 0
  00031	4c 8b 44 24 10	 mov	 r8, QWORD PTR Colour$[rsp]
  00036	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0003a	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al

; 33   :     Colour[1] = Palette[Entry][1];

  0003e	0f b6 44 24 08	 movzx	 eax, BYTE PTR Entry$[rsp]
  00043	48 6b c0 03	 imul	 rax, rax, 3
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Palette@@3PAY02EA ; Palette
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	48 6b c9 01	 imul	 rcx, rcx, 1
  0005d	ba 01 00 00 00	 mov	 edx, 1
  00062	48 6b d2 01	 imul	 rdx, rdx, 1
  00066	4c 8b 44 24 10	 mov	 r8, QWORD PTR Colour$[rsp]
  0006b	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0006f	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al

; 34   :     Colour[2]  = Palette[Entry][2];

  00073	0f b6 44 24 08	 movzx	 eax, BYTE PTR Entry$[rsp]
  00078	48 6b c0 03	 imul	 rax, rax, 3
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?Palette@@3PAY02EA ; Palette
  00083	48 03 c8	 add	 rcx, rax
  00086	48 8b c1	 mov	 rax, rcx
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	48 6b c9 02	 imul	 rcx, rcx, 2
  00092	ba 01 00 00 00	 mov	 edx, 1
  00097	48 6b d2 02	 imul	 rdx, rdx, 2
  0009b	4c 8b 44 24 10	 mov	 r8, QWORD PTR Colour$[rsp]
  000a0	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  000a4	41 88 04 10	 mov	 BYTE PTR [r8+rdx], al

; 35   : }

  000a8	c3		 ret	 0
?getPaletteValue@@YAXEPEAE@Z ENDP			; getPaletteValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
Byte$ = 48
Address$ = 56
Ppu$ = 64
?writePpu8@@YAXEGPEAUppu@@@Z PROC			; writePpu8

; 224  : {    

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 225  :     Address = ppuMemoryMirror(Address);

  00012	0f b7 4c 24 38	 movzx	 ecx, WORD PTR Address$[rsp]
  00017	e8 00 00 00 00	 call	 ?ppuMemoryMirror@@YAGG@Z ; ppuMemoryMirror
  0001c	66 89 44 24 38	 mov	 WORD PTR Address$[rsp], ax

; 226  :     write8(Byte, Address, Ppu->MemoryBase);

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00026	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00029	0f b7 54 24 38	 movzx	 edx, WORD PTR Address$[rsp]
  0002e	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00033	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8

; 227  : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
?writePpu8@@YAXEGPEAUppu@@@Z ENDP			; writePpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
Result$ = 32
Address$ = 64
Ppu$ = 72
?readPpu8@@YAEGPEAUppu@@@Z PROC				; readPpu8

; 217  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 218  :     Address = ppuMemoryMirror(Address);

  0000e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00013	e8 00 00 00 00	 call	 ?ppuMemoryMirror@@YAGG@Z ; ppuMemoryMirror
  00018	66 89 44 24 40	 mov	 WORD PTR Address$[rsp], ax

; 219  :          
; 220  :     uint8 Result = read8(Address, Ppu->MemoryBase);

  0001d	48 8b 44 24 48	 mov	 rax, QWORD PTR Ppu$[rsp]
  00022	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00025	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0002a	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  0002f	88 44 24 20	 mov	 BYTE PTR Result$[rsp], al

; 221  :     return(Result);

  00033	0f b6 44 24 20	 movzx	 eax, BYTE PTR Result$[rsp]

; 222  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
?readPpu8@@YAEGPEAUppu@@@Z ENDP				; readPpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
BtnValue$1 = 32
Bit0$2 = 33
Reg1Value$3 = 34
Reg2Value$4 = 35
Byte$ = 64
Address$ = 72
Cpu$ = 80
?writeCpu8@@YAXEGPEAUcpu@@@Z PROC			; writeCpu8

; 166  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 167  :     Address = cpuMemoryMirror(Address);

  00012	0f b7 4c 24 48	 movzx	 ecx, WORD PTR Address$[rsp]
  00017	e8 00 00 00 00	 call	 ?cpuMemoryMirror@@YAGG@Z ; cpuMemoryMirror
  0001c	66 89 44 24 48	 mov	 WORD PTR Address$[rsp], ax

; 168  : 
; 169  : 
; 170  :     if((0x2000 <= Address && Address < 0x2008) ||

  00021	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00026	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0002b	7c 0c		 jl	 SHORT $LN4@writeCpu8
  0002d	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00032	3d 08 20 00 00	 cmp	 eax, 8200		; 00002008H
  00037	7c 0c		 jl	 SHORT $LN3@writeCpu8
$LN4@writeCpu8:
  00039	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  0003e	3d 14 40 00 00	 cmp	 eax, 16404		; 00004014H
  00043	75 0f		 jne	 SHORT $LN2@writeCpu8
$LN3@writeCpu8:

; 171  :        (Address == 0x4014))
; 172  :     {
; 173  :         writePpuRegister(Byte, Address);

  00045	0f b7 54 24 48	 movzx	 edx, WORD PTR Address$[rsp]
  0004a	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR Byte$[rsp]
  0004f	e8 00 00 00 00	 call	 ?writePpuRegister@@YAXEG@Z ; writePpuRegister
$LN2@writeCpu8:

; 174  :     }
; 175  :     
; 176  :     write8(Byte, Address, Cpu->MemoryBase);

  00054	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00059	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  0005d	0f b7 54 24 48	 movzx	 edx, WORD PTR Address$[rsp]
  00062	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00067	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8

; 177  :     
; 178  :     // Input
; 179  :     if(Address == 0x4016 || Address == 0x4017)

  0006c	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00071	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  00076	74 10		 je	 SHORT $LN6@writeCpu8
  00078	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  0007d	3d 17 40 00 00	 cmp	 eax, 16407		; 00004017H
  00082	0f 85 e9 00 00
	00		 jne	 $LN5@writeCpu8
$LN6@writeCpu8:

; 180  :     {
; 181  :         uint8 Reg1Value = read8(0x4016, Cpu->MemoryBase);

  00088	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0008d	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00091	66 b9 16 40	 mov	 cx, 16406		; 00004016H
  00095	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  0009a	88 44 24 22	 mov	 BYTE PTR Reg1Value$3[rsp], al

; 182  :         uint8 Reg2Value = read8(0x4017, Cpu->MemoryBase);

  0009e	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  000a3	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000a7	66 b9 17 40	 mov	 cx, 16407		; 00004017H
  000ab	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  000b0	88 44 24 23	 mov	 BYTE PTR Reg2Value$4[rsp], al

; 183  : 
; 184  :         uint8 Bit0 = (Reg1Value | Reg2Value) & 1;

  000b4	0f b6 44 24 22	 movzx	 eax, BYTE PTR Reg1Value$3[rsp]
  000b9	0f b6 4c 24 23	 movzx	 ecx, BYTE PTR Reg2Value$4[rsp]
  000be	0b c1		 or	 eax, ecx
  000c0	83 e0 01	 and	 eax, 1
  000c3	88 44 24 21	 mov	 BYTE PTR Bit0$2[rsp], al

; 185  : 
; 186  :         if(Bit0 == 0)

  000c7	0f b6 44 24 21	 movzx	 eax, BYTE PTR Bit0$2[rsp]
  000cc	85 c0		 test	 eax, eax
  000ce	75 2b		 jne	 SHORT $LN7@writeCpu8

; 187  :         {
; 188  :             if(Cpu->PadStrobe)

  000d0	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d5	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  000d9	74 12		 je	 SHORT $LN9@writeCpu8

; 189  :             {
; 190  :                 Cpu->Pad1CurrentButton = Cpu->Pad2CurrentButton = input::B_A;

  000db	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e0	c6 40 64 00	 mov	 BYTE PTR [rax+100], 0
  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e9	c6 40 40 00	 mov	 BYTE PTR [rax+64], 0
$LN9@writeCpu8:

; 191  :             }
; 192  :             Cpu->PadStrobe = false;

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  000f2	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [rax+28], 0
  000f9	eb 16		 jmp	 SHORT $LN8@writeCpu8
$LN7@writeCpu8:

; 193  :         }
; 194  :         else if(Bit0 == 1)

  000fb	0f b6 44 24 21	 movzx	 eax, BYTE PTR Bit0$2[rsp]
  00100	83 f8 01	 cmp	 eax, 1
  00103	75 0c		 jne	 SHORT $LN10@writeCpu8

; 195  :         {
; 196  :             Cpu->PadStrobe = true;

  00105	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0010a	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [rax+28], 1
$LN10@writeCpu8:
$LN8@writeCpu8:

; 197  :         }        
; 198  : 
; 199  :         uint8 BtnValue = Cpu->InputPad1.buttons[Cpu->Pad1CurrentButton] & 1;

  00111	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00116	0f b6 40 40	 movzx	 eax, BYTE PTR [rax+64]
  0011a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0011f	8b 44 81 20	 mov	 eax, DWORD PTR [rcx+rax*4+32]
  00123	83 e0 01	 and	 eax, 1
  00126	88 44 24 20	 mov	 BYTE PTR BtnValue$1[rsp], al

; 200  :         write8(BtnValue, 0x4016, Cpu->MemoryBase);

  0012a	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0012f	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00133	66 ba 16 40	 mov	 dx, 16406		; 00004016H
  00137	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR BtnValue$1[rsp]
  0013c	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8

; 201  : 
; 202  :         BtnValue = Cpu->InputPad2.buttons[Cpu->Pad2CurrentButton] & 1;

  00141	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00146	0f b6 40 64	 movzx	 eax, BYTE PTR [rax+100]
  0014a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Cpu$[rsp]
  0014f	8b 44 81 44	 mov	 eax, DWORD PTR [rcx+rax*4+68]
  00153	83 e0 01	 and	 eax, 1
  00156	88 44 24 20	 mov	 BYTE PTR BtnValue$1[rsp], al

; 203  :         write8(BtnValue, 0x4017, Cpu->MemoryBase);

  0015a	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0015f	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00163	66 ba 17 40	 mov	 dx, 16407		; 00004017H
  00167	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR BtnValue$1[rsp]
  0016c	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8
$LN5@writeCpu8:

; 204  :     }
; 205  : 
; 206  :     // Mapper
; 207  :     if(Address >= 0x8000)

  00171	0f b7 44 24 48	 movzx	 eax, WORD PTR Address$[rsp]
  00176	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  0017b	7c 27		 jl	 SHORT $LN11@writeCpu8

; 208  :     {
; 209  :         Cpu->MapperWrite = true;

  0017d	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  00182	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [rax+20], 1

; 210  :         Cpu->MapperReg = Byte;

  00189	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0018e	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00193	88 48 10	 mov	 BYTE PTR [rax+16], cl

; 211  :         Cpu->MapperWriteAddress = Address;

  00196	48 8b 44 24 50	 mov	 rax, QWORD PTR Cpu$[rsp]
  0019b	0f b7 4c 24 48	 movzx	 ecx, WORD PTR Address$[rsp]
  001a0	66 89 48 12	 mov	 WORD PTR [rax+18], cx
$LN11@writeCpu8:

; 212  :     }
; 213  : }

  001a4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001a8	c3		 ret	 0
?writeCpu8@@YAXEGPEAUcpu@@@Z ENDP			; writeCpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
Byte2Adrs$ = 36
NewAddress$ = 40
Address$ = 64
Cpu$ = 72
?bugReadCpu16@@YAGGPEAUcpu@@@Z PROC			; bugReadCpu16

; 153  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 154  :     // NOTE: This is a bug in the nes 6502 that will wrap the value instead of going to new page.
; 155  :     //       Only happens with indirect addressing.
; 156  :     
; 157  :     uint8 LowByte = readCpu8(Address, Cpu);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00013	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00018	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0001d	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 158  :     uint16 Byte2Adrs = (Address & 0xFF00) | (uint16)((uint8)(Address + 1));

  00021	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00026	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  0002b	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00030	ff c1		 inc	 ecx
  00032	0f b6 c9	 movzx	 ecx, cl
  00035	0b c1		 or	 eax, ecx
  00037	66 89 44 24 24	 mov	 WORD PTR Byte2Adrs$[rsp], ax

; 159  :     uint8 HighByte = readCpu8(Byte2Adrs, Cpu);

  0003c	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00041	0f b7 4c 24 24	 movzx	 ecx, WORD PTR Byte2Adrs$[rsp]
  00046	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0004b	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 160  :         
; 161  :     uint16 NewAddress = (HighByte << 8) | LowByte;

  0004f	0f b6 44 24 20	 movzx	 eax, BYTE PTR HighByte$[rsp]
  00054	c1 e0 08	 shl	 eax, 8
  00057	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  0005c	0b c1		 or	 eax, ecx
  0005e	66 89 44 24 28	 mov	 WORD PTR NewAddress$[rsp], ax

; 162  :     return(NewAddress);

  00063	0f b7 44 24 28	 movzx	 eax, WORD PTR NewAddress$[rsp]

; 163  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
?bugReadCpu16@@YAGGPEAUcpu@@@Z ENDP			; bugReadCpu16
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
HighByte$ = 32
LowByte$ = 33
NewAddress$ = 36
Address$ = 64
Cpu$ = 72
?readCpu16@@YAGGPEAUcpu@@@Z PROC			; readCpu16

; 143  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 144  :     // NOTE: Little Endian
; 145  :     uint8 LowByte = readCpu8(Address, Cpu);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  00013	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00018	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  0001d	88 44 24 21	 mov	 BYTE PTR LowByte$[rsp], al

; 146  :     uint8 HighByte = readCpu8(Address+1, Cpu);

  00021	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00026	ff c0		 inc	 eax
  00028	48 8b 54 24 48	 mov	 rdx, QWORD PTR Cpu$[rsp]
  0002d	0f b7 c8	 movzx	 ecx, ax
  00030	e8 00 00 00 00	 call	 ?readCpu8@@YAEGPEAUcpu@@@Z ; readCpu8
  00035	88 44 24 20	 mov	 BYTE PTR HighByte$[rsp], al

; 147  :         
; 148  :     uint16 NewAddress = (HighByte << 8) | LowByte;

  00039	0f b6 44 24 20	 movzx	 eax, BYTE PTR HighByte$[rsp]
  0003e	c1 e0 08	 shl	 eax, 8
  00041	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR LowByte$[rsp]
  00046	0b c1		 or	 eax, ecx
  00048	66 89 44 24 24	 mov	 WORD PTR NewAddress$[rsp], ax

; 149  :     return(NewAddress);

  0004d	0f b7 44 24 24	 movzx	 eax, WORD PTR NewAddress$[rsp]

; 150  : }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
?readCpu16@@YAGGPEAUcpu@@@Z ENDP			; readCpu16
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
tv89 = 32
tv93 = 33
BtnValue$1 = 34
CurrentValue$2 = 35
NewValue$3 = 36
Value$ = 37
InputAddress$4 = 40
Address$ = 64
Cpu$ = 72
?readCpu8@@YAEGPEAUcpu@@@Z PROC				; readCpu8

; 99   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 100  :     Address = cpuMemoryMirror(Address);

  0000e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00013	e8 00 00 00 00	 call	 ?cpuMemoryMirror@@YAGG@Z ; cpuMemoryMirror
  00018	66 89 44 24 40	 mov	 WORD PTR Address$[rsp], ax

; 101  : 
; 102  :     if((0x2000 <= Address && Address < 0x2008) ||

  0001d	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00022	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00027	7c 0c		 jl	 SHORT $LN4@readCpu8
  00029	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  0002e	3d 08 20 00 00	 cmp	 eax, 8200		; 00002008H
  00033	7c 0c		 jl	 SHORT $LN3@readCpu8
$LN4@readCpu8:
  00035	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  0003a	3d 14 40 00 00	 cmp	 eax, 16404		; 00004014H
  0003f	75 0f		 jne	 SHORT $LN2@readCpu8
$LN3@readCpu8:

; 103  :        (Address == 0x4014))
; 104  :     {
; 105  :         return readPpuRegister(Address);

  00041	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  00046	e8 00 00 00 00	 call	 ?readPpuRegister@@YAEG@Z ; readPpuRegister
  0004b	e9 3b 01 00 00	 jmp	 $LN1@readCpu8
$LN2@readCpu8:

; 106  :     }
; 107  :    
; 108  :     uint8 Value = read8(Address, Cpu->MemoryBase);

  00050	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00055	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00059	0f b7 4c 24 40	 movzx	 ecx, WORD PTR Address$[rsp]
  0005e	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00063	88 44 24 25	 mov	 BYTE PTR Value$[rsp], al

; 109  :     
; 110  :     // Input
; 111  :     if(Address == 0x4016 || Address == 0x4017)

  00067	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  0006c	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  00071	74 10		 je	 SHORT $LN6@readCpu8
  00073	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00078	3d 17 40 00 00	 cmp	 eax, 16407		; 00004017H
  0007d	0f 85 03 01 00
	00		 jne	 $LN5@readCpu8
$LN6@readCpu8:

; 112  :     {
; 113  :         if( !Cpu->PadStrobe )

  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00088	83 78 1c 00	 cmp	 DWORD PTR [rax+28], 0
  0008c	75 60		 jne	 SHORT $LN7@readCpu8

; 114  :         {
; 115  :             if(Address == 0x4016)

  0008e	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  00093	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  00098	75 2b		 jne	 SHORT $LN8@readCpu8

; 116  :                 Cpu->Pad1CurrentButton = ++(Cpu->Pad1CurrentButton);

  0009a	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0009f	0f b6 40 40	 movzx	 eax, BYTE PTR [rax+64]
  000a3	fe c0		 inc	 al
  000a5	88 44 24 20	 mov	 BYTE PTR tv89[rsp], al
  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ae	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv89[rsp]
  000b3	88 48 40	 mov	 BYTE PTR [rax+64], cl
  000b6	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000bb	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv89[rsp]
  000c0	88 48 40	 mov	 BYTE PTR [rax+64], cl

; 117  :             else

  000c3	eb 29		 jmp	 SHORT $LN9@readCpu8
$LN8@readCpu8:

; 118  :                 Cpu->Pad2CurrentButton = ++(Cpu->Pad2CurrentButton);

  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000ca	0f b6 40 64	 movzx	 eax, BYTE PTR [rax+100]
  000ce	fe c0		 inc	 al
  000d0	88 44 24 21	 mov	 BYTE PTR tv93[rsp], al
  000d4	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000d9	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv93[rsp]
  000de	88 48 64	 mov	 BYTE PTR [rax+100], cl
  000e1	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  000e6	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv93[rsp]
  000eb	88 48 64	 mov	 BYTE PTR [rax+100], cl
$LN9@readCpu8:
$LN7@readCpu8:

; 119  :         }
; 120  :         
; 121  :         uint16 InputAddress;
; 122  :         uint8 BtnValue;
; 123  :         if(Address == 0x4016)

  000ee	0f b7 44 24 40	 movzx	 eax, WORD PTR Address$[rsp]
  000f3	3d 16 40 00 00	 cmp	 eax, 16406		; 00004016H
  000f8	75 25		 jne	 SHORT $LN10@readCpu8

; 124  :         {
; 125  :             InputAddress = 0x4016;

  000fa	b8 16 40 00 00	 mov	 eax, 16406		; 00004016H
  000ff	66 89 44 24 28	 mov	 WORD PTR InputAddress$4[rsp], ax

; 126  :             BtnValue = Cpu->InputPad1.buttons[Cpu->Pad1CurrentButton] & 1;

  00104	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00109	0f b6 40 40	 movzx	 eax, BYTE PTR [rax+64]
  0010d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00112	8b 44 81 20	 mov	 eax, DWORD PTR [rcx+rax*4+32]
  00116	83 e0 01	 and	 eax, 1
  00119	88 44 24 22	 mov	 BYTE PTR BtnValue$1[rsp], al

; 127  :         }
; 128  :         else

  0011d	eb 23		 jmp	 SHORT $LN11@readCpu8
$LN10@readCpu8:

; 129  :         {
; 130  :             InputAddress = 0x4017;

  0011f	b8 17 40 00 00	 mov	 eax, 16407		; 00004017H
  00124	66 89 44 24 28	 mov	 WORD PTR InputAddress$4[rsp], ax

; 131  :             BtnValue = Cpu->InputPad2.buttons[Cpu->Pad2CurrentButton] & 1;

  00129	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  0012e	0f b6 40 64	 movzx	 eax, BYTE PTR [rax+100]
  00132	48 8b 4c 24 48	 mov	 rcx, QWORD PTR Cpu$[rsp]
  00137	8b 44 81 44	 mov	 eax, DWORD PTR [rcx+rax*4+68]
  0013b	83 e0 01	 and	 eax, 1
  0013e	88 44 24 22	 mov	 BYTE PTR BtnValue$1[rsp], al
$LN11@readCpu8:

; 132  :         }
; 133  : 
; 134  :         uint8 CurrentValue = read8(InputAddress, Cpu->MemoryBase);

  00142	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00147	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0014b	0f b7 4c 24 28	 movzx	 ecx, WORD PTR InputAddress$4[rsp]
  00150	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00155	88 44 24 23	 mov	 BYTE PTR CurrentValue$2[rsp], al

; 135  :         uint8 NewValue = (CurrentValue & 0xFE) | BtnValue;

  00159	0f b6 44 24 23	 movzx	 eax, BYTE PTR CurrentValue$2[rsp]
  0015e	25 fe 00 00 00	 and	 eax, 254		; 000000feH
  00163	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR BtnValue$1[rsp]
  00168	0b c1		 or	 eax, ecx
  0016a	88 44 24 24	 mov	 BYTE PTR NewValue$3[rsp], al

; 136  :         write8(NewValue, InputAddress, Cpu->MemoryBase);

  0016e	48 8b 44 24 48	 mov	 rax, QWORD PTR Cpu$[rsp]
  00173	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00177	0f b7 54 24 28	 movzx	 edx, WORD PTR InputAddress$4[rsp]
  0017c	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR NewValue$3[rsp]
  00181	e8 00 00 00 00	 call	 ?write8@@YAXEG_K@Z	; write8
$LN5@readCpu8:

; 137  :     }
; 138  :     
; 139  :     return(Value);

  00186	0f b6 44 24 25	 movzx	 eax, BYTE PTR Value$[rsp]
$LN1@readCpu8:

; 140  : }

  0018b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0018f	c3		 ret	 0
?readCpu8@@YAEGPEAUcpu@@@Z ENDP				; readCpu8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
tv140 = 0
Address$ = 32
?ppuMemoryMirror@@YAGG@Z PROC				; ppuMemoryMirror

; 35   : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	48 83 ec 18	 sub	 rsp, 24

; 36   :     if(Address >= 0x4000) // Over half of the memory map is mirrored

  00009	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0000e	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  00013	7c 1a		 jl	 SHORT $LN4@ppuMemoryM

; 37   :         Address = Address % 0x4000; 

  00015	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0001a	99		 cdq
  0001b	81 e2 ff 3f 00
	00		 and	 edx, 16383		; 00003fffH
  00021	03 c2		 add	 eax, edx
  00023	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  00028	2b c2		 sub	 eax, edx
  0002a	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN4@ppuMemoryM:

; 38   : 
; 39   :     if(0x3F20 <= Address && Address < 0x4000)

  0002f	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00034	3d 20 3f 00 00	 cmp	 eax, 16160		; 00003f20H
  00039	7c 26		 jl	 SHORT $LN5@ppuMemoryM
  0003b	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00040	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  00045	7d 1a		 jge	 SHORT $LN5@ppuMemoryM

; 40   :         Address = (Address % 0x20) + 0x3F00;

  00047	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0004c	99		 cdq
  0004d	83 e2 1f	 and	 edx, 31
  00050	03 c2		 add	 eax, edx
  00052	83 e0 1f	 and	 eax, 31
  00055	2b c2		 sub	 eax, edx
  00057	05 00 3f 00 00	 add	 eax, 16128		; 00003f00H
  0005c	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN5@ppuMemoryM:

; 41   :         
; 42   :     if(0x3F00 <= Address && Address < 0x3F20) // Palette

  00061	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00066	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  0006b	0f 8c 96 00 00
	00		 jl	 $LN6@ppuMemoryM
  00071	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00076	3d 20 3f 00 00	 cmp	 eax, 16160		; 00003f20H
  0007b	0f 8d 86 00 00
	00		 jge	 $LN6@ppuMemoryM

; 43   :     {
; 44   :         if(Address == 0x3F10)

  00081	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00086	3d 10 3f 00 00	 cmp	 eax, 16144		; 00003f10H
  0008b	75 0a		 jne	 SHORT $LN7@ppuMemoryM

; 45   :             Address = 0x3F00;

  0008d	b8 00 3f 00 00	 mov	 eax, 16128		; 00003f00H
  00092	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN7@ppuMemoryM:

; 46   :         if(Address == 0x3F14)

  00097	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0009c	3d 14 3f 00 00	 cmp	 eax, 16148		; 00003f14H
  000a1	75 0a		 jne	 SHORT $LN8@ppuMemoryM

; 47   :             Address = 0x3F04;

  000a3	b8 04 3f 00 00	 mov	 eax, 16132		; 00003f04H
  000a8	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN8@ppuMemoryM:

; 48   :         if(Address == 0x3F18)

  000ad	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000b2	3d 18 3f 00 00	 cmp	 eax, 16152		; 00003f18H
  000b7	75 0a		 jne	 SHORT $LN9@ppuMemoryM

; 49   :             Address = 0x3F08;

  000b9	b8 08 3f 00 00	 mov	 eax, 16136		; 00003f08H
  000be	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN9@ppuMemoryM:

; 50   :         if(Address == 0x3F1C)

  000c3	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000c8	3d 1c 3f 00 00	 cmp	 eax, 16156		; 00003f1cH
  000cd	75 0a		 jne	 SHORT $LN10@ppuMemoryM

; 51   :             Address = 0x3F0C;

  000cf	b8 0c 3f 00 00	 mov	 eax, 16140		; 00003f0cH
  000d4	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN10@ppuMemoryM:

; 52   :         if(Address == 0x3F04 || Address == 0x3F08 || Address == 0x3F0C)

  000d9	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000de	3d 04 3f 00 00	 cmp	 eax, 16132		; 00003f04H
  000e3	74 18		 je	 SHORT $LN12@ppuMemoryM
  000e5	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000ea	3d 08 3f 00 00	 cmp	 eax, 16136		; 00003f08H
  000ef	74 0c		 je	 SHORT $LN12@ppuMemoryM
  000f1	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  000f6	3d 0c 3f 00 00	 cmp	 eax, 16140		; 00003f0cH
  000fb	75 0a		 jne	 SHORT $LN11@ppuMemoryM
$LN12@ppuMemoryM:

; 53   :             Address = 0x3F00; // TODO: Palette hack implementation!? 

  000fd	b8 00 3f 00 00	 mov	 eax, 16128		; 00003f00H
  00102	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN11@ppuMemoryM:
$LN6@ppuMemoryM:

; 54   :     }
; 55   :    
; 56   :     // NOTE: Nametable Mirroring. Controlled by Cartridge
; 57   :     if(0x3000 <= Address && Address < 0x3F00) // This first as it maps to the nametable range

  00107	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0010c	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  00111	7c 25		 jl	 SHORT $LN13@ppuMemoryM
  00113	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00118	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  0011d	7d 19		 jge	 SHORT $LN13@ppuMemoryM

; 58   :         Address = (Address % 0x0F00) + 0x2000;

  0011f	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00124	99		 cdq
  00125	b9 00 0f 00 00	 mov	 ecx, 3840		; 00000f00H
  0012a	f7 f9		 idiv	 ecx
  0012c	8b c2		 mov	 eax, edx
  0012e	05 00 20 00 00	 add	 eax, 8192		; 00002000H
  00133	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN13@ppuMemoryM:

; 59   : 
; 60   :     // TODO: Set ppu to have the mirror type and send into this function. Use here instead of global mirror type
; 61   :     if(Address >= 0x2000 && Address < 0x3000) 

  00138	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0013d	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00142	0f 8c da 00 00
	00		 jl	 $LN14@ppuMemoryM
  00148	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  0014d	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  00152	0f 8d ca 00 00
	00		 jge	 $LN14@ppuMemoryM

; 62   :     {
; 63   :         switch(GlobalMirrorType)

  00158	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalMirrorType@@3EA
  0015f	88 04 24	 mov	 BYTE PTR tv140[rsp], al
  00162	80 3c 24 00	 cmp	 BYTE PTR tv140[rsp], 0
  00166	74 1b		 je	 SHORT $LN15@ppuMemoryM
  00168	80 3c 24 01	 cmp	 BYTE PTR tv140[rsp], 1
  0016c	74 36		 je	 SHORT $LN16@ppuMemoryM
  0016e	80 3c 24 02	 cmp	 BYTE PTR tv140[rsp], 2
  00172	74 59		 je	 SHORT $LN18@ppuMemoryM
  00174	80 3c 24 03	 cmp	 BYTE PTR tv140[rsp], 3
  00178	0f 84 90 00 00
	00		 je	 $LN22@ppuMemoryM
  0017e	e9 8d 00 00 00	 jmp	 $LN23@ppuMemoryM
$LN15@ppuMemoryM:

; 64   :         {
; 65   :             case SINGLE_SCREEN_MIRROR:
; 66   :             {
; 67   :                 Address = (Address % 0x0400) + 0x2000;

  00183	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00188	99		 cdq
  00189	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  0018f	03 c2		 add	 eax, edx
  00191	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00196	2b c2		 sub	 eax, edx
  00198	05 00 20 00 00	 add	 eax, 8192		; 00002000H
  0019d	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax

; 68   :                 break;

  001a2	eb 7e		 jmp	 SHORT $LN2@ppuMemoryM
$LN16@ppuMemoryM:

; 69   :             }
; 70   :             case VERTICAL_MIRROR:
; 71   :             {
; 72   :                 if(Address >= 0x2800 && Address < 0x3000)

  001a4	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001a9	3d 00 28 00 00	 cmp	 eax, 10240		; 00002800H
  001ae	7c 1b		 jl	 SHORT $LN17@ppuMemoryM
  001b0	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001b5	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  001ba	7d 0f		 jge	 SHORT $LN17@ppuMemoryM

; 73   :                     Address -= 0x0800;

  001bc	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001c1	2d 00 08 00 00	 sub	 eax, 2048		; 00000800H
  001c6	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN17@ppuMemoryM:

; 74   :                 break;

  001cb	eb 55		 jmp	 SHORT $LN2@ppuMemoryM
$LN18@ppuMemoryM:

; 75   :             }
; 76   :             case HORIZONTAL_MIRROR:
; 77   :             {
; 78   :                 if( (Address >= 0x2400 && Address < 0x2800) ||

  001cd	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001d2	3d 00 24 00 00	 cmp	 eax, 9216		; 00002400H
  001d7	7c 0c		 jl	 SHORT $LN21@ppuMemoryM
  001d9	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001de	3d 00 28 00 00	 cmp	 eax, 10240		; 00002800H
  001e3	7c 18		 jl	 SHORT $LN20@ppuMemoryM
$LN21@ppuMemoryM:
  001e5	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001ea	3d 00 2c 00 00	 cmp	 eax, 11264		; 00002c00H
  001ef	7c 1b		 jl	 SHORT $LN19@ppuMemoryM
  001f1	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  001f6	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  001fb	7d 0f		 jge	 SHORT $LN19@ppuMemoryM
$LN20@ppuMemoryM:

; 79   :                     (Address >= 0x2C00 && Address < 0x3000) )
; 80   :                     Address -= 0x0400; 

  001fd	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00202	2d 00 04 00 00	 sub	 eax, 1024		; 00000400H
  00207	66 89 44 24 20	 mov	 WORD PTR Address$[rsp], ax
$LN19@ppuMemoryM:

; 81   :                 break;

  0020c	eb 14		 jmp	 SHORT $LN2@ppuMemoryM
$LN22@ppuMemoryM:

; 82   :             }
; 83   :             case FOUR_SCREEN_MIRROR:
; 84   :             {
; 85   :                 break;

  0020e	eb 12		 jmp	 SHORT $LN2@ppuMemoryM
$LN23@ppuMemoryM:

; 86   :             }
; 87   :             default:
; 88   :             {
; 89   :                 Assert(0);

  00210	33 c0		 xor	 eax, eax
  00212	83 f8 01	 cmp	 eax, 1
  00215	74 0b		 je	 SHORT $LN24@ppuMemoryM
  00217	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN24@ppuMemoryM:
$LN2@ppuMemoryM:
$LN14@ppuMemoryM:

; 90   :                 break;
; 91   :             }
; 92   :         }
; 93   :     }
; 94   : 
; 95   :     return Address;

  00222	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]

; 96   : }

  00227	48 83 c4 18	 add	 rsp, 24
  0022b	c3		 ret	 0
?ppuMemoryMirror@@YAGG@Z ENDP				; ppuMemoryMirror
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
Address$ = 8
?cpuMemoryMirror@@YAGG@Z PROC				; cpuMemoryMirror

; 24   : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx

; 25   :     // NOTE: Mirrors the address for the 2kb ram 
; 26   :     if(0x0800 <= Address && Address < 0x2000)

  00005	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  0000a	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  0000f	7c 26		 jl	 SHORT $LN2@cpuMemoryM
  00011	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00016	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0001b	7d 1a		 jge	 SHORT $LN2@cpuMemoryM

; 27   :         Address = (Address % 0x0800);

  0001d	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00022	99		 cdq
  00023	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00029	03 c2		 add	 eax, edx
  0002b	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00030	2b c2		 sub	 eax, edx
  00032	66 89 44 24 08	 mov	 WORD PTR Address$[rsp], ax
$LN2@cpuMemoryM:

; 28   :     // NOTE: Mirror for PPU Registers
; 29   :     if(0x2008 <= Address && Address < 0x4000)

  00037	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  0003c	3d 08 20 00 00	 cmp	 eax, 8200		; 00002008H
  00041	7c 26		 jl	 SHORT $LN3@cpuMemoryM
  00043	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00048	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0004d	7d 1a		 jge	 SHORT $LN3@cpuMemoryM

; 30   :         Address = (Address % (0x2008 - 0x2000)) + 0x2000;

  0004f	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]
  00054	99		 cdq
  00055	83 e2 07	 and	 edx, 7
  00058	03 c2		 add	 eax, edx
  0005a	83 e0 07	 and	 eax, 7
  0005d	2b c2		 sub	 eax, edx
  0005f	05 00 20 00 00	 add	 eax, 8192		; 00002000H
  00064	66 89 44 24 08	 mov	 WORD PTR Address$[rsp], ax
$LN3@cpuMemoryM:

; 31   :     return(Address);

  00069	0f b7 44 24 08	 movzx	 eax, WORD PTR Address$[rsp]

; 32   : }

  0006e	c3		 ret	 0
?cpuMemoryMirror@@YAGG@Z ENDP				; cpuMemoryMirror
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
Value$ = 0
NewAddress$ = 8
Address$ = 32
MemoryOffset$ = 40
?read8@@YAEG_K@Z PROC					; read8

; 16   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 17   :     uint8 *NewAddress = (uint8 *)(Address + MemoryOffset);

  0000e	0f b7 44 24 20	 movzx	 eax, WORD PTR Address$[rsp]
  00013	48 03 44 24 28	 add	 rax, QWORD PTR MemoryOffset$[rsp]
  00018	48 89 44 24 08	 mov	 QWORD PTR NewAddress$[rsp], rax

; 18   :     uint8 Value = *NewAddress;

  0001d	48 8b 44 24 08	 mov	 rax, QWORD PTR NewAddress$[rsp]
  00022	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00025	88 04 24	 mov	 BYTE PTR Value$[rsp], al

; 19   :     return(Value);

  00028	0f b6 04 24	 movzx	 eax, BYTE PTR Value$[rsp]

; 20   : }

  0002c	48 83 c4 18	 add	 rsp, 24
  00030	c3		 ret	 0
?read8@@YAEG_K@Z ENDP					; read8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
NewAddress$ = 0
Byte$ = 32
Address$ = 40
MemoryOffset$ = 48
?write8@@YAXEG_K@Z PROC					; write8

; 10   : {   

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 18	 sub	 rsp, 24

; 11   :     uint8 *NewAddress = (uint8 *)(Address + MemoryOffset);

  00012	0f b7 44 24 28	 movzx	 eax, WORD PTR Address$[rsp]
  00017	48 03 44 24 30	 add	 rax, QWORD PTR MemoryOffset$[rsp]
  0001c	48 89 04 24	 mov	 QWORD PTR NewAddress$[rsp], rax

; 12   :     *NewAddress = Byte;

  00020	48 8b 04 24	 mov	 rax, QWORD PTR NewAddress$[rsp]
  00024	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00029	88 08		 mov	 BYTE PTR [rax], cl

; 13   : }

  0002b	48 83 c4 18	 add	 rsp, 24
  0002f	c3		 ret	 0
?write8@@YAXEG_K@Z ENDP					; write8
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
Ppu$ = 32
index$1 = 40
tv66 = 44
NewAddress$2 = 48
tv92 = 52
tv130 = 56
tv136 = 60
tv142 = 64
tv147 = 68
tv152 = 72
tv168 = 76
tv173 = 80
tv178 = 84
tv183 = 88
tv188 = 92
tv193 = 96
tv198 = 100
tv203 = 104
Byte$ = 128
Address$ = 136
?writePpuRegister@@YAXEG@Z PROC				; writePpuRegister

; 231  : {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00009	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 232  :     ppu * Ppu = GlobalPpu;

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalPpu@@3PEAUppu@@EA
  00014	48 89 44 24 20	 mov	 QWORD PTR Ppu$[rsp], rax

; 233  :     
; 234  :     Ppu->OpenBus = Byte;

  00019	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0001e	0f b6 8c 24 80
	00 00 00	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00026	88 48 10	 mov	 BYTE PTR [rax+16], cl

; 235  :     
; 236  :     switch(Address)

  00029	0f b7 84 24 88
	00 00 00	 movzx	 eax, WORD PTR Address$[rsp]
  00031	89 44 24 2c	 mov	 DWORD PTR tv66[rsp], eax
  00035	81 7c 24 2c 14
	40 00 00	 cmp	 DWORD PTR tv66[rsp], 16404 ; 00004014H
  0003d	7f 3e		 jg	 SHORT $LN57@writePpuRe
  0003f	81 7c 24 2c 14
	40 00 00	 cmp	 DWORD PTR tv66[rsp], 16404 ; 00004014H
  00047	0f 84 84 06 00
	00		 je	 $LN27@writePpuRe
  0004d	8b 44 24 2c	 mov	 eax, DWORD PTR tv66[rsp]
  00051	2d 00 20 00 00	 sub	 eax, 8192		; 00002000H
  00056	89 44 24 2c	 mov	 DWORD PTR tv66[rsp], eax
  0005a	83 7c 24 2c 07	 cmp	 DWORD PTR tv66[rsp], 7
  0005f	0f 87 d2 06 00
	00		 ja	 $LN2@writePpuRe
  00065	48 63 44 24 2c	 movsxd	 rax, DWORD PTR tv66[rsp]
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00071	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN58@writePpuRe[rcx+rax*4]
  00078	48 03 c1	 add	 rax, rcx
  0007b	ff e0		 jmp	 rax
$LN57@writePpuRe:
  0007d	e9 b5 06 00 00	 jmp	 $LN2@writePpuRe
$LN7@writePpuRe:

; 237  :     {
; 238  :         case 0x2000:
; 239  :         {
; 240  :             Ppu->NametableBase = Byte & 3;

  00082	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  0008a	83 e0 03	 and	 eax, 3
  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00092	88 41 11	 mov	 BYTE PTR [rcx+17], al

; 241  :             Ppu->VRamIO.TempVRamAdrs &= ~0xC00;

  00095	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0009a	0f b7 80 b6 01
	00 00		 movzx	 eax, WORD PTR [rax+438]
  000a1	25 ff f3 ff ff	 and	 eax, -3073		; fffffffffffff3ffH
  000a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  000ab	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 242  :             Ppu->VRamIO.TempVRamAdrs |= (Byte & 3) << 10;            

  000b2	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  000ba	83 e0 03	 and	 eax, 3
  000bd	c1 e0 0a	 shl	 eax, 10
  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  000c5	0f b7 89 b6 01
	00 00		 movzx	 ecx, WORD PTR [rcx+438]
  000cc	0b c8		 or	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  000d5	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 243  :             Ppu->VRamIncrement = ((Byte & 4) != 0) ? 32 : 1;

  000dc	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  000e4	83 e0 04	 and	 eax, 4
  000e7	85 c0		 test	 eax, eax
  000e9	74 0a		 je	 SHORT $LN29@writePpuRe
  000eb	c7 44 24 34 20
	00 00 00	 mov	 DWORD PTR tv92[rsp], 32	; 00000020H
  000f3	eb 08		 jmp	 SHORT $LN30@writePpuRe
$LN29@writePpuRe:
  000f5	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
$LN30@writePpuRe:
  000fd	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00102	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR tv92[rsp]
  00107	88 48 12	 mov	 BYTE PTR [rax+18], cl

; 244  :             Ppu->SPRTPattenBase = ((Byte & 8) != 0) ? 0x1000 : 0;

  0010a	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00112	83 e0 08	 and	 eax, 8
  00115	85 c0		 test	 eax, eax
  00117	74 0a		 je	 SHORT $LN31@writePpuRe
  00119	c7 44 24 38 00
	10 00 00	 mov	 DWORD PTR tv130[rsp], 4096 ; 00001000H
  00121	eb 08		 jmp	 SHORT $LN32@writePpuRe
$LN31@writePpuRe:
  00123	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN32@writePpuRe:
  0012b	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00130	0f b7 4c 24 38	 movzx	 ecx, WORD PTR tv130[rsp]
  00135	66 89 48 14	 mov	 WORD PTR [rax+20], cx

; 245  :             Ppu->BGPatternBase = ((Byte & 16) != 0) ? 0x1000 : 0;

  00139	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00141	83 e0 10	 and	 eax, 16
  00144	85 c0		 test	 eax, eax
  00146	74 0a		 je	 SHORT $LN33@writePpuRe
  00148	c7 44 24 3c 00
	10 00 00	 mov	 DWORD PTR tv136[rsp], 4096 ; 00001000H
  00150	eb 08		 jmp	 SHORT $LN34@writePpuRe
$LN33@writePpuRe:
  00152	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN34@writePpuRe:
  0015a	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0015f	0f b7 4c 24 3c	 movzx	 ecx, WORD PTR tv136[rsp]
  00164	66 89 48 16	 mov	 WORD PTR [rax+22], cx

; 246  :             Ppu->SpriteSize8x16 = ((Byte & 32) != 0);

  00168	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00170	83 e0 20	 and	 eax, 32			; 00000020H
  00173	85 c0		 test	 eax, eax
  00175	74 0a		 je	 SHORT $LN35@writePpuRe
  00177	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  0017f	eb 08		 jmp	 SHORT $LN36@writePpuRe
$LN35@writePpuRe:
  00181	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN36@writePpuRe:
  00189	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0018e	8b 4c 24 40	 mov	 ecx, DWORD PTR tv142[rsp]
  00192	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 247  :             Ppu->PpuSlave = ((Byte & 64) != 0);

  00195	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  0019d	83 e0 40	 and	 eax, 64			; 00000040H
  001a0	85 c0		 test	 eax, eax
  001a2	74 0a		 je	 SHORT $LN37@writePpuRe
  001a4	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  001ac	eb 08		 jmp	 SHORT $LN38@writePpuRe
$LN37@writePpuRe:
  001ae	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN38@writePpuRe:
  001b6	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  001bb	8b 4c 24 44	 mov	 ecx, DWORD PTR tv147[rsp]
  001bf	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 248  :             Ppu->GenerateNMI = ((Byte & 128) != 0);

  001c2	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  001ca	25 80 00 00 00	 and	 eax, 128		; 00000080H
  001cf	85 c0		 test	 eax, eax
  001d1	74 0a		 je	 SHORT $LN39@writePpuRe
  001d3	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv152[rsp], 1
  001db	eb 08		 jmp	 SHORT $LN40@writePpuRe
$LN39@writePpuRe:
  001dd	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
$LN40@writePpuRe:
  001e5	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  001ea	8b 4c 24 48	 mov	 ecx, DWORD PTR tv152[rsp]
  001ee	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 249  : 
; 250  :             if(Ppu->Scanline == 261 && Ppu->ScanlineCycle == 0)

  001f1	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  001f6	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  001fd	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  00202	75 1c		 jne	 SHORT $LN8@writePpuRe
  00204	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00209	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00210	85 c0		 test	 eax, eax
  00212	75 0c		 jne	 SHORT $LN8@writePpuRe

; 251  :             {
; 252  :                 NmiTriggered = false;

  00214	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?NmiTriggered@@3HA, 0 ; NmiTriggered
  0021e	eb 29		 jmp	 SHORT $LN9@writePpuRe
$LN8@writePpuRe:

; 253  :             }
; 254  :             else if(Ppu->GenerateNMI && Ppu->VerticalBlank && !NmiTriggered)

  00220	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00225	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00229	74 1e		 je	 SHORT $LN10@writePpuRe
  0022b	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00230	83 78 4c 00	 cmp	 DWORD PTR [rax+76], 0
  00234	74 13		 je	 SHORT $LN10@writePpuRe
  00236	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?NmiTriggered@@3HA, 0 ; NmiTriggered
  0023d	75 0a		 jne	 SHORT $LN10@writePpuRe

; 255  :             {
; 256  :                 TriggerNmi = true;

  0023f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?TriggerNmi@@3HA, 1 ; TriggerNmi
$LN10@writePpuRe:
$LN9@writePpuRe:

; 257  :             }
; 258  :             
; 259  :             break;

  00249	e9 e9 04 00 00	 jmp	 $LN2@writePpuRe
$LN11@writePpuRe:

; 260  :         }
; 261  :         case 0x2001:
; 262  :         {
; 263  :             Ppu->GreyScale           = ((Byte & 1) != 0);

  0024e	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00256	83 e0 01	 and	 eax, 1
  00259	85 c0		 test	 eax, eax
  0025b	74 0a		 je	 SHORT $LN41@writePpuRe
  0025d	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv168[rsp], 1
  00265	eb 08		 jmp	 SHORT $LN42@writePpuRe
$LN41@writePpuRe:
  00267	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv168[rsp], 0
$LN42@writePpuRe:
  0026f	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00274	8b 4c 24 4c	 mov	 ecx, DWORD PTR tv168[rsp]
  00278	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 264  :             Ppu->ShowBGLeft8Pixels   = ((Byte & 2) != 0);

  0027b	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00283	83 e0 02	 and	 eax, 2
  00286	85 c0		 test	 eax, eax
  00288	74 0a		 je	 SHORT $LN43@writePpuRe
  0028a	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv173[rsp], 1
  00292	eb 08		 jmp	 SHORT $LN44@writePpuRe
$LN43@writePpuRe:
  00294	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
$LN44@writePpuRe:
  0029c	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  002a1	8b 4c 24 50	 mov	 ecx, DWORD PTR tv173[rsp]
  002a5	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 265  :             Ppu->ShowSPRTLeft8Pixels = ((Byte & 4) != 0);

  002a8	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  002b0	83 e0 04	 and	 eax, 4
  002b3	85 c0		 test	 eax, eax
  002b5	74 0a		 je	 SHORT $LN45@writePpuRe
  002b7	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv178[rsp], 1
  002bf	eb 08		 jmp	 SHORT $LN46@writePpuRe
$LN45@writePpuRe:
  002c1	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv178[rsp], 0
$LN46@writePpuRe:
  002c9	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  002ce	8b 4c 24 54	 mov	 ecx, DWORD PTR tv178[rsp]
  002d2	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 266  :             Ppu->ShowBackground      = ((Byte & 8) != 0);

  002d5	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  002dd	83 e0 08	 and	 eax, 8
  002e0	85 c0		 test	 eax, eax
  002e2	74 0a		 je	 SHORT $LN47@writePpuRe
  002e4	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv183[rsp], 1
  002ec	eb 08		 jmp	 SHORT $LN48@writePpuRe
$LN47@writePpuRe:
  002ee	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv183[rsp], 0
$LN48@writePpuRe:
  002f6	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  002fb	8b 4c 24 58	 mov	 ecx, DWORD PTR tv183[rsp]
  002ff	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 267  :             Ppu->ShowSprites         = ((Byte & 16) != 0);

  00302	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  0030a	83 e0 10	 and	 eax, 16
  0030d	85 c0		 test	 eax, eax
  0030f	74 0a		 je	 SHORT $LN49@writePpuRe
  00311	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv188[rsp], 1
  00319	eb 08		 jmp	 SHORT $LN50@writePpuRe
$LN49@writePpuRe:
  0031b	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv188[rsp], 0
$LN50@writePpuRe:
  00323	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00328	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv188[rsp]
  0032c	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 268  :             Ppu->EmphasizeRed        = ((Byte & 32) != 0);

  0032f	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00337	83 e0 20	 and	 eax, 32			; 00000020H
  0033a	85 c0		 test	 eax, eax
  0033c	74 0a		 je	 SHORT $LN51@writePpuRe
  0033e	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv193[rsp], 1
  00346	eb 08		 jmp	 SHORT $LN52@writePpuRe
$LN51@writePpuRe:
  00348	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv193[rsp], 0
$LN52@writePpuRe:
  00350	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00355	8b 4c 24 60	 mov	 ecx, DWORD PTR tv193[rsp]
  00359	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 269  :             Ppu->EmphasizeGreen      = ((Byte & 64) != 0);

  0035c	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00364	83 e0 40	 and	 eax, 64			; 00000040H
  00367	85 c0		 test	 eax, eax
  00369	74 0a		 je	 SHORT $LN53@writePpuRe
  0036b	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv198[rsp], 1
  00373	eb 08		 jmp	 SHORT $LN54@writePpuRe
$LN53@writePpuRe:
  00375	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv198[rsp], 0
$LN54@writePpuRe:
  0037d	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00382	8b 4c 24 64	 mov	 ecx, DWORD PTR tv198[rsp]
  00386	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 270  :             Ppu->EmphasizeBlue       = ((Byte & 128) != 0);

  00389	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00391	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00396	85 c0		 test	 eax, eax
  00398	74 0a		 je	 SHORT $LN55@writePpuRe
  0039a	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv203[rsp], 1
  003a2	eb 08		 jmp	 SHORT $LN56@writePpuRe
$LN55@writePpuRe:
  003a4	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv203[rsp], 0
$LN56@writePpuRe:
  003ac	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  003b1	8b 4c 24 68	 mov	 ecx, DWORD PTR tv203[rsp]
  003b5	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 271  :             break;

  003b8	e9 7a 03 00 00	 jmp	 $LN2@writePpuRe
$LN12@writePpuRe:

; 272  :         }
; 273  :         case 0x2003:
; 274  :         {
; 275  :             Ppu->OamAddress = Byte;

  003bd	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  003c2	0f b6 8c 24 80
	00 00 00	 movzx	 ecx, BYTE PTR Byte$[rsp]
  003ca	88 48 50	 mov	 BYTE PTR [rax+80], cl

; 276  :             break;

  003cd	e9 65 03 00 00	 jmp	 $LN2@writePpuRe
$LN13@writePpuRe:

; 277  :         }
; 278  :         case 0x2004:
; 279  :         {
; 280  :             // If Writing OAM Data while rendering, then a glitch increments it by 4 instead
; 281  :             if(Ppu->Scanline < 240 || Ppu->Scanline == 261 || Ppu->ShowBackground || Ppu->ShowSprites)

  003d2	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  003d7	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  003de	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  003e3	7c 29		 jl	 SHORT $LN16@writePpuRe
  003e5	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  003ea	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  003f1	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  003f6	74 16		 je	 SHORT $LN16@writePpuRe
  003f8	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  003fd	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00401	75 0b		 jne	 SHORT $LN16@writePpuRe
  00403	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00408	83 78 34 00	 cmp	 DWORD PTR [rax+52], 0
  0040c	74 16		 je	 SHORT $LN14@writePpuRe
$LN16@writePpuRe:

; 282  :             {
; 283  :                 Ppu->OamAddress += 4;

  0040e	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00413	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  00417	83 c0 04	 add	 eax, 4
  0041a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0041f	88 41 50	 mov	 BYTE PTR [rcx+80], al

; 284  :             }
; 285  :             else

  00422	eb 2d		 jmp	 SHORT $LN15@writePpuRe
$LN14@writePpuRe:

; 286  :             {
; 287  :                 /*
; 288  :                 if( ( OAMADDR & 0x03 ) == 0x02 )
; 289  :                     b&=0xe3;
; 290  :                 map.ppuwriteoam(Byte.toUnsignedInt(OAMADDR), b); TODO: Look at the example code
; 291  :                 */
; 292  :                 Ppu->Oam[Ppu->OamAddress] = Byte;

  00424	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00429	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  0042d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00432	0f b6 94 24 80
	00 00 00	 movzx	 edx, BYTE PTR Byte$[rsp]
  0043a	88 54 01 60	 mov	 BYTE PTR [rcx+rax+96], dl

; 293  :                 Ppu->OamAddress++;

  0043e	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00443	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  00447	fe c0		 inc	 al
  00449	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0044e	88 41 50	 mov	 BYTE PTR [rcx+80], al
$LN15@writePpuRe:

; 294  :             }
; 295  :             break;

  00451	e9 e1 02 00 00	 jmp	 $LN2@writePpuRe
$LN17@writePpuRe:

; 296  :         }
; 297  :         case 0x2005:
; 298  :         {
; 299  :             if(Ppu->VRamIO.LatchWrite == 0)

  00456	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0045b	0f b6 80 b8 01
	00 00		 movzx	 eax, BYTE PTR [rax+440]
  00462	85 c0		 test	 eax, eax
  00464	75 69		 jne	 SHORT $LN18@writePpuRe

; 300  :             {
; 301  :                 Ppu->VRamIO.FineX = Byte & 7; // Bit 0,1, and 2 are fine X

  00466	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  0046e	83 e0 07	 and	 eax, 7
  00471	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00476	88 81 b9 01 00
	00		 mov	 BYTE PTR [rcx+441], al

; 302  :                 Ppu->VRamIO.TempVRamAdrs &= ~(0x001F); // Clear Bits

  0047c	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00481	0f b7 80 b6 01
	00 00		 movzx	 eax, WORD PTR [rax+438]
  00488	83 e0 e0	 and	 eax, -32		; ffffffffffffffe0H
  0048b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00490	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 303  :                 Ppu->VRamIO.TempVRamAdrs |= ((uint16)Byte) >> 3;

  00497	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  0049f	c1 f8 03	 sar	 eax, 3
  004a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  004a7	0f b7 89 b6 01
	00 00		 movzx	 ecx, WORD PTR [rcx+438]
  004ae	0b c8		 or	 ecx, eax
  004b0	8b c1		 mov	 eax, ecx
  004b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  004b7	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 304  :                 Ppu->VRamIO.LatchWrite = 1;

  004be	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  004c3	c6 80 b8 01 00
	00 01		 mov	 BYTE PTR [rax+440], 1

; 305  :             }
; 306  :             else

  004ca	e9 85 00 00 00	 jmp	 $LN19@writePpuRe
$LN18@writePpuRe:

; 307  :             {
; 308  :                 Ppu->VRamIO.TempVRamAdrs &= ~(0x73E0); // Clear Bits

  004cf	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  004d4	0f b7 80 b6 01
	00 00		 movzx	 eax, WORD PTR [rax+438]
  004db	25 1f 8c ff ff	 and	 eax, -29665		; ffffffffffff8c1fH
  004e0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  004e5	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 309  :                 Ppu->VRamIO.TempVRamAdrs |= ((uint16)(Byte & 0x7)) << 12; // Set fine scroll Y, bits 0-2 set bit 12-14

  004ec	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  004f4	83 e0 07	 and	 eax, 7
  004f7	0f b7 c0	 movzx	 eax, ax
  004fa	c1 e0 0c	 shl	 eax, 12
  004fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00502	0f b7 89 b6 01
	00 00		 movzx	 ecx, WORD PTR [rcx+438]
  00509	0b c8		 or	 ecx, eax
  0050b	8b c1		 mov	 eax, ecx
  0050d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00512	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 310  :                 Ppu->VRamIO.TempVRamAdrs |= ((uint16)(Byte & 0xF8)) << 2; // Set coarse Y, bits 3-7 set bit 5-9

  00519	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00521	25 f8 00 00 00	 and	 eax, 248		; 000000f8H
  00526	0f b7 c0	 movzx	 eax, ax
  00529	c1 e0 02	 shl	 eax, 2
  0052c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00531	0f b7 89 b6 01
	00 00		 movzx	 ecx, WORD PTR [rcx+438]
  00538	0b c8		 or	 ecx, eax
  0053a	8b c1		 mov	 eax, ecx
  0053c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00541	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 311  :                 Ppu->VRamIO.LatchWrite = 0;

  00548	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0054d	c6 80 b8 01 00
	00 00		 mov	 BYTE PTR [rax+440], 0
$LN19@writePpuRe:

; 312  :             }
; 313  :                 
; 314  :             break;

  00554	e9 de 01 00 00	 jmp	 $LN2@writePpuRe
$LN20@writePpuRe:

; 315  :         }
; 316  :         case 0x2006:
; 317  :         {
; 318  :             if(Ppu->VRamIO.LatchWrite == 0)

  00559	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0055e	0f b6 80 b8 01
	00 00		 movzx	 eax, BYTE PTR [rax+440]
  00565	85 c0		 test	 eax, eax
  00567	75 75		 jne	 SHORT $LN21@writePpuRe

; 319  :             {
; 320  :                 Ppu->VRamIO.TempVRamAdrs &= 0xC0FF; // Clear Bits About to be set 

  00569	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0056e	0f b7 80 b6 01
	00 00		 movzx	 eax, WORD PTR [rax+438]
  00575	25 ff c0 00 00	 and	 eax, 49407		; 0000c0ffH
  0057a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0057f	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 321  :                 Ppu->VRamIO.TempVRamAdrs |= ((uint16)(Byte & 0x003F)) << 8;

  00586	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  0058e	83 e0 3f	 and	 eax, 63			; 0000003fH
  00591	0f b7 c0	 movzx	 eax, ax
  00594	c1 e0 08	 shl	 eax, 8
  00597	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  0059c	0f b7 89 b6 01
	00 00		 movzx	 ecx, WORD PTR [rcx+438]
  005a3	0b c8		 or	 ecx, eax
  005a5	8b c1		 mov	 eax, ecx
  005a7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  005ac	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 322  :                 Ppu->VRamIO.TempVRamAdrs &= 0x3FFF; // Clear 14th bit 

  005b3	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  005b8	0f b7 80 b6 01
	00 00		 movzx	 eax, WORD PTR [rax+438]
  005bf	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  005c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  005c9	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 323  :                 Ppu->VRamIO.LatchWrite = 1;

  005d0	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  005d5	c6 80 b8 01 00
	00 01		 mov	 BYTE PTR [rax+440], 1

; 324  :             }
; 325  :             else

  005dc	eb 6d		 jmp	 SHORT $LN22@writePpuRe
$LN21@writePpuRe:

; 326  :             { 
; 327  :                 Ppu->VRamIO.TempVRamAdrs &= 0x7F00; // Clear low byte

  005de	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  005e3	0f b7 80 b6 01
	00 00		 movzx	 eax, WORD PTR [rax+438]
  005ea	25 00 7f 00 00	 and	 eax, 32512		; 00007f00H
  005ef	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  005f4	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 328  :                 Ppu->VRamIO.TempVRamAdrs |= (uint16)(Byte & 0x00FF); 

  005fb	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00603	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00608	0f b7 c0	 movzx	 eax, ax
  0060b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00610	0f b7 89 b6 01
	00 00		 movzx	 ecx, WORD PTR [rcx+438]
  00617	0b c8		 or	 ecx, eax
  00619	8b c1		 mov	 eax, ecx
  0061b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00620	66 89 81 b6 01
	00 00		 mov	 WORD PTR [rcx+438], ax

; 329  :                 Ppu->VRamIO.VRamAdrs = Ppu->VRamIO.TempVRamAdrs;

  00627	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0062c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00631	0f b7 89 b6 01
	00 00		 movzx	 ecx, WORD PTR [rcx+438]
  00638	66 89 88 b4 01
	00 00		 mov	 WORD PTR [rax+436], cx

; 330  :                 Ppu->VRamIO.LatchWrite = 0;

  0063f	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00644	c6 80 b8 01 00
	00 00		 mov	 BYTE PTR [rax+440], 0
$LN22@writePpuRe:

; 331  :             }
; 332  :             
; 333  :             break;

  0064b	e9 e7 00 00 00	 jmp	 $LN2@writePpuRe
$LN23@writePpuRe:

; 334  :         }
; 335  :         case 0x2007:
; 336  :         {
; 337  :             writePpu8(Byte, Ppu->VRamIO.VRamAdrs, Ppu);

  00650	4c 8b 44 24 20	 mov	 r8, QWORD PTR Ppu$[rsp]
  00655	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0065a	0f b7 90 b4 01
	00 00		 movzx	 edx, WORD PTR [rax+436]
  00661	0f b6 8c 24 80
	00 00 00	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00669	e8 00 00 00 00	 call	 ?writePpu8@@YAXEGPEAUppu@@@Z ; writePpu8

; 338  : 
; 339  :             if( !(Ppu->ShowBackground || Ppu->ShowSprites) ||

  0066e	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00673	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00677	75 0b		 jne	 SHORT $LN26@writePpuRe
  00679	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0067e	83 78 34 00	 cmp	 DWORD PTR [rax+52], 0
  00682	74 26		 je	 SHORT $LN25@writePpuRe
$LN26@writePpuRe:
  00684	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  00689	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  00690	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  00695	7e 38		 jle	 SHORT $LN24@writePpuRe
  00697	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  0069c	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  006a3	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  006a8	7f 25		 jg	 SHORT $LN24@writePpuRe
$LN25@writePpuRe:

; 340  :                 (Ppu->Scanline > 240 && Ppu->Scanline <= 260) )
; 341  :             {            
; 342  :                 Ppu->VRamIO.VRamAdrs += Ppu->VRamIncrement;

  006aa	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  006af	0f b6 40 12	 movzx	 eax, BYTE PTR [rax+18]
  006b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  006b8	0f b7 89 b4 01
	00 00		 movzx	 ecx, WORD PTR [rcx+436]
  006bf	03 c8		 add	 ecx, eax
  006c1	8b c1		 mov	 eax, ecx
  006c3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Ppu$[rsp]
  006c8	66 89 81 b4 01
	00 00		 mov	 WORD PTR [rcx+436], ax
$LN24@writePpuRe:

; 343  :             }
; 344  :             break;

  006cf	eb 66		 jmp	 SHORT $LN2@writePpuRe
$LN27@writePpuRe:

; 345  :         }
; 346  :         case 0x4014:
; 347  :         {
; 348  :             // NOTE: OAM DMA Write
; 349  :             for(uint16 index = Ppu->OamAddress; index < OAM_SIZE; ++index)

  006d1	48 8b 44 24 20	 mov	 rax, QWORD PTR Ppu$[rsp]
  006d6	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  006da	66 89 44 24 28	 mov	 WORD PTR index$1[rsp], ax
  006df	eb 0d		 jmp	 SHORT $LN6@writePpuRe
$LN4@writePpuRe:
  006e1	0f b7 44 24 28	 movzx	 eax, WORD PTR index$1[rsp]
  006e6	66 ff c0	 inc	 ax
  006e9	66 89 44 24 28	 mov	 WORD PTR index$1[rsp], ax
$LN6@writePpuRe:
  006ee	0f b7 44 24 28	 movzx	 eax, WORD PTR index$1[rsp]
  006f3	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  006f8	7d 3d		 jge	 SHORT $LN5@writePpuRe

; 350  :             {
; 351  :                 uint16 NewAddress = (Byte << 8) | index; 

  006fa	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR Byte$[rsp]
  00702	c1 e0 08	 shl	 eax, 8
  00705	0f b7 4c 24 28	 movzx	 ecx, WORD PTR index$1[rsp]
  0070a	0b c1		 or	 eax, ecx
  0070c	66 89 44 24 30	 mov	 WORD PTR NewAddress$2[rsp], ax

; 352  :                 OamData[index] = read8(NewAddress, GlobalCpu->MemoryBase);

  00711	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalCpu@@3PEAUcpu@@EA
  00718	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0071c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR NewAddress$2[rsp]
  00721	e8 00 00 00 00	 call	 ?read8@@YAEG_K@Z	; read8
  00726	0f b7 4c 24 28	 movzx	 ecx, WORD PTR index$1[rsp]
  0072b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?OamData@@3PEAEEA
  00732	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 353  :             }

  00735	eb aa		 jmp	 SHORT $LN4@writePpuRe
$LN5@writePpuRe:
$LN2@writePpuRe:

; 354  :             
; 355  :             break;
; 356  :         }
; 357  :     }
; 358  : }

  00737	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0073b	c3		 ret	 0
$LN58@writePpuRe:
  0073c	00 00 00 00	 DD	 $LN7@writePpuRe
  00740	00 00 00 00	 DD	 $LN11@writePpuRe
  00744	00 00 00 00	 DD	 $LN2@writePpuRe
  00748	00 00 00 00	 DD	 $LN12@writePpuRe
  0074c	00 00 00 00	 DD	 $LN13@writePpuRe
  00750	00 00 00 00	 DD	 $LN17@writePpuRe
  00754	00 00 00 00	 DD	 $LN20@writePpuRe
  00758	00 00 00 00	 DD	 $LN23@writePpuRe
?writePpuRegister@@YAXEG@Z ENDP				; writePpuRegister
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\memory.cpp
_TEXT	SEGMENT
Byte$ = 32
tv65 = 36
tv74 = 40
tv81 = 44
tv87 = 48
tv155 = 52
OnPalette$1 = 56
Ppu$ = 64
Address$ = 96
?readPpuRegister@@YAEG@Z PROC				; readPpuRegister

; 361  : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 362  :     ppu * Ppu = GlobalPpu;

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?GlobalPpu@@3PEAUppu@@EA
  00010	48 89 44 24 40	 mov	 QWORD PTR Ppu$[rsp], rax

; 363  :     
; 364  :     uint8 Byte = 0;

  00015	c6 44 24 20 00	 mov	 BYTE PTR Byte$[rsp], 0

; 365  :     
; 366  :     switch(Address)

  0001a	0f b7 44 24 60	 movzx	 eax, WORD PTR Address$[rsp]
  0001f	89 44 24 24	 mov	 DWORD PTR tv65[rsp], eax
  00023	81 7c 24 24 02
	20 00 00	 cmp	 DWORD PTR tv65[rsp], 8194 ; 00002002H
  0002b	74 21		 je	 SHORT $LN4@readPpuReg
  0002d	81 7c 24 24 04
	20 00 00	 cmp	 DWORD PTR tv65[rsp], 8196 ; 00002004H
  00035	0f 84 50 01 00
	00		 je	 $LN9@readPpuReg
  0003b	81 7c 24 24 07
	20 00 00	 cmp	 DWORD PTR tv65[rsp], 8199 ; 00002007H
  00043	0f 84 62 01 00
	00		 je	 $LN10@readPpuReg
  00049	e9 98 02 00 00	 jmp	 $LN2@readPpuReg
$LN4@readPpuReg:

; 367  :     {
; 368  :         case 0x2002:
; 369  :         {
; 370  :             // NOTE: If we have not just set the Vertical Blank flag.
; 371  :             if( !(Ppu->Scanline == 241 && Ppu->ScanlineCycle == 0) )

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00053	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  0005a	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  0005f	75 10		 jne	 SHORT $LN6@readPpuReg
  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00066	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  0006d	85 c0		 test	 eax, eax
  0006f	74 2a		 je	 SHORT $LN5@readPpuReg
$LN6@readPpuReg:

; 372  :                 Byte |= Ppu->VerticalBlank ? 0x80 : 0;

  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00076	83 78 4c 00	 cmp	 DWORD PTR [rax+76], 0
  0007a	74 0a		 je	 SHORT $LN18@readPpuReg
  0007c	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR tv74[rsp], 128 ; 00000080H
  00084	eb 08		 jmp	 SHORT $LN19@readPpuReg
$LN18@readPpuReg:
  00086	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN19@readPpuReg:
  0008e	0f b6 44 24 20	 movzx	 eax, BYTE PTR Byte$[rsp]
  00093	0b 44 24 28	 or	 eax, DWORD PTR tv74[rsp]
  00097	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al
$LN5@readPpuReg:

; 373  :             Ppu->VerticalBlank = false;

  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  000a0	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [rax+76], 0

; 374  :             
; 375  :             Byte |= Ppu->Sprite0Hit ? 0x40 : 0;

  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  000ac	83 78 48 00	 cmp	 DWORD PTR [rax+72], 0
  000b0	74 0a		 je	 SHORT $LN20@readPpuReg
  000b2	c7 44 24 2c 40
	00 00 00	 mov	 DWORD PTR tv81[rsp], 64	; 00000040H
  000ba	eb 08		 jmp	 SHORT $LN21@readPpuReg
$LN20@readPpuReg:
  000bc	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN21@readPpuReg:
  000c4	0f b6 44 24 20	 movzx	 eax, BYTE PTR Byte$[rsp]
  000c9	0b 44 24 2c	 or	 eax, DWORD PTR tv81[rsp]
  000cd	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al

; 376  :             Byte |= Ppu->SpriteOverflow ? 0x20 : 0;

  000d1	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  000d6	83 78 44 00	 cmp	 DWORD PTR [rax+68], 0
  000da	74 0a		 je	 SHORT $LN22@readPpuReg
  000dc	c7 44 24 30 20
	00 00 00	 mov	 DWORD PTR tv87[rsp], 32	; 00000020H
  000e4	eb 08		 jmp	 SHORT $LN23@readPpuReg
$LN22@readPpuReg:
  000e6	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN23@readPpuReg:
  000ee	0f b6 44 24 20	 movzx	 eax, BYTE PTR Byte$[rsp]
  000f3	0b 44 24 30	 or	 eax, DWORD PTR tv87[rsp]
  000f7	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al

; 377  :             Byte |= (Ppu->OpenBus & 0x1F); // Low 5 bits is the open bus

  000fb	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00100	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  00104	83 e0 1f	 and	 eax, 31
  00107	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Byte$[rsp]
  0010c	0b c8		 or	 ecx, eax
  0010e	8b c1		 mov	 eax, ecx
  00110	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al

; 378  : 
; 379  :             //NOTE: TODO: TEST THIS. To do with timing 
; 380  :             if(Ppu->Scanline == 241 &&

  00114	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00119	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  00120	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  00125	75 3c		 jne	 SHORT $LN7@readPpuReg
  00127	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0012c	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00133	85 c0		 test	 eax, eax
  00135	74 22		 je	 SHORT $LN8@readPpuReg
  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0013c	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00143	83 f8 01	 cmp	 eax, 1
  00146	74 11		 je	 SHORT $LN8@readPpuReg
  00148	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0014d	0f b7 80 b2 01
	00 00		 movzx	 eax, WORD PTR [rax+434]
  00154	83 f8 02	 cmp	 eax, 2
  00157	75 0a		 jne	 SHORT $LN7@readPpuReg
$LN8@readPpuReg:

; 381  :                (Ppu->ScanlineCycle == 0 || Ppu->ScanlineCycle == 1 || Ppu->ScanlineCycle == 2) )
; 382  :             {
; 383  :                 TriggerNmi = false;

  00159	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?TriggerNmi@@3HA, 0 ; TriggerNmi
$LN7@readPpuReg:

; 384  :             }
; 385  :             
; 386  :             Ppu->VRamIO.LatchWrite = 0;

  00163	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00168	c6 80 b8 01 00
	00 00		 mov	 BYTE PTR [rax+440], 0

; 387  :             NmiTriggered = false;

  0016f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?NmiTriggered@@3HA, 0 ; NmiTriggered

; 388  :             Ppu->OpenBus = Byte;

  00179	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0017e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00183	88 48 10	 mov	 BYTE PTR [rax+16], cl

; 389  :             break;

  00186	e9 5b 01 00 00	 jmp	 $LN2@readPpuReg
$LN9@readPpuReg:

; 390  :         }
; 391  :         case 0x2004:
; 392  :         {
; 393  :             // TODO: Read OAM
; 394  :             Ppu->OpenBus = Ppu->Oam[Ppu->OamAddress];

  0018b	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00190	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  00194	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00199	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  0019e	0f b6 44 02 60	 movzx	 eax, BYTE PTR [rdx+rax+96]
  001a3	88 41 10	 mov	 BYTE PTR [rcx+16], al

; 395  :             break;

  001a6	e9 3b 01 00 00	 jmp	 $LN2@readPpuReg
$LN10@readPpuReg:

; 396  :         }
; 397  :         case 0x2007:
; 398  :         {
; 399  :             bool32 OnPalette = !((Ppu->VRamIO.VRamAdrs&0x3FFF) < 0x3F00);

  001ab	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  001b0	0f b7 80 b4 01
	00 00		 movzx	 eax, WORD PTR [rax+436]
  001b7	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  001bc	3d 00 3f 00 00	 cmp	 eax, 16128		; 00003f00H
  001c1	7c 0a		 jl	 SHORT $LN24@readPpuReg
  001c3	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  001cb	eb 08		 jmp	 SHORT $LN25@readPpuReg
$LN24@readPpuReg:
  001cd	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN25@readPpuReg:
  001d5	8b 44 24 34	 mov	 eax, DWORD PTR tv155[rsp]
  001d9	89 44 24 38	 mov	 DWORD PTR OnPalette$1[rsp], eax

; 400  : 
; 401  :             if(OnPalette)

  001dd	83 7c 24 38 00	 cmp	 DWORD PTR OnPalette$1[rsp], 0
  001e2	74 69		 je	 SHORT $LN11@readPpuReg

; 402  :             {
; 403  :                 Ppu->VRamDataBuffer = readPpu8(Ppu->VRamIO.VRamAdrs-0x1000, Ppu);

  001e4	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  001e9	0f b7 80 b4 01
	00 00		 movzx	 eax, WORD PTR [rax+436]
  001f0	2d 00 10 00 00	 sub	 eax, 4096		; 00001000H
  001f5	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  001fa	0f b7 c8	 movzx	 ecx, ax
  001fd	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00202	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00207	88 41 51	 mov	 BYTE PTR [rcx+81], al

; 404  :                 Byte = readPpu8(Ppu->VRamIO.VRamAdrs, Ppu);

  0020a	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  0020f	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00214	0f b7 88 b4 01
	00 00		 movzx	 ecx, WORD PTR [rax+436]
  0021b	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00220	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al

; 405  : 
; 406  :                 // Pulled from nes dev forum
; 407  :                 Byte &= 0x3F;

  00224	0f b6 44 24 20	 movzx	 eax, BYTE PTR Byte$[rsp]
  00229	83 e0 3f	 and	 eax, 63			; 0000003fH
  0022c	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al

; 408  :                 Byte |= Ppu->OpenBus & 0xC0;

  00230	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00235	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  00239	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  0023e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Byte$[rsp]
  00243	0b c8		 or	 ecx, eax
  00245	8b c1		 mov	 eax, ecx
  00247	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al

; 409  :             }
; 410  :             else

  0024b	eb 2b		 jmp	 SHORT $LN12@readPpuReg
$LN11@readPpuReg:

; 411  :             {
; 412  :                 Byte = Ppu->VRamDataBuffer;

  0024d	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00252	0f b6 40 51	 movzx	 eax, BYTE PTR [rax+81]
  00256	88 44 24 20	 mov	 BYTE PTR Byte$[rsp], al

; 413  :                 Ppu->VRamDataBuffer = readPpu8(Ppu->VRamIO.VRamAdrs, Ppu);

  0025a	48 8b 54 24 40	 mov	 rdx, QWORD PTR Ppu$[rsp]
  0025f	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00264	0f b7 88 b4 01
	00 00		 movzx	 ecx, WORD PTR [rax+436]
  0026b	e8 00 00 00 00	 call	 ?readPpu8@@YAEGPEAUppu@@@Z ; readPpu8
  00270	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  00275	88 41 51	 mov	 BYTE PTR [rcx+81], al
$LN12@readPpuReg:

; 414  :             }
; 415  : 
; 416  :             if( !(Ppu->ShowBackground || Ppu->ShowSprites) ||

  00278	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  0027d	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  00281	75 0b		 jne	 SHORT $LN15@readPpuReg
  00283	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00288	83 78 34 00	 cmp	 DWORD PTR [rax+52], 0
  0028c	74 26		 je	 SHORT $LN14@readPpuReg
$LN15@readPpuReg:
  0028e	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  00293	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  0029a	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  0029f	7e 38		 jle	 SHORT $LN13@readPpuReg
  002a1	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  002a6	0f b7 80 b0 01
	00 00		 movzx	 eax, WORD PTR [rax+432]
  002ad	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  002b2	7f 25		 jg	 SHORT $LN13@readPpuReg
$LN14@readPpuReg:

; 417  :                 (Ppu->Scanline > 240 && Ppu->Scanline <= 260) )
; 418  :             {            
; 419  :                 Ppu->VRamIO.VRamAdrs += Ppu->VRamIncrement;

  002b4	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  002b9	0f b6 40 12	 movzx	 eax, BYTE PTR [rax+18]
  002bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  002c2	0f b7 89 b4 01
	00 00		 movzx	 ecx, WORD PTR [rcx+436]
  002c9	03 c8		 add	 ecx, eax
  002cb	8b c1		 mov	 eax, ecx
  002cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Ppu$[rsp]
  002d2	66 89 81 b4 01
	00 00		 mov	 WORD PTR [rcx+436], ax
$LN13@readPpuReg:

; 420  :             }
; 421  :                         
; 422  :             Ppu->OpenBus = Byte;

  002d9	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  002de	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR Byte$[rsp]
  002e3	88 48 10	 mov	 BYTE PTR [rax+16], cl
$LN2@readPpuReg:

; 423  :             break;
; 424  :         }
; 425  :         case 0x4014:
; 426  :         {
; 427  :             break;
; 428  :         }
; 429  :     }
; 430  : 
; 431  :     return Ppu->OpenBus;

  002e6	48 8b 44 24 40	 mov	 rax, QWORD PTR Ppu$[rsp]
  002eb	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]

; 432  : }

  002ef	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002f3	c3		 ret	 0
?readPpuRegister@@YAEG@Z ENDP				; readPpuRegister
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
BytesRead$1 = 64
FileData$ = 72
FileHandle$ = 80
Filesize$2 = 88
Filename$ = 112
Size$ = 120
?LoadFile@@YAPEAXPEADPEAI@Z PROC			; LoadFile

; 286  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 287  :     void *FileData = 0;

  0000e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR FileData$[rsp], 0

; 288  :     
; 289  :     HANDLE FileHandle = CreateFileA(Filename, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);

  00017	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00020	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00028	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  00030	45 33 c9	 xor	 r9d, r9d
  00033	41 b8 01 00 00
	00		 mov	 r8d, 1
  00039	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0003e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Filename$[rsp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00049	48 89 44 24 50	 mov	 QWORD PTR FileHandle$[rsp], rax

; 290  :     if(FileHandle != INVALID_HANDLE_VALUE)

  0004e	48 83 7c 24 50
	ff		 cmp	 QWORD PTR FileHandle$[rsp], -1
  00054	0f 84 8b 00 00
	00		 je	 $LN2@LoadFile

; 291  :     {
; 292  :         LARGE_INTEGER Filesize;
; 293  :         if(GetFileSizeEx(FileHandle, &Filesize))

  0005a	48 8d 54 24 58	 lea	 rdx, QWORD PTR Filesize$2[rsp]
  0005f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  0006a	85 c0		 test	 eax, eax
  0006c	74 77		 je	 SHORT $LN4@LoadFile

; 294  :         {
; 295  :             FileData = VirtualAlloc(0, Filesize.LowPart, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);

  0006e	8b 44 24 58	 mov	 eax, DWORD PTR Filesize$2[rsp]
  00072	41 b9 04 00 00
	00		 mov	 r9d, 4
  00078	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0007e	8b d0		 mov	 edx, eax
  00080	33 c9		 xor	 ecx, ecx
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00088	48 89 44 24 48	 mov	 QWORD PTR FileData$[rsp], rax

; 296  :             if(FileData)

  0008d	48 83 7c 24 48
	00		 cmp	 QWORD PTR FileData$[rsp], 0
  00093	74 50		 je	 SHORT $LN6@LoadFile

; 297  :             {
; 298  :                 DWORD BytesRead;
; 299  :                 if(ReadFile(FileHandle, FileData, Filesize.LowPart, &BytesRead, 0) &&

  00095	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009e	4c 8d 4c 24 40	 lea	 r9, QWORD PTR BytesRead$1[rsp]
  000a3	44 8b 44 24 58	 mov	 r8d, DWORD PTR Filesize$2[rsp]
  000a8	48 8b 54 24 48	 mov	 rdx, QWORD PTR FileData$[rsp]
  000ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR FileHandle$[rsp]
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  000b8	85 c0		 test	 eax, eax
  000ba	74 17		 je	 SHORT $LN8@LoadFile
  000bc	8b 44 24 40	 mov	 eax, DWORD PTR BytesRead$1[rsp]
  000c0	39 44 24 58	 cmp	 DWORD PTR Filesize$2[rsp], eax
  000c4	75 0d		 jne	 SHORT $LN8@LoadFile

; 300  :                    (Filesize.LowPart == BytesRead))
; 301  :                 {
; 302  :                     *Size = (uint32)BytesRead;

  000c6	48 8b 44 24 78	 mov	 rax, QWORD PTR Size$[rsp]
  000cb	8b 4c 24 40	 mov	 ecx, DWORD PTR BytesRead$1[rsp]
  000cf	89 08		 mov	 DWORD PTR [rax], ecx

; 303  :                     // It worked!
; 304  :                 }
; 305  :                 else

  000d1	eb 12		 jmp	 SHORT $LN9@LoadFile
$LN8@LoadFile:

; 306  :                 {
; 307  :                     Assert(0);

  000d3	33 c0		 xor	 eax, eax
  000d5	83 f8 01	 cmp	 eax, 1
  000d8	74 0b		 je	 SHORT $LN10@LoadFile
  000da	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN10@LoadFile:
$LN9@LoadFile:
$LN6@LoadFile:
$LN4@LoadFile:
$LN2@LoadFile:

; 308  :                 }
; 309  :             }
; 310  :             else
; 311  :             {
; 312  :             }   
; 313  :         }
; 314  :         else
; 315  :         {
; 316  :         }
; 317  :     }
; 318  :     else
; 319  :     {
; 320  : //        Assert(0);
; 321  :     }
; 322  :     return(FileData);

  000e5	48 8b 44 24 48	 mov	 rax, QWORD PTR FileData$[rsp]

; 323  : }

  000ea	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000ee	c3		 ret	 0
?LoadFile@@YAPEAXPEADPEAI@Z ENDP			; LoadFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
tv64 = 32
IsDown$1 = 36
NameSize$2 = 40
tv146 = 44
tv67 = 48
tv70 = 52
tv73 = 56
tv79 = 60
tv83 = 64
tv87 = 68
tv91 = 72
tv95 = 76
tv131 = 80
tv135 = 84
tv139 = 88
tv75 = 96
WasDown$3 = 104
AltPressed$4 = 108
FileOpened$5 = 112
Result$ = 120
newRom$6 = 128
tempFileName$7 = 288
__$ArrayPad$ = 544
WindowHandle$ = 576
Message$ = 584
wParam$ = 592
lParam$ = 600
?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC		; WinInputCallback

; 118  : {

$LN60:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec 30 02
	00 00		 sub	 rsp, 560		; 00000230H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 119  :     LRESULT Result = 0;

  0002d	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 120  :     
; 121  :     switch(Message) 

  00036	8b 84 24 48 02
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003d	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00041	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  00046	77 21		 ja	 SHORT $LN57@WinInputCa
  00048	83 7c 24 20 10	 cmp	 DWORD PTR tv64[rsp], 16
  0004d	74 67		 je	 SHORT $LN10@WinInputCa
  0004f	83 7c 24 20 01	 cmp	 DWORD PTR tv64[rsp], 1
  00054	74 56		 je	 SHORT $LN8@WinInputCa
  00056	83 7c 24 20 02	 cmp	 DWORD PTR tv64[rsp], 2
  0005b	74 68		 je	 SHORT $LN11@WinInputCa
  0005d	83 7c 24 20 05	 cmp	 DWORD PTR tv64[rsp], 5
  00062	74 4d		 je	 SHORT $LN9@WinInputCa
  00064	e9 92 04 00 00	 jmp	 $LN33@WinInputCa
$LN57@WinInputCa:
  00069	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 256 ; 00000100H
  00071	0f 82 84 04 00
	00		 jb	 $LN33@WinInputCa
  00077	81 7c 24 20 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  0007f	76 49		 jbe	 SHORT $LN12@WinInputCa
  00081	81 7c 24 20 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  00089	0f 86 6c 04 00
	00		 jbe	 $LN33@WinInputCa
  0008f	81 7c 24 20 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  00097	76 31		 jbe	 SHORT $LN12@WinInputCa
  00099	81 7c 24 20 11
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 273 ; 00000111H
  000a1	0f 84 c5 02 00
	00		 je	 $LN26@WinInputCa
  000a7	e9 4f 04 00 00	 jmp	 $LN33@WinInputCa
$LN8@WinInputCa:

; 122  :     { 
; 123  :         case WM_CREATE:
; 124  :         {
; 125  :             // Initialize the window. 
; 126  :             break; 

  000ac	e9 74 04 00 00	 jmp	 $LN2@WinInputCa
$LN9@WinInputCa:

; 127  :         }
; 128  :         
; 129  :         case WM_SIZE:
; 130  :         {
; 131  :             // Set the size and position of the window. 
; 132  :             break;

  000b1	e9 6f 04 00 00	 jmp	 $LN2@WinInputCa
$LN10@WinInputCa:

; 133  :         }
; 134  :         case WM_CLOSE:
; 135  :         {
; 136  :             GlobalRunning = false;

  000b6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0

; 137  :             break;

  000c0	e9 60 04 00 00	 jmp	 $LN2@WinInputCa
$LN11@WinInputCa:

; 138  :         }
; 139  :         case WM_DESTROY:
; 140  :         {
; 141  :             break;

  000c5	e9 5b 04 00 00	 jmp	 $LN2@WinInputCa
$LN12@WinInputCa:

; 142  :         }
; 143  :         case WM_SYSKEYDOWN:
; 144  :         case WM_SYSKEYUP:
; 145  :         case WM_KEYDOWN:
; 146  :         case WM_KEYUP:
; 147  :         {
; 148  :             bool32 IsDown = ((lParam & (1<<31)) == 0);

  000ca	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  000d2	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  000d8	48 85 c0	 test	 rax, rax
  000db	75 0a		 jne	 SHORT $LN35@WinInputCa
  000dd	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  000e5	eb 08		 jmp	 SHORT $LN36@WinInputCa
$LN35@WinInputCa:
  000e7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN36@WinInputCa:
  000ef	8b 44 24 30	 mov	 eax, DWORD PTR tv67[rsp]
  000f3	89 44 24 24	 mov	 DWORD PTR IsDown$1[rsp], eax

; 149  :             bool32 WasDown = ((lParam & (1<<30)) != 0);

  000f7	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  000ff	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  00105	48 85 c0	 test	 rax, rax
  00108	74 0a		 je	 SHORT $LN37@WinInputCa
  0010a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00112	eb 08		 jmp	 SHORT $LN38@WinInputCa
$LN37@WinInputCa:
  00114	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN38@WinInputCa:
  0011c	8b 44 24 34	 mov	 eax, DWORD PTR tv70[rsp]
  00120	89 44 24 68	 mov	 DWORD PTR WasDown$3[rsp], eax

; 150  : 
; 151  :             // NOTE: Alt only on SYSDOWN messages
; 152  :             bool32 AltPressed = ((lParam & (1<<29)) != 0);

  00124	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  0012c	48 25 00 00 00
	20		 and	 rax, 536870912		; 20000000H
  00132	48 85 c0	 test	 rax, rax
  00135	74 0a		 je	 SHORT $LN39@WinInputCa
  00137	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  0013f	eb 08		 jmp	 SHORT $LN40@WinInputCa
$LN39@WinInputCa:
  00141	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN40@WinInputCa:
  00149	8b 44 24 38	 mov	 eax, DWORD PTR tv73[rsp]
  0014d	89 44 24 6c	 mov	 DWORD PTR AltPressed$4[rsp], eax

; 153  :             
; 154  :             if(IsDown != WasDown)

  00151	8b 44 24 68	 mov	 eax, DWORD PTR WasDown$3[rsp]
  00155	39 44 24 24	 cmp	 DWORD PTR IsDown$1[rsp], eax
  00159	0f 84 08 02 00
	00		 je	 $LN13@WinInputCa

; 155  :             {  
; 156  :                 switch(wParam)

  0015f	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR wParam$[rsp]
  00167	48 89 44 24 60	 mov	 QWORD PTR tv75[rsp], rax
  0016c	48 8b 44 24 60	 mov	 rax, QWORD PTR tv75[rsp]
  00171	48 83 e8 0d	 sub	 rax, 13
  00175	48 89 44 24 60	 mov	 QWORD PTR tv75[rsp], rax
  0017a	48 83 7c 24 60
	66		 cmp	 QWORD PTR tv75[rsp], 102 ; 00000066H
  00180	0f 87 e1 01 00
	00		 ja	 $LN4@WinInputCa
  00186	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:__ImageBase
  0018d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv75[rsp]
  00192	0f b6 8c 08 00
	00 00 00	 movzx	 ecx, BYTE PTR $LN58@WinInputCa[rax+rcx]
  0019a	8b 8c 88 00 00
	00 00		 mov	 ecx, DWORD PTR $LN59@WinInputCa[rax+rcx*4]
  001a1	48 03 c8	 add	 rcx, rax
  001a4	ff e1		 jmp	 rcx
$LN14@WinInputCa:

; 157  :                 {
; 158  :                     case VK_UP:
; 159  :                     {
; 160  :                         WinInput.buttons[input::B_UP] = IsDown ? 1 : 0;

  001a6	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  001ab	74 0a		 je	 SHORT $LN41@WinInputCa
  001ad	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  001b5	eb 08		 jmp	 SHORT $LN42@WinInputCa
$LN41@WinInputCa:
  001b7	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN42@WinInputCa:
  001bf	b8 04 00 00 00	 mov	 eax, 4
  001c4	48 6b c0 04	 imul	 rax, rax, 4
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  001cf	8b 54 24 3c	 mov	 edx, DWORD PTR tv79[rsp]
  001d3	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 161  :                         break;

  001d6	e9 8c 01 00 00	 jmp	 $LN4@WinInputCa
$LN15@WinInputCa:

; 162  :                     }
; 163  :                     case VK_DOWN:
; 164  :                     {
; 165  :                         WinInput.buttons[input::B_DOWN] = IsDown ? 1 : 0;

  001db	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  001e0	74 0a		 je	 SHORT $LN43@WinInputCa
  001e2	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  001ea	eb 08		 jmp	 SHORT $LN44@WinInputCa
$LN43@WinInputCa:
  001ec	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN44@WinInputCa:
  001f4	b8 04 00 00 00	 mov	 eax, 4
  001f9	48 6b c0 05	 imul	 rax, rax, 5
  001fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  00204	8b 54 24 40	 mov	 edx, DWORD PTR tv83[rsp]
  00208	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 166  :                         break;

  0020b	e9 57 01 00 00	 jmp	 $LN4@WinInputCa
$LN16@WinInputCa:

; 167  :                     }
; 168  :                     case VK_LEFT:
; 169  :                     {
; 170  :                         WinInput.buttons[input::B_LEFT] = IsDown ? 1 : 0;

  00210	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  00215	74 0a		 je	 SHORT $LN45@WinInputCa
  00217	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv87[rsp], 1
  0021f	eb 08		 jmp	 SHORT $LN46@WinInputCa
$LN45@WinInputCa:
  00221	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN46@WinInputCa:
  00229	b8 04 00 00 00	 mov	 eax, 4
  0022e	48 6b c0 06	 imul	 rax, rax, 6
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  00239	8b 54 24 44	 mov	 edx, DWORD PTR tv87[rsp]
  0023d	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 171  :                         break;

  00240	e9 22 01 00 00	 jmp	 $LN4@WinInputCa
$LN17@WinInputCa:

; 172  :                     }
; 173  :                     case VK_RIGHT:
; 174  :                     {
; 175  :                         WinInput.buttons[input::B_RIGHT] = IsDown ? 1 : 0;

  00245	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  0024a	74 0a		 je	 SHORT $LN47@WinInputCa
  0024c	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
  00254	eb 08		 jmp	 SHORT $LN48@WinInputCa
$LN47@WinInputCa:
  00256	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN48@WinInputCa:
  0025e	b8 04 00 00 00	 mov	 eax, 4
  00263	48 6b c0 07	 imul	 rax, rax, 7
  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  0026e	8b 54 24 48	 mov	 edx, DWORD PTR tv91[rsp]
  00272	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 176  :                         break;

  00275	e9 ed 00 00 00	 jmp	 $LN4@WinInputCa
$LN18@WinInputCa:

; 177  :                     }
; 178  :                     case 'Z':
; 179  :                     {
; 180  :                         WinInput.buttons[input::B_A] = IsDown ? 1 : 0;

  0027a	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  0027f	74 0a		 je	 SHORT $LN49@WinInputCa
  00281	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
  00289	eb 08		 jmp	 SHORT $LN50@WinInputCa
$LN49@WinInputCa:
  0028b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
$LN50@WinInputCa:
  00293	b8 04 00 00 00	 mov	 eax, 4
  00298	48 6b c0 00	 imul	 rax, rax, 0
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  002a3	8b 54 24 4c	 mov	 edx, DWORD PTR tv95[rsp]
  002a7	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 181  :                         break;

  002aa	e9 b8 00 00 00	 jmp	 $LN4@WinInputCa
$LN19@WinInputCa:

; 182  :                     }
; 183  :                     case 'X':
; 184  :                     {
; 185  :                         WinInput.buttons[input::B_B] = IsDown ? 1 : 0;

  002af	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  002b4	74 0a		 je	 SHORT $LN51@WinInputCa
  002b6	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  002be	eb 08		 jmp	 SHORT $LN52@WinInputCa
$LN51@WinInputCa:
  002c0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN52@WinInputCa:
  002c8	b8 04 00 00 00	 mov	 eax, 4
  002cd	48 6b c0 01	 imul	 rax, rax, 1
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  002d8	8b 54 24 50	 mov	 edx, DWORD PTR tv131[rsp]
  002dc	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 186  :                         break;

  002df	e9 83 00 00 00	 jmp	 $LN4@WinInputCa
$LN20@WinInputCa:

; 187  :                     }
; 188  :                     case VK_RETURN:
; 189  :                     {
; 190  :                         WinInput.buttons[input::B_START] = IsDown ? 1 : 0;

  002e4	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  002e9	74 0a		 je	 SHORT $LN53@WinInputCa
  002eb	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  002f3	eb 08		 jmp	 SHORT $LN54@WinInputCa
$LN53@WinInputCa:
  002f5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN54@WinInputCa:
  002fd	b8 04 00 00 00	 mov	 eax, 4
  00302	48 6b c0 03	 imul	 rax, rax, 3
  00306	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  0030d	8b 54 24 54	 mov	 edx, DWORD PTR tv135[rsp]
  00311	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 191  :                         break;

  00314	eb 51		 jmp	 SHORT $LN4@WinInputCa
$LN21@WinInputCa:

; 192  :                     }
; 193  :                     case VK_SHIFT:
; 194  :                     {
; 195  :                         WinInput.buttons[input::B_SELECT] = IsDown ? 1 : 0;

  00316	83 7c 24 24 00	 cmp	 DWORD PTR IsDown$1[rsp], 0
  0031b	74 0a		 je	 SHORT $LN55@WinInputCa
  0031d	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv139[rsp], 1
  00325	eb 08		 jmp	 SHORT $LN56@WinInputCa
$LN55@WinInputCa:
  00327	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
$LN56@WinInputCa:
  0032f	b8 04 00 00 00	 mov	 eax, 4
  00334	48 6b c0 02	 imul	 rax, rax, 2
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?WinInput@@3Uinput@@A
  0033f	8b 54 24 58	 mov	 edx, DWORD PTR tv139[rsp]
  00343	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 196  :                         break;

  00346	eb 1f		 jmp	 SHORT $LN4@WinInputCa

; 197  :                     }
; 198  :                     case VK_SPACE:
; 199  :                     {                        
; 200  :                         break;

  00348	eb 1d		 jmp	 SHORT $LN4@WinInputCa
$LN23@WinInputCa:

; 201  :                     }
; 202  :                     case VK_ESCAPE:
; 203  :                     {
; 204  :                         GlobalRunning = false;

  0034a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0

; 205  :                         break;

  00354	eb 11		 jmp	 SHORT $LN4@WinInputCa
$LN24@WinInputCa:

; 206  :                     }
; 207  :                     case VK_F4:
; 208  :                     {
; 209  :                         if(AltPressed)

  00356	83 7c 24 6c 00	 cmp	 DWORD PTR AltPressed$4[rsp], 0
  0035b	74 0a		 je	 SHORT $LN25@WinInputCa

; 210  :                         {
; 211  :                             GlobalRunning = false;

  0035d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0
$LN25@WinInputCa:
$LN4@WinInputCa:
$LN13@WinInputCa:

; 212  :                         }
; 213  :                         break;
; 214  :                     }
; 215  :                 }
; 216  :             }
; 217  :             break;

  00367	e9 b9 01 00 00	 jmp	 $LN2@WinInputCa
$LN26@WinInputCa:

; 218  :         }
; 219  :         
; 220  :         case WM_COMMAND:
; 221  :         {
; 222  :             switch(LOWORD(wParam))

  0036c	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR wParam$[rsp]
  00374	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0037a	0f b7 c0	 movzx	 eax, ax
  0037d	89 44 24 2c	 mov	 DWORD PTR tv146[rsp], eax
  00381	81 7c 24 2c e9
	03 00 00	 cmp	 DWORD PTR tv146[rsp], 1001 ; 000003e9H
  00389	74 21		 je	 SHORT $LN27@WinInputCa
  0038b	81 7c 24 2c ea
	03 00 00	 cmp	 DWORD PTR tv146[rsp], 1002 ; 000003eaH
  00393	0f 84 36 01 00
	00		 je	 $LN31@WinInputCa
  00399	81 7c 24 2c eb
	03 00 00	 cmp	 DWORD PTR tv146[rsp], 1003 ; 000003ebH
  003a1	0f 84 48 01 00
	00		 je	 $LN32@WinInputCa
  003a7	e9 4d 01 00 00	 jmp	 $LN6@WinInputCa
$LN27@WinInputCa:

; 223  :             {
; 224  :                 case ID_OPEN_ROM_ITEM:
; 225  :                 {
; 226  :                     char tempFileName[256];
; 227  :                     
; 228  :                     OPENFILENAMEA newRom = {};

  003ac	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR newRom$6[rsp]
  003b4	48 8b f8	 mov	 rdi, rax
  003b7	33 c0		 xor	 eax, eax
  003b9	b9 98 00 00 00	 mov	 ecx, 152		; 00000098H
  003be	f3 aa		 rep stosb

; 229  :                     newRom.lStructSize = sizeof(OPENFILENAME);

  003c0	c7 84 24 80 00
	00 00 98 00 00
	00		 mov	 DWORD PTR newRom$6[rsp], 152 ; 00000098H

; 230  :                     newRom.hwndOwner = WindowHandle;

  003cb	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR WindowHandle$[rsp]
  003d3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR newRom$6[rsp+8], rax

; 231  :                     newRom.lpstrFile = tempFileName;

  003db	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR tempFileName$7[rsp]
  003e3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR newRom$6[rsp+48], rax

; 232  :                     newRom.lpstrFile[0] = '\0';

  003eb	b8 01 00 00 00	 mov	 eax, 1
  003f0	48 6b c0 00	 imul	 rax, rax, 0
  003f4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR newRom$6[rsp+48]
  003fc	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 233  :                     newRom.nMaxFile = sizeof(tempFileName);

  00400	c7 84 24 b8 00
	00 00 00 01 00
	00		 mov	 DWORD PTR newRom$6[rsp+56], 256 ; 00000100H

; 234  :                     newRom.lpstrFilter = ".nes\0*.nes\0";

  0040b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG89233
  00412	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR newRom$6[rsp+24], rax

; 235  :                     newRom.nFilterIndex =1;

  0041a	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR newRom$6[rsp+44], 1

; 236  :                     newRom.lpstrFileTitle = NULL ;

  00425	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newRom$6[rsp+64], 0

; 237  :                     newRom.nMaxFileTitle = 0 ;

  00431	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newRom$6[rsp+72], 0

; 238  :                     newRom.lpstrInitialDir=NULL ;

  0043c	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newRom$6[rsp+80], 0

; 239  :                     newRom.Flags = OFN_PATHMUSTEXIST|OFN_FILEMUSTEXIST ;

  00448	c7 84 24 e0 00
	00 00 00 18 00
	00		 mov	 DWORD PTR newRom$6[rsp+96], 6144 ; 00001800H

; 240  : 
; 241  :                     bool32 FileOpened = GetOpenFileName(&newRom); 

  00453	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR newRom$6[rsp]
  0045b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetOpenFileNameA
  00461	89 44 24 70	 mov	 DWORD PTR FileOpened$5[rsp], eax

; 242  :                     
; 243  :                     if(FileOpened) // If exists then restart emulator with new file 

  00465	83 7c 24 70 00	 cmp	 DWORD PTR FileOpened$5[rsp], 0
  0046a	74 61		 je	 SHORT $LN28@WinInputCa

; 244  :                     {
; 245  :                         ZeroMemory(&RomFileName, sizeof(RomFileName));

  0046c	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00472	33 d2		 xor	 edx, edx
  00474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?RomFileName@@3PADA
  0047b	e8 00 00 00 00	 call	 memset

; 246  :                         uint8 NameSize = strlen(tempFileName);

  00480	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR tempFileName$7[rsp]
  00488	e8 00 00 00 00	 call	 strlen
  0048d	88 44 24 28	 mov	 BYTE PTR NameSize$2[rsp], al

; 247  :                         cpyMemory((uint8 *)RomFileName, (uint8 *)tempFileName, NameSize);

  00491	0f b6 44 24 28	 movzx	 eax, BYTE PTR NameSize$2[rsp]
  00496	44 0f b7 c0	 movzx	 r8d, ax
  0049a	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR tempFileName$7[rsp]
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?RomFileName@@3PADA
  004a9	e8 00 00 00 00	 call	 ?cpyMemory@@YAXPEAE0G@Z	; cpyMemory

; 248  :                         
; 249  :                         if(PowerOn)

  004ae	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  004b5	74 0c		 je	 SHORT $LN29@WinInputCa

; 250  :                         {
; 251  :                             ResetHit = true;

  004b7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?ResetHit@@3HA, 1

; 252  :                         }
; 253  :                         else

  004c1	eb 0a		 jmp	 SHORT $LN30@WinInputCa
$LN29@WinInputCa:

; 254  :                         {
; 255  :                             PowerHit = true;

  004c3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PowerHit@@3HA, 1
$LN30@WinInputCa:
$LN28@WinInputCa:

; 256  :                         }
; 257  :                     }
; 258  :                     
; 259  :                     break;

  004cd	eb 2a		 jmp	 SHORT $LN6@WinInputCa
$LN31@WinInputCa:

; 260  :                 }
; 261  :                 case ID_CLOSE_ROM_ITEM:
; 262  :                 {
; 263  :                     ZeroMemory(&RomFileName, sizeof(RomFileName));

  004cf	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  004d5	33 d2		 xor	 edx, edx
  004d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?RomFileName@@3PADA
  004de	e8 00 00 00 00	 call	 memset

; 264  :                     PowerHit = true;

  004e3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?PowerHit@@3HA, 1

; 265  :                     break;

  004ed	eb 0a		 jmp	 SHORT $LN6@WinInputCa
$LN32@WinInputCa:

; 266  :                 }
; 267  :                 case ID_QUIT_ITEM:
; 268  :                 {
; 269  :                     GlobalRunning = false;

  004ef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 0
$LN6@WinInputCa:

; 270  :                     break;
; 271  :                 }
; 272  :             }
; 273  :             break;

  004f9	eb 2a		 jmp	 SHORT $LN2@WinInputCa
$LN33@WinInputCa:

; 274  :         }
; 275  :                 
; 276  :         default:
; 277  :         {
; 278  :             Result = DefWindowProc(WindowHandle, Message, wParam, lParam);

  004fb	4c 8b 8c 24 58
	02 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  00503	4c 8b 84 24 50
	02 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  0050b	8b 94 24 48 02
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  00512	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR WindowHandle$[rsp]
  0051a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  00520	48 89 44 24 78	 mov	 QWORD PTR Result$[rsp], rax
$LN2@WinInputCa:

; 279  :             break;
; 280  :         }
; 281  :     }
; 282  :     return Result;

  00525	48 8b 44 24 78	 mov	 rax, QWORD PTR Result$[rsp]

; 283  : }

  0052a	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00532	48 33 cc	 xor	 rcx, rsp
  00535	e8 00 00 00 00	 call	 __security_check_cookie
  0053a	48 81 c4 30 02
	00 00		 add	 rsp, 560		; 00000230H
  00541	5f		 pop	 rdi
  00542	c3		 ret	 0
  00543	90		 npad	 1
$LN59@WinInputCa:
  00544	00 00 00 00	 DD	 $LN20@WinInputCa
  00548	00 00 00 00	 DD	 $LN21@WinInputCa
  0054c	00 00 00 00	 DD	 $LN23@WinInputCa
  00550	00 00 00 00	 DD	 $LN16@WinInputCa
  00554	00 00 00 00	 DD	 $LN14@WinInputCa
  00558	00 00 00 00	 DD	 $LN17@WinInputCa
  0055c	00 00 00 00	 DD	 $LN15@WinInputCa
  00560	00 00 00 00	 DD	 $LN19@WinInputCa
  00564	00 00 00 00	 DD	 $LN18@WinInputCa
  00568	00 00 00 00	 DD	 $LN24@WinInputCa
  0056c	00 00 00 00	 DD	 $LN4@WinInputCa
$LN58@WinInputCa:
  00570	00		 DB	 0
  00571	0a		 DB	 10
  00572	0a		 DB	 10
  00573	01		 DB	 1
  00574	0a		 DB	 10
  00575	0a		 DB	 10
  00576	0a		 DB	 10
  00577	0a		 DB	 10
  00578	0a		 DB	 10
  00579	0a		 DB	 10
  0057a	0a		 DB	 10
  0057b	0a		 DB	 10
  0057c	0a		 DB	 10
  0057d	0a		 DB	 10
  0057e	02		 DB	 2
  0057f	0a		 DB	 10
  00580	0a		 DB	 10
  00581	0a		 DB	 10
  00582	0a		 DB	 10
  00583	0a		 DB	 10
  00584	0a		 DB	 10
  00585	0a		 DB	 10
  00586	0a		 DB	 10
  00587	0a		 DB	 10
  00588	03		 DB	 3
  00589	04		 DB	 4
  0058a	05		 DB	 5
  0058b	06		 DB	 6
  0058c	0a		 DB	 10
  0058d	0a		 DB	 10
  0058e	0a		 DB	 10
  0058f	0a		 DB	 10
  00590	0a		 DB	 10
  00591	0a		 DB	 10
  00592	0a		 DB	 10
  00593	0a		 DB	 10
  00594	0a		 DB	 10
  00595	0a		 DB	 10
  00596	0a		 DB	 10
  00597	0a		 DB	 10
  00598	0a		 DB	 10
  00599	0a		 DB	 10
  0059a	0a		 DB	 10
  0059b	0a		 DB	 10
  0059c	0a		 DB	 10
  0059d	0a		 DB	 10
  0059e	0a		 DB	 10
  0059f	0a		 DB	 10
  005a0	0a		 DB	 10
  005a1	0a		 DB	 10
  005a2	0a		 DB	 10
  005a3	0a		 DB	 10
  005a4	0a		 DB	 10
  005a5	0a		 DB	 10
  005a6	0a		 DB	 10
  005a7	0a		 DB	 10
  005a8	0a		 DB	 10
  005a9	0a		 DB	 10
  005aa	0a		 DB	 10
  005ab	0a		 DB	 10
  005ac	0a		 DB	 10
  005ad	0a		 DB	 10
  005ae	0a		 DB	 10
  005af	0a		 DB	 10
  005b0	0a		 DB	 10
  005b1	0a		 DB	 10
  005b2	0a		 DB	 10
  005b3	0a		 DB	 10
  005b4	0a		 DB	 10
  005b5	0a		 DB	 10
  005b6	0a		 DB	 10
  005b7	0a		 DB	 10
  005b8	0a		 DB	 10
  005b9	0a		 DB	 10
  005ba	0a		 DB	 10
  005bb	07		 DB	 7
  005bc	0a		 DB	 10
  005bd	08		 DB	 8
  005be	0a		 DB	 10
  005bf	0a		 DB	 10
  005c0	0a		 DB	 10
  005c1	0a		 DB	 10
  005c2	0a		 DB	 10
  005c3	0a		 DB	 10
  005c4	0a		 DB	 10
  005c5	0a		 DB	 10
  005c6	0a		 DB	 10
  005c7	0a		 DB	 10
  005c8	0a		 DB	 10
  005c9	0a		 DB	 10
  005ca	0a		 DB	 10
  005cb	0a		 DB	 10
  005cc	0a		 DB	 10
  005cd	0a		 DB	 10
  005ce	0a		 DB	 10
  005cf	0a		 DB	 10
  005d0	0a		 DB	 10
  005d1	0a		 DB	 10
  005d2	0a		 DB	 10
  005d3	0a		 DB	 10
  005d4	0a		 DB	 10
  005d5	0a		 DB	 10
  005d6	09		 DB	 9
?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP		; WinInputCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
Byte$1 = 0
Dest$ = 32
Src$ = 40
Size$ = 48
?cpyMemory@@YAXPEAE0G@Z PROC				; cpyMemory

; 95   : {

  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 18	 sub	 rsp, 24

; 96   :     // NOTE: Very basic copy. Not bounds protection
; 97   :     for(uint16 Byte = 0; Byte < Size; ++Byte)

  00014	33 c0		 xor	 eax, eax
  00016	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
  0001a	eb 0b		 jmp	 SHORT $LN4@cpyMemory
$LN2@cpyMemory:
  0001c	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  00020	66 ff c0	 inc	 ax
  00023	66 89 04 24	 mov	 WORD PTR Byte$1[rsp], ax
$LN4@cpyMemory:
  00027	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  0002b	0f b7 4c 24 30	 movzx	 ecx, WORD PTR Size$[rsp]
  00030	3b c1		 cmp	 eax, ecx
  00032	7d 1c		 jge	 SHORT $LN3@cpyMemory

; 98   :         Dest[Byte] = Src[Byte];

  00034	0f b7 04 24	 movzx	 eax, WORD PTR Byte$1[rsp]
  00038	0f b7 0c 24	 movzx	 ecx, WORD PTR Byte$1[rsp]
  0003c	48 8b 54 24 20	 mov	 rdx, QWORD PTR Dest$[rsp]
  00041	4c 8b 44 24 28	 mov	 r8, QWORD PTR Src$[rsp]
  00046	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  0004b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004e	eb cc		 jmp	 SHORT $LN2@cpyMemory
$LN3@cpyMemory:

; 99   : }

  00050	48 83 c4 18	 add	 rsp, 24
  00054	c3		 ret	 0
?cpyMemory@@YAXPEAE0G@Z ENDP				; cpyMemory
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
MSElapsed$ = 32
Counter$ = 40
CounterElapsed$ = 48
PerfCountFrequency$ = 80
?getMilliSeconds@@YAM_K@Z PROC				; getMilliSeconds

; 84   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 85   :     LARGE_INTEGER Counter;
; 86   :     QueryPerformanceCounter(&Counter);

  00009	48 8d 4c 24 28	 lea	 rcx, QWORD PTR Counter$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceCounter

; 87   :     
; 88   :     uint64 CounterElapsed = Counter.QuadPart;

  00014	48 8b 44 24 28	 mov	 rax, QWORD PTR Counter$[rsp]
  00019	48 89 44 24 30	 mov	 QWORD PTR CounterElapsed$[rsp], rax

; 89   :     real32 MSElapsed = ((1000.0f * (real32)CounterElapsed) / (real32)PerfCountFrequency);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR CounterElapsed$[rsp]
  00023	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00028	48 85 c0	 test	 rax, rax
  0002b	7d 08		 jge	 SHORT $LN4@getMilliSe
  0002d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@5f800000
$LN4@getMilliSe:
  00035	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@447a0000
  0003d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00041	0f 28 c1	 movaps	 xmm0, xmm1
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR PerfCountFrequency$[rsp]
  00049	f3 48 0f 2a c8	 cvtsi2ss xmm1, rax
  0004e	48 85 c0	 test	 rax, rax
  00051	7d 08		 jge	 SHORT $LN3@getMilliSe
  00053	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@5f800000
$LN3@getMilliSe:
  0005b	f3 0f 5e c1	 divss	 xmm0, xmm1
  0005f	f3 0f 11 44 24
	20		 movss	 DWORD PTR MSElapsed$[rsp], xmm0

; 90   : 
; 91   :     return(MSElapsed);

  00065	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR MSElapsed$[rsp]

; 92   : }

  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
?getMilliSeconds@@YAM_K@Z ENDP				; getMilliSeconds
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1779 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1780 :         int _Result;
; 1781 :         va_list _ArgList;
; 1782 :         __crt_va_start(_ArgList, _Format);

  00018	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0001d	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00022	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1783 : 
; 1784 :         #pragma warning(push)
; 1785 :         #pragma warning(disable: 4996) // Deprecation
; 1786 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00027	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0002c	45 33 c0	 xor	 r8d, r8d
  0002f	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00039	e8 00 00 00 00	 call	 _vsprintf_l
  0003e	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1787 :         #pragma warning(pop)
; 1788 : 
; 1789 :         __crt_va_end(_ArgList);

  00042	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1790 :         return _Result;

  0004b	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1791 :     }

  0004f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00053	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1457 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1458 :         #pragma warning(push)
; 1459 :         #pragma warning(disable: 4996) // Deprecation
; 1460 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1461 :         #pragma warning(pop)
; 1462 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1387 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1388 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 __stdio_common_vsprintf
  0004f	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1389 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1390 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1391 : 
; 1392 :         return _Result < 0 ? -1 : _Result;

  00053	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00058	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005a	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00062	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00068	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006c	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1393 :     }

  00070	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00074	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.15063.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File y:\nesemud\code\nesemu.cpp
_TEXT	SEGMENT
i$1 = 96
ResScale$ = 97
WindowHeight$ = 100
WindowWidth$ = 104
RenderScaleHeight$ = 108
RenderScaleWidth$ = 112
InitialWindowPosY$ = 116
InitialWindowPosX$ = 120
TickCycles$2 = 124
Window$3 = 128
CpuMemorySize$4 = 136
CpuCyclesElapsed$5 = 140
CurrentSecs$6 = 144
PrevSecs$7 = 148
SubMenu$8 = 152
PpuMemorySize$9 = 160
CpuClockRateHz$10 = 164
ElapsedSecs$11 = 168
CpuMemoryBase$12 = 176
PpuMemoryBase$13 = 184
WindowMenu$14 = 192
Memory$15 = 200
DeviceContext$16 = 208
PerfCountFrequency$ = 216
CpuCyclesPerMS$17 = 224
WinPerfCountFrequency$ = 232
tv283 = 240
WindowClass$ = 256
Message$18 = 336
ScreenBackBuffer$ = 384
Nes$19 = 464
MemoryInfoBuffer$20 = 1104
__$ArrayPad$ = 1168
WindowInstance$ = 1200
PrevWindowInstance$ = 1208
CommandLine$ = 1216
CommandShow$ = 1224
WinMain	PROC

; 692  : {

$LN21:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec a0 04
	00 00		 sub	 rsp, 1184		; 000004a0H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 693  :     LARGE_INTEGER WinPerfCountFrequency;
; 694  :     QueryPerformanceFrequency(&WinPerfCountFrequency); 

  0002e	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR WinPerfCountFrequency$[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_QueryPerformanceFrequency

; 695  :     uint64 PerfCountFrequency = WinPerfCountFrequency.QuadPart;            

  0003c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR WinPerfCountFrequency$[rsp]
  00044	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR PerfCountFrequency$[rsp], rax

; 696  : 
; 697  :     /**************************************/
; 698  :     /* NOTE : Screen back buffer creation */
; 699  :     
; 700  :     uint16 RenderScaleWidth = 256, RenderScaleHeight = 240;

  0004c	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00051	66 89 44 24 70	 mov	 WORD PTR RenderScaleWidth$[rsp], ax
  00056	b8 f0 00 00 00	 mov	 eax, 240		; 000000f0H
  0005b	66 89 44 24 6c	 mov	 WORD PTR RenderScaleHeight$[rsp], ax

; 701  :     uint8 ResScale = 2;

  00060	c6 44 24 61 02	 mov	 BYTE PTR ResScale$[rsp], 2

; 702  :     uint16 WindowWidth = RenderScaleWidth * ResScale, WindowHeight = RenderScaleHeight * ResScale;

  00065	0f b7 44 24 70	 movzx	 eax, WORD PTR RenderScaleWidth$[rsp]
  0006a	0f b6 4c 24 61	 movzx	 ecx, BYTE PTR ResScale$[rsp]
  0006f	0f af c1	 imul	 eax, ecx
  00072	66 89 44 24 68	 mov	 WORD PTR WindowWidth$[rsp], ax
  00077	0f b7 44 24 6c	 movzx	 eax, WORD PTR RenderScaleHeight$[rsp]
  0007c	0f b6 4c 24 61	 movzx	 ecx, BYTE PTR ResScale$[rsp]
  00081	0f af c1	 imul	 eax, ecx
  00084	66 89 44 24 64	 mov	 WORD PTR WindowHeight$[rsp], ax

; 703  :     screen_buffer ScreenBackBuffer = {};

  00089	48 8d 84 24 80
	01 00 00	 lea	 rax, QWORD PTR ScreenBackBuffer$[rsp]
  00091	48 8b f8	 mov	 rdi, rax
  00094	33 c0		 xor	 eax, eax
  00096	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0009b	f3 aa		 rep stosb

; 704  :     createBackBuffer(&ScreenBackBuffer, RenderScaleWidth, RenderScaleHeight);

  0009d	44 0f b7 44 24
	6c		 movzx	 r8d, WORD PTR RenderScaleHeight$[rsp]
  000a3	0f b7 54 24 70	 movzx	 edx, WORD PTR RenderScaleWidth$[rsp]
  000a8	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR ScreenBackBuffer$[rsp]
  000b0	e8 00 00 00 00	 call	 ?createBackBuffer@@YAXPEAUscreen_buffer@@GG@Z ; createBackBuffer

; 705  : 
; 706  :     /**************************/
; 707  :     /* NOTE : Window creation */
; 708  : 
; 709  :     WNDCLASSA WindowClass = {};

  000b5	48 8d 84 24 00
	01 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  000bd	48 8b f8	 mov	 rdi, rax
  000c0	33 c0		 xor	 eax, eax
  000c2	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  000c7	f3 aa		 rep stosb

; 710  :     WindowClass.style = CS_HREDRAW | CS_VREDRAW;

  000c9	c7 84 24 00 01
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 711  :     WindowClass.lpfnWndProc = WinInputCallback;

  000d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?WinInputCallback@@YA_JPEAUHWND__@@I_K_J@Z ; WinInputCallback
  000db	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 712  :     WindowClass.hInstance = WindowInstance;

  000e3	48 8b 84 24 b0
	04 00 00	 mov	 rax, QWORD PTR WindowInstance$[rsp]
  000eb	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 713  :     WindowClass.lpszClassName = "Donkey Kong";

  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG90944
  000fa	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 714  : 
; 715  :     uint16 InitialWindowPosX = 0;

  00102	33 c0		 xor	 eax, eax
  00104	66 89 44 24 78	 mov	 WORD PTR InitialWindowPosX$[rsp], ax

; 716  :     uint16 InitialWindowPosY = 0;

  00109	33 c0		 xor	 eax, eax
  0010b	66 89 44 24 74	 mov	 WORD PTR InitialWindowPosY$[rsp], ax

; 717  :     
; 718  :     if(RegisterClassA(&WindowClass))

  00110	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  0011e	0f b7 c0	 movzx	 eax, ax
  00121	85 c0		 test	 eax, eax
  00123	0f 84 4f 05 00
	00		 je	 $LN9@WinMain

; 719  :     {        
; 720  :         HWND Window = CreateWindowExA(0, WindowClass.lpszClassName, "NesEmu", WS_OVERLAPPEDWINDOW|WS_VISIBLE,

  00129	0f b7 44 24 64	 movzx	 eax, WORD PTR WindowHeight$[rsp]
  0012e	0f b7 4c 24 68	 movzx	 ecx, WORD PTR WindowWidth$[rsp]
  00133	0f b7 54 24 74	 movzx	 edx, WORD PTR InitialWindowPosY$[rsp]
  00138	0f b7 7c 24 78	 movzx	 edi, WORD PTR InitialWindowPosX$[rsp]
  0013d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  00146	4c 8b 84 24 b0
	04 00 00	 mov	 r8, QWORD PTR WindowInstance$[rsp]
  0014e	4c 89 44 24 50	 mov	 QWORD PTR [rsp+80], r8
  00153	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  0015c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00165	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00169	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  0016d	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  00171	89 7c 24 20	 mov	 DWORD PTR [rsp+32], edi
  00175	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  0017b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG90947
  00182	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0018a	33 c9		 xor	 ecx, ecx
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00192	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR Window$3[rsp], rax

; 721  :                                       InitialWindowPosX, InitialWindowPosY, WindowWidth, WindowHeight,
; 722  :                                       0, 0, WindowInstance, 0);
; 723  : 
; 724  :         if(Window) // If window was created successfully

  0019a	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR Window$3[rsp], 0
  001a3	0f 84 bb 04 00
	00		 je	 $LN11@WinMain

; 725  :         {
; 726  :             HMENU WindowMenu = CreateMenu();

  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateMenu
  001af	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR WindowMenu$14[rsp], rax

; 727  :             HMENU SubMenu = CreatePopupMenu();

  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreatePopupMenu
  001bd	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR SubMenu$8[rsp], rax

; 728  :             
; 729  :             AppendMenu(SubMenu, MF_STRING, ID_OPEN_ROM_ITEM, "&Open Rom");

  001c5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG90950
  001cc	41 b8 e9 03 00
	00		 mov	 r8d, 1001		; 000003e9H
  001d2	33 d2		 xor	 edx, edx
  001d4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SubMenu$8[rsp]
  001dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 730  :             AppendMenu(SubMenu, MF_STRING, ID_CLOSE_ROM_ITEM, "&Close Rom");

  001e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG90951
  001e9	41 b8 ea 03 00
	00		 mov	 r8d, 1002		; 000003eaH
  001ef	33 d2		 xor	 edx, edx
  001f1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SubMenu$8[rsp]
  001f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 731  :             AppendMenu(SubMenu, MF_STRING, ID_QUIT_ITEM, "&Quit");

  001ff	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG90952
  00206	41 b8 eb 03 00
	00		 mov	 r8d, 1003		; 000003ebH
  0020c	33 d2		 xor	 edx, edx
  0020e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR SubMenu$8[rsp]
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 732  :             AppendMenu(WindowMenu, MF_STRING | MF_POPUP, (uint64)SubMenu, "&File");

  0021c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG90953
  00223	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR SubMenu$8[rsp]
  0022b	ba 10 00 00 00	 mov	 edx, 16
  00230	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR WindowMenu$14[rsp]
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AppendMenuA

; 733  : 
; 734  :             SetMenu(Window, WindowMenu);

  0023e	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR WindowMenu$14[rsp]
  00246	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetMenu

; 735  : 
; 736  :             /**************************************************************************/
; 737  :             /* NOTE : creation and initialization of Emulators Cpu, Ppu, and Cartridge structures */
; 738  : 
; 739  : 
; 740  :             // Memory allocation for the Cpu and Ppu.
; 741  :             uint32 CpuMemorySize = Kilobytes(64);

  00254	c7 84 24 88 00
	00 00 00 00 01
	00		 mov	 DWORD PTR CpuMemorySize$4[rsp], 65536 ; 00010000H

; 742  :             uint32 PpuMemorySize = Kilobytes(64);

  0025f	c7 84 24 a0 00
	00 00 00 00 01
	00		 mov	 DWORD PTR PpuMemorySize$9[rsp], 65536 ; 00010000H

; 743  : 
; 744  :             uint8 * Memory = (uint8 *)VirtualAlloc(0, (size_t)(CpuMemorySize + PpuMemorySize), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);

  0026a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR PpuMemorySize$9[rsp]
  00271	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR CpuMemorySize$4[rsp]
  00278	03 c8		 add	 ecx, eax
  0027a	8b c1		 mov	 eax, ecx
  0027c	8b c0		 mov	 eax, eax
  0027e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00284	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  0028a	8b d0		 mov	 edx, eax
  0028c	33 c9		 xor	 ecx, ecx
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  00294	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR Memory$15[rsp], rax

; 745  : 
; 746  :             uint64 CpuMemoryBase = (uint64)Memory;

  0029c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR Memory$15[rsp]
  002a4	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR CpuMemoryBase$12[rsp], rax

; 747  :             uint64 PpuMemoryBase = (uint64)Memory + CpuMemorySize;

  002ac	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR CpuMemorySize$4[rsp]
  002b3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR Memory$15[rsp]
  002bb	48 03 c8	 add	 rcx, rax
  002be	48 8b c1	 mov	 rax, rcx
  002c1	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR PpuMemoryBase$13[rsp], rax

; 748  :             GlobalCpuMemoryBase = CpuMemoryBase;

  002c9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR CpuMemoryBase$12[rsp]
  002d1	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?GlobalCpuMemoryBase@@3_KA, rax

; 749  :             GlobalPpuMemoryBase = PpuMemoryBase;

  002d8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR PpuMemoryBase$13[rsp]
  002e0	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?GlobalPpuMemoryBase@@3_KA, rax

; 750  : 
; 751  :             char MemoryInfoBuffer[64];
; 752  :             sprintf(MemoryInfoBuffer, "Cpu Base = %X , Ppu Base = %X\n", (uint32)CpuMemoryBase, (uint32)PpuMemoryBase);

  002e7	44 8b 8c 24 b8
	00 00 00	 mov	 r9d, DWORD PTR PpuMemoryBase$13[rsp]
  002ef	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR CpuMemoryBase$12[rsp]
  002f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG90954
  002fe	48 8d 8c 24 50
	04 00 00	 lea	 rcx, QWORD PTR MemoryInfoBuffer$20[rsp]
  00306	e8 00 00 00 00	 call	 sprintf

; 753  :             OutputDebugString(MemoryInfoBuffer);

  0030b	48 8d 8c 24 50
	04 00 00	 lea	 rcx, QWORD PTR MemoryInfoBuffer$20[rsp]
  00313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 754  :             
; 755  :             nes Nes = {};

  00319	48 8d 84 24 d0
	01 00 00	 lea	 rax, QWORD PTR Nes$19[rsp]
  00321	48 8b f8	 mov	 rdi, rax
  00324	33 c0		 xor	 eax, eax
  00326	b9 78 02 00 00	 mov	 ecx, 632		; 00000278H
  0032b	f3 aa		 rep stosb

; 756  :             initCpu(&Nes.Cpu, CpuMemoryBase);

  0032d	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR CpuMemoryBase$12[rsp]
  00335	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp]
  0033d	e8 00 00 00 00	 call	 ?initCpu@@YAXPEAUcpu@@_K@Z ; initCpu

; 757  :             initPpu(&Nes.Ppu, PpuMemoryBase, (uint32 *)ScreenBackBuffer.Memory);

  00342	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR ScreenBackBuffer$[rsp+48]
  0034a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR PpuMemoryBase$13[rsp]
  00352	48 8d 8c 24 38
	02 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp+104]
  0035a	e8 00 00 00 00	 call	 ?initPpu@@YAXPEAUppu@@_KPEAI@Z ; initPpu

; 758  :             GlobalCpu = &Nes.Cpu;

  0035f	48 8d 84 24 d0
	01 00 00	 lea	 rax, QWORD PTR Nes$19[rsp]
  00367	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?GlobalCpu@@3PEAUcpu@@EA, rax

; 759  :             GlobalPpu = &Nes.Ppu;

  0036e	48 8d 84 24 38
	02 00 00	 lea	 rax, QWORD PTR Nes$19[rsp+104]
  00376	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?GlobalPpu@@3PEAUppu@@EA, rax

; 760  :             
; 761  :             loadCartridge(&Nes, "Donkey Kong.nes");

  0037d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG90955
  00384	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp]
  0038c	e8 00 00 00 00	 call	 ?loadCartridge@@YAXPEAUnes@@PEAD@Z ; loadCartridge

; 762  : 
; 763  :             // NOTE: Load the program counter with the reset vector
; 764  :             Nes.Cpu.PrgCounter = readCpu16(RESET_VEC, &Nes.Cpu);

  00391	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR Nes$19[rsp]
  00399	66 b9 fc ff	 mov	 cx, 65532		; 0000fffcH
  0039d	e8 00 00 00 00	 call	 ?readCpu16@@YAGGPEAUcpu@@@Z ; readCpu16
  003a2	66 89 84 24 d6
	01 00 00	 mov	 WORD PTR Nes$19[rsp+6], ax

; 765  : 
; 766  :             /*****************/
; 767  :             /* NOTE : Timing */
; 768  :             
; 769  :             real32 CpuClockRateHz = 1789772.727272728;

  003aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49da7a66
  003b2	f3 0f 11 84 24
	a4 00 00 00	 movss	 DWORD PTR CpuClockRateHz$10[rsp], xmm0

; 770  :             real32 CpuCyclesPerMS = CpuClockRateHz / 1000.0;

  003bb	f3 0f 5a 84 24
	a4 00 00 00	 cvtss2sd xmm0, DWORD PTR CpuClockRateHz$10[rsp]
  003c4	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  003cc	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  003d0	f3 0f 11 84 24
	e0 00 00 00	 movss	 DWORD PTR CpuCyclesPerMS$17[rsp], xmm0

; 771  :             
; 772  :             uint32 CpuCyclesElapsed = 0;

  003d9	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR CpuCyclesElapsed$5[rsp], 0

; 773  :             uint32 TickCycles = 0;

  003e4	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR TickCycles$2[rsp], 0

; 774  :             
; 775  :             real32 ElapsedSecs = 0;

  003ec	0f 57 c0	 xorps	 xmm0, xmm0
  003ef	f3 0f 11 84 24
	a8 00 00 00	 movss	 DWORD PTR ElapsedSecs$11[rsp], xmm0

; 776  :             real32 CurrentSecs, PrevSecs = getMilliSeconds(PerfCountFrequency) / 1000.0f;

  003f8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR PerfCountFrequency$[rsp]
  00400	e8 00 00 00 00	 call	 ?getMilliSeconds@@YAM_K@Z ; getMilliSeconds
  00405	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0040d	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR PrevSecs$7[rsp], xmm0

; 777  : 
; 778  :             /********************/
; 779  :             /* NOTE : Main Loop */
; 780  :             
; 781  :             GlobalRunning = true; 

  00416	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?GlobalRunning@@3HA, 1
$LN2@WinMain:

; 782  :             while(GlobalRunning)

  00420	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?GlobalRunning@@3HA, 0
  00427	0f 84 35 02 00
	00		 je	 $LN3@WinMain

; 783  :             {
; 784  :                 MSG Message = {}; 

  0042d	48 8d 84 24 50
	01 00 00	 lea	 rax, QWORD PTR Message$18[rsp]
  00435	48 8b f8	 mov	 rdi, rax
  00438	33 c0		 xor	 eax, eax
  0043a	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0043f	f3 aa		 rep stosb
$LN4@WinMain:

; 785  :                 while (PeekMessage(&Message, Window, 0, 0, PM_REMOVE))

  00441	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00449	45 33 c9	 xor	 r9d, r9d
  0044c	45 33 c0	 xor	 r8d, r8d
  0044f	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR Window$3[rsp]
  00457	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR Message$18[rsp]
  0045f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00465	85 c0		 test	 eax, eax
  00467	74 1e		 je	 SHORT $LN5@WinMain

; 786  :                 {
; 787  :                     TranslateMessage(&Message);

  00469	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR Message$18[rsp]
  00471	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 788  :                     DispatchMessage(&Message);

  00477	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR Message$18[rsp]
  0047f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 789  :                 }

  00485	eb ba		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 790  : 
; 791  :                 if(PowerHit)

  00487	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerHit@@3HA, 0
  0048e	74 17		 je	 SHORT $LN13@WinMain

; 792  :                 {
; 793  :                     PowerHit = false;

  00490	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?PowerHit@@3HA, 0

; 794  :                     power(&Nes);

  0049a	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp]
  004a2	e8 00 00 00 00	 call	 ?power@@YAXPEAUnes@@@Z	; power
$LN13@WinMain:

; 795  :                 }
; 796  :                 
; 797  :                 if(ResetHit)

  004a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ResetHit@@3HA, 0
  004ae	74 2b		 je	 SHORT $LN14@WinMain

; 798  :                 {
; 799  :                     ResetHit = false;

  004b0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ResetHit@@3HA, 0

; 800  :                     loadCartridge(&Nes, RomFileName);

  004ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?RomFileName@@3PADA
  004c1	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp]
  004c9	e8 00 00 00 00	 call	 ?loadCartridge@@YAXPEAUnes@@PEAD@Z ; loadCartridge

; 801  :                     reset(&Nes);

  004ce	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp]
  004d6	e8 00 00 00 00	 call	 ?reset@@YAXPEAUnes@@@Z	; reset
$LN14@WinMain:

; 802  :                 }
; 803  : 
; 804  :                 if(Nes.Cpu.MapperWrite)

  004db	83 bc 24 e4 01
	00 00 00	 cmp	 DWORD PTR Nes$19[rsp+20], 0
  004e3	74 45		 je	 SHORT $LN15@WinMain

; 805  :                 {
; 806  :                     Nes.Cpu.MapperWrite = false;

  004e5	c7 84 24 e4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR Nes$19[rsp+20], 0

; 807  :                     mapperUpdate[Nes.Cartridge.MapperNum](&Nes.Cartridge, &Nes.Cpu, &Nes.Ppu);

  004f0	0f b6 84 24 31
	04 00 00	 movzx	 eax, BYTE PTR Nes$19[rsp+609]
  004f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mapperUpdate@@3PAP6AXPEAUcartridge@@PEAUcpu@@PEAUppu@@@ZA ; mapperUpdate
  004ff	48 89 8c 24 f0
	00 00 00	 mov	 QWORD PTR tv283[rsp], rcx
  00507	4c 8d 84 24 38
	02 00 00	 lea	 r8, QWORD PTR Nes$19[rsp+104]
  0050f	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR Nes$19[rsp]
  00517	48 8d 8c 24 f8
	03 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp+552]
  0051f	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR tv283[rsp]
  00527	ff 14 c7	 call	 QWORD PTR [rdi+rax*8]
$LN15@WinMain:

; 808  :                 }
; 809  :                 
; 810  :                 if(PowerOn)

  0052a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?PowerOn@@3HA, 0
  00531	74 68		 je	 SHORT $LN16@WinMain

; 811  :                 {
; 812  :                     TickCycles = cpuTick(&Nes.Cpu, &WinInput);

  00533	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?WinInput@@3Uinput@@A
  0053a	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR Nes$19[rsp]
  00542	e8 00 00 00 00	 call	 ?cpuTick@@YAEPEAUcpu@@PEAUinput@@@Z ; cpuTick
  00547	0f b6 c0	 movzx	 eax, al
  0054a	89 44 24 7c	 mov	 DWORD PTR TickCycles$2[rsp], eax

; 813  :                     
; 814  :                     for(uint8 i = 0; i < (3*TickCycles); ++i)

  0054e	c6 44 24 60 00	 mov	 BYTE PTR i$1[rsp], 0
  00553	eb 0b		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:
  00555	0f b6 44 24 60	 movzx	 eax, BYTE PTR i$1[rsp]
  0055a	fe c0		 inc	 al
  0055c	88 44 24 60	 mov	 BYTE PTR i$1[rsp], al
$LN8@WinMain:
  00560	0f b6 44 24 60	 movzx	 eax, BYTE PTR i$1[rsp]
  00565	6b 4c 24 7c 03	 imul	 ecx, DWORD PTR TickCycles$2[rsp], 3
  0056a	3b c1		 cmp	 eax, ecx
  0056c	73 17		 jae	 SHORT $LN7@WinMain

; 815  :                     {
; 816  :                         ppuTick(&ScreenBackBuffer, &Nes.Ppu);

  0056e	48 8d 94 24 38
	02 00 00	 lea	 rdx, QWORD PTR Nes$19[rsp+104]
  00576	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR ScreenBackBuffer$[rsp]
  0057e	e8 00 00 00 00	 call	 ?ppuTick@@YAXPEAUscreen_buffer@@PEAUppu@@@Z ; ppuTick

; 817  :                     }

  00583	eb d0		 jmp	 SHORT $LN6@WinMain
$LN7@WinMain:

; 818  : 
; 819  :                     CpuCyclesElapsed += TickCycles;

  00585	8b 44 24 7c	 mov	 eax, DWORD PTR TickCycles$2[rsp]
  00589	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR CpuCyclesElapsed$5[rsp]
  00590	03 c8		 add	 ecx, eax
  00592	8b c1		 mov	 eax, ecx
  00594	89 84 24 8c 00
	00 00		 mov	 DWORD PTR CpuCyclesElapsed$5[rsp], eax
$LN16@WinMain:

; 820  :                 }
; 821  :                 
; 822  :                 if(DrawScreen) // NOTE: Gets called everytime the vblank happens in Ppu TODO: Should it be the end of vblank?

  0059b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?DrawScreen@@3HA, 0
  005a2	74 6e		 je	 SHORT $LN17@WinMain

; 823  :                 {
; 824  :                     DrawScreen = false; 

  005a4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?DrawScreen@@3HA, 0

; 825  :                     getWindowSize(Window, &WindowWidth, &WindowHeight);

  005ae	4c 8d 44 24 64	 lea	 r8, QWORD PTR WindowHeight$[rsp]
  005b3	48 8d 54 24 68	 lea	 rdx, QWORD PTR WindowWidth$[rsp]
  005b8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  005c0	e8 00 00 00 00	 call	 ?getWindowSize@@YAXPEAUHWND__@@PEAG1@Z ; getWindowSize

; 826  :                 
; 827  :                     // NOTE: Drawing the backbuffer to the window 
; 828  :                     HDC DeviceContext = GetDC(Window);

  005c5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  005cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  005d3	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR DeviceContext$16[rsp], rax

; 829  :                     drawScreenBuffer(&ScreenBackBuffer, DeviceContext,

  005db	44 0f b7 4c 24
	64		 movzx	 r9d, WORD PTR WindowHeight$[rsp]
  005e1	44 0f b7 44 24
	68		 movzx	 r8d, WORD PTR WindowWidth$[rsp]
  005e7	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$16[rsp]
  005ef	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR ScreenBackBuffer$[rsp]
  005f7	e8 00 00 00 00	 call	 ?drawScreenBuffer@@YAXPEAUscreen_buffer@@PEAUHDC__@@GG@Z ; drawScreenBuffer

; 830  :                                      WindowWidth, WindowHeight);
; 831  :                     ReleaseDC(Window, DeviceContext);

  005fc	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$16[rsp]
  00604	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR Window$3[rsp]
  0060c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC
$LN17@WinMain:

; 832  :                 }
; 833  :            
; 834  :                 CurrentSecs = getMilliSeconds(PerfCountFrequency) / 1000.0f;

  00612	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR PerfCountFrequency$[rsp]
  0061a	e8 00 00 00 00	 call	 ?getMilliSeconds@@YAM_K@Z ; getMilliSeconds
  0061f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00627	f3 0f 11 84 24
	90 00 00 00	 movss	 DWORD PTR CurrentSecs$6[rsp], xmm0

; 835  :                 ElapsedSecs = CurrentSecs - PrevSecs;

  00630	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR CurrentSecs$6[rsp]
  00639	f3 0f 5c 84 24
	94 00 00 00	 subss	 xmm0, DWORD PTR PrevSecs$7[rsp]
  00642	f3 0f 11 84 24
	a8 00 00 00	 movss	 DWORD PTR ElapsedSecs$11[rsp], xmm0

; 836  :                 PrevSecs = CurrentSecs;

  0064b	f3 0f 10 84 24
	90 00 00 00	 movss	 xmm0, DWORD PTR CurrentSecs$6[rsp]
  00654	f3 0f 11 84 24
	94 00 00 00	 movss	 DWORD PTR PrevSecs$7[rsp], xmm0

; 837  :             }

  0065d	e9 be fd ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:

; 838  : 
; 839  :         }
; 840  :         else

  00662	eb 12		 jmp	 SHORT $LN12@WinMain
$LN11@WinMain:

; 841  :         {
; 842  :             // NOTE: Window failed to create
; 843  :             // TODO: Handle this in a better way
; 844  :             Assert(0);

  00664	33 c0		 xor	 eax, eax
  00666	83 f8 01	 cmp	 eax, 1
  00669	74 0b		 je	 SHORT $LN18@WinMain
  0066b	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN18@WinMain:
$LN12@WinMain:

; 845  :         }
; 846  :     }
; 847  :     else

  00676	eb 12		 jmp	 SHORT $LN10@WinMain
$LN9@WinMain:

; 848  :     {
; 849  :         // NOTE: Failed to register window
; 850  :         // TODO: Handle this in a better way
; 851  :         Assert(0);

  00678	33 c0		 xor	 eax, eax
  0067a	83 f8 01	 cmp	 eax, 1
  0067d	74 0b		 je	 SHORT $LN19@WinMain
  0067f	c7 04 25 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ds:0, 0
$LN19@WinMain:
$LN10@WinMain:

; 852  :     }
; 853  :     return(0);

  0068a	33 c0		 xor	 eax, eax

; 854  : } 

  0068c	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00694	48 33 cc	 xor	 rcx, rsp
  00697	e8 00 00 00 00	 call	 __security_check_cookie
  0069c	48 81 c4 a0 04
	00 00		 add	 rsp, 1184		; 000004a0H
  006a3	5f		 pop	 rdi
  006a4	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
