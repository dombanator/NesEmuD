
#if CPU_LOG
static void logCpu(cpu* Cpu)
{
    if(Cpu->LogHandle != INVALID_HANDLE_VALUE)
    {
        char logString[512];

        // NOTE: Go through each of the Cpu flags, and capitalise the coresponding letter
        //       in the string.     eg flags - 1000 0000, then string becomes Nvubdizc
        char flagString[9] = "nvubdizc";
        for(int i = 0; i < 8; ++i)
        {
            if(Cpu->LogFlags & (1 << (7 - i)))
            {
                flagString[i] -= 0x20;
            }
        }
        
        uint32 byteCount = sprintf(logString,
                                   "A:%02X X:%02X Y:%02X S:%02X P:%s  $%04X:%02X %2s %2s  %s%s\n",
                                   Cpu->LogA, Cpu->LogX, Cpu->LogY,
                                   Cpu->LogSP, flagString, 
                                   Cpu->LogPC, Cpu->LogOp,
                                   Cpu->LogData1, Cpu->LogData2,
                                   opName[Cpu->LogOp],
                                   Cpu->LogExtraInfo);

        uint32 bytesWritten;
        
        if(!writeLog(logString, byteCount, &bytesWritten, Cpu->LogHandle))
        {
            // Failed
        }
    }
    
    Cpu->LogData1[0] = '\0';
    Cpu->LogData2[0] = '\0';
    Cpu->LogExtraInfo[0] = '\0';
}
#endif
    
#if CPU_LOG
    Cpu->LogA = Cpu->A;
    Cpu->LogX = Cpu->X;
    Cpu->LogY = Cpu->Y;
    Cpu->LogSP = Cpu->StackPtr;
    Cpu->LogFlags = Cpu->Flags;
    Cpu->LogPC = Cpu->PrgCounter;
    Cpu->LogOp = Cpu->OpCode;
#endif

#if CPU_LOG
    logCpu(Cpu);
#endif
    
#if CPU_LOG
    Cpu->LogHandle = createLog("cpu.log");
#endif


#if 0
uint64 EndCycles = __rdtsc();
                
LARGE_INTEGER EndCounter;
QueryPerformanceCounter(&EndCounter);
                
uint64 CounterElapsed = EndCounter.QuadPart - LastCounter.QuadPart; 
uint64 CyclesElapsed = EndCycles - LastCycles;
                
real32 MSElapsed = ((1000.0f * (real32)CounterElapsed) / (real32)PerfCountFrequency);
real32 FPSElapsed = (real32)PerfCountFrequency / (real32)CounterElapsed;
real32 MCElapsed = (real32)CyclesElapsed / (1000.0f*1000.0f);                 
                
char TextBuffer[256];
_snprintf(TextBuffer, 256, "Cycles: %f, FPS: %f, DeltaTime: %f\n", MCElapsed, FPSElapsed, MSElapsed);
OutputDebugString(TextBuffer);
                
LastCounter = EndCounter;
LastCycles = EndCycles;
#endif



#if 0
                    uint32 CyclesInSec = CpuCyclesElapsed - LastCpuCyclesElapsed;
                    LastCpuCyclesElapsed = CpuCyclesElapsed;
                    char TextBuffer[256];
                    _snprintf(TextBuffer, 256, "Cpu Cycles per Second: %d , vs expected %f\n", CyclesInSec, CpuClockRateHz);
                    OutputDebugString(TextBuffer);
#endif
